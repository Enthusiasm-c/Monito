"""
=============================================================================
MONITO API TELEGRAM SENDER
=============================================================================
–í–µ—Ä—Å–∏—è: 3.0
–¶–µ–ª—å: –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram Bot API
=============================================================================
"""

import os
import json
import asyncio
import aiohttp
from typing import Dict, Any, Optional
from utils.logger import get_logger

logger = get_logger(__name__)

class TelegramSender:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram Bot API
    """
    
    def __init__(self, bot_token: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram sender
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot_token = bot_token or os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not self.bot_token:
            logger.warning("‚ö†Ô∏è Telegram bot token not provided. Telegram features will be disabled.")
            self.enabled = False
        else:
            self.enabled = True
            
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        logger.info(f"ü§ñ TelegramSender initialized: {'enabled' if self.enabled else 'disabled'}")
    
    async def send_response(self, response_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram
        
        Args:
            response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram API
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enabled:
            logger.warning("Telegram sender disabled - response not sent")
            return False
        
        method = response_data.get('method')
        
        if not method:
            logger.error("No method specified in response data")
            return False
        
        try:
            url = f"{self.base_url}/{method}"
            
            # –£–¥–∞–ª—è–µ–º method –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            send_data = {k: v for k, v in response_data.items() if k != 'method'}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=send_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.debug(f"‚úÖ Telegram {method} sent successfully")
                            return True
                        else:
                            logger.error(f"‚ùå Telegram API error: {result.get('description')}")
                            return False
                    else:
                        logger.error(f"‚ùå HTTP error {response.status} sending {method}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå Failed to send {method}: {e}")
            return False
    
    async def send_message(self, chat_id: int, text: str, **kwargs) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        response_data = {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': text,
            **kwargs
        }
        
        return await self.send_response(response_data)
    
    async def edit_message(self, chat_id: int, message_id: int, text: str, **kwargs) -> bool:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        response_data = {
            'method': 'editMessageText',
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text,
            **kwargs
        }
        
        return await self.send_response(response_data)
    
    async def answer_callback_query(self, callback_query_id: str, text: str = "", show_alert: bool = False) -> bool:
        """
        –û—Ç–≤–µ—Ç –Ω–∞ callback query
        
        Args:
            callback_query_id: ID callback query
            text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            show_alert: –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ alert
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        response_data = {
            'method': 'answerCallbackQuery',
            'callback_query_id': callback_query_id,
            'text': text,
            'show_alert': show_alert
        }
        
        return await self.send_response(response_data)
    
    async def set_webhook(self, webhook_url: str) -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL
        
        Args:
            webhook_url: URL –¥–ª—è webhook
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
        """
        if not self.enabled:
            return {"ok": False, "error": "Telegram sender disabled"}
        
        try:
            url = f"{self.base_url}/setWebhook"
            data = {"url": webhook_url}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        logger.info(f"‚úÖ Webhook set successfully: {webhook_url}")
                    else:
                        logger.error(f"‚ùå Failed to set webhook: {result.get('description')}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå Error setting webhook: {e}")
            return {"ok": False, "error": str(e)}
    
    async def get_webhook_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook
        """
        if not self.enabled:
            return {"ok": False, "error": "Telegram sender disabled"}
        
        try:
            url = f"{self.base_url}/getWebhookInfo"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    result = await response.json()
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå Error getting webhook info: {e}")
            return {"ok": False, "error": str(e)}
    
    async def delete_webhook(self) -> Dict[str, Any]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ webhook (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling)
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è webhook
        """
        if not self.enabled:
            return {"ok": False, "error": "Telegram sender disabled"}
        
        try:
            url = f"{self.base_url}/deleteWebhook"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        logger.info("‚úÖ Webhook deleted successfully")
                    else:
                        logger.error(f"‚ùå Failed to delete webhook: {result.get('description')}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå Error deleting webhook: {e}")
            return {"ok": False, "error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä sender'–∞
_telegram_sender: Optional[TelegramSender] = None

def get_telegram_sender() -> TelegramSender:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TelegramSender
    
    Returns:
        TelegramSender —ç–∫–∑–µ–º–ø–ª—è—Ä
    """
    global _telegram_sender
    
    if _telegram_sender is None:
        _telegram_sender = TelegramSender()
    
    return _telegram_sender 