#!/usr/bin/env python3
"""
Test AI-powered PDF parsing on the problematic PDF file
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Setup paths
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

from modules.pdf_parser import PDFParser

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_ai_pdf_parsing():
    """Test AI parsing on the problematic PDF file"""
    print("ü§ñ –¢–ï–°–¢ AI-–ü–ê–†–°–ò–ù–ì–ê PDF –§–ê–ô–õ–ê")
    print("=" * 60)
    
    # Check for API key
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # PDF file path
    pdf_file = "/Users/denisdomashenko/price_list_analyzer/1. PT. Global Anugrah Pasifik (groceries item).pdf"
    
    if not os.path.exists(pdf_file):
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_file}")
        return
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {os.path.basename(pdf_file)}")
    
    # Create PDF parser
    parser = PDFParser()
    
    # Test AI parsing
    print("\nü§ñ –¢–ï–°–¢ 1: AI-powered –ø–∞—Ä—Å–∏–Ω–≥")
    print("-" * 40)
    
    try:
        result_ai = parser.extract_products_from_pdf(pdf_file, max_products=50, use_ai=True)
        
        if 'error' in result_ai:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI –ø–∞—Ä—Å–∏–Ω–≥–∞: {result_ai['error']}")
        else:
            products_ai = result_ai.get('products', [])
            stats_ai = result_ai.get('extraction_stats', {})
            
            print(f"‚úÖ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(products_ai)}")
            print(f"üéØ –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {stats_ai.get('extraction_method', 'N/A')}")
            print(f"üîß AI Enhanced: {stats_ai.get('ai_enhanced', False)}")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats_ai.get('success_rate', 0):.1%}")
            
            # Show examples
            print(f"\nüéØ –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í (AI):")
            for i, product in enumerate(products_ai[:5]):
                print(f"{i+1}. {product.get('original_name', 'N/A')}")
                print(f"   üí∞ –¶–µ–Ω–∞: {product.get('price', 0)}")
                print(f"   üì¶ –ï–¥–∏–Ω–∏—Ü–∞: {product.get('unit', 'N/A')}")
                print(f"   üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product.get('brand', 'N/A')}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {product.get('size', 'N/A')}")
                print()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI —Ç–µ—Å—Ç–∞: {e}")
    
    # Test manual parsing for comparison
    print("\nüîß –¢–ï–°–¢ 2: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)")
    print("-" * 40)
    
    try:
        result_manual = parser.extract_products_from_pdf(pdf_file, max_products=50, use_ai=False)
        
        if 'error' in result_manual:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result_manual['error']}")
        else:
            products_manual = result_manual.get('products', [])
            stats_manual = result_manual.get('extraction_stats', {})
            
            print(f"‚úÖ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(products_manual)}")
            print(f"üéØ –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {stats_manual.get('extraction_method', 'N/A')}")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats_manual.get('success_rate', 0):.1%}")
            
            # Show examples
            print(f"\nüéØ –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π):")
            for i, product in enumerate(products_manual[:5]):
                print(f"{i+1}. {product.get('original_name', 'N/A')}")
                print(f"   üí∞ –¶–µ–Ω–∞: {product.get('price', 0)}")
                print(f"   üì¶ –ï–¥–∏–Ω–∏—Ü–∞: {product.get('unit', 'N/A')}")
                print()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
    
    # Comparison
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 40)
    
    try:
        if 'products_ai' in locals() and 'products_manual' in locals():
            print(f"ü§ñ AI –ø–∞—Ä—Å–∏–Ω–≥: {len(products_ai)} —Ç–æ–≤–∞—Ä–æ–≤")
            print(f"üîß –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π: {len(products_manual)} —Ç–æ–≤–∞—Ä–æ–≤")
            print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {((len(products_ai) - len(products_manual)) / max(len(products_manual), 1) * 100):+.1f}%")
            
            # Quality comparison - check if AI found more meaningful product names
            if products_ai and products_manual:
                ai_avg_name_length = sum(len(p.get('original_name', '')) for p in products_ai) / len(products_ai)
                manual_avg_name_length = sum(len(p.get('original_name', '')) for p in products_manual) / len(products_manual)
                
                print(f"üìù –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–π:")
                print(f"   ü§ñ AI: {ai_avg_name_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üîß –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π: {manual_avg_name_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    except:
        pass

def main():
    """Main function"""
    test_ai_pdf_parsing()

if __name__ == "__main__":
    main()