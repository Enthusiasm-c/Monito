"""
=============================================================================
MONITO REPORT GENERATOR
=============================================================================
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (PDF, Excel)
–í–µ—Ä—Å–∏—è: 4.2
=============================================================================
"""

import os
import io
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Union, BinaryIO
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor, toColor
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.chart import BarChart, PieChart, LineChart, Reference
from openpyxl.utils.dataframe import dataframe_to_rows
import tempfile
import base64
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
plt.switch_backend('Agg')

class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Monito Unified System"""
    
    def __init__(self, output_dir: str = "reports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ Monito
        self.colors = {
            'primary': HexColor('#4A90E2'),
            'secondary': HexColor('#7B68EE'),
            'success': HexColor('#4CAF50'),
            'warning': HexColor('#FF9800'),
            'error': HexColor('#F44336'),
            'light_gray': HexColor('#F5F5F5'),
            'dark_gray': HexColor('#333333')
        }
        
    def _setup_custom_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è PDF"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        self.styles.add(ParagraphStyle(
            name='ReportTitle',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            textColor=HexColor('#4A90E2'),
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.styles.add(ParagraphStyle(
            name='ReportSubtitle',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            textColor=HexColor('#666666'),
            alignment=TA_CENTER
        ))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading3'],
            fontSize=16,
            spaceBefore=20,
            spaceAfter=12,
            textColor=HexColor('#333333'),
            fontName='Helvetica-Bold'
        ))
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.styles.add(ParagraphStyle(
            name='ReportBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            textColor=HexColor('#333333')
        ))

    def generate_price_analysis_report(self, data: Dict[str, Any], format: str = 'pdf') -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ü–µ–Ω
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            format: –§–æ—Ä–º–∞—Ç ('pdf' –∏–ª–∏ 'excel')
            
        Returns:
            Bytes –æ—Ç—á–µ—Ç–∞
        """
        
        if format.lower() == 'pdf':
            return self._generate_price_analysis_pdf(data)
        elif format.lower() == 'excel':
            return self._generate_price_analysis_excel(data)
        else:
            raise ValueError(f"Unsupported format: {format}")
    
    def _generate_price_analysis_pdf(self, data: Dict[str, Any]) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ü–µ–Ω"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=1*inch)
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        title = Paragraph("üèùÔ∏è Monito - –ê–Ω–∞–ª–∏–∑ –¶–µ–Ω –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", self.styles['ReportTitle'])
        story.append(title)
        
        subtitle = Paragraph(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}", 
                            self.styles['ReportSubtitle'])
        story.append(subtitle)
        story.append(Spacer(1, 20))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        story.append(Paragraph("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", self.styles['SectionHeader']))
        
        metrics_data = [
            ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ'],
            ['–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ', f"{data.get('total_products', 0):,}", '+5.2%'],
            ['–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', str(data.get('total_suppliers', 0)), '+2'],
            ['–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è', f"{data.get('avg_savings', 0):.1f}%", '+1.3%'],
            ['–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è', f"{data.get('updates_today', 0):,}", '+12.5%']
        ]
        
        metrics_table = Table(metrics_data, colWidths=[3*inch, 1.5*inch, 1*inch])
        metrics_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary']),
            ('TEXTCOLOR', (0, 0), (-1, 0), 'white'),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), self.colors['light_gray']),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['dark_gray'])
        ]))
        
        story.append(metrics_table)
        story.append(Spacer(1, 20))
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
        story.append(Paragraph("üí∞ –¢–æ–ø –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≠–∫–æ–Ω–æ–º–∏–∏", self.styles['SectionHeader']))
        
        categories_data = [
            ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è (IDR)', '–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è (%)', '–¢–æ–≤–∞—Ä–æ–≤'],
            ['–ù–∞–ø–∏—Ç–∫–∏', '2,400,000', '15.2%', '45'],
            ['–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '1,800,000', '12.8%', '32'], 
            ['–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', '1,200,000', '18.5%', '28'],
            ['–ö–æ—Å–º–µ—Ç–∏–∫–∞', '900,000', '14.1%', '22'],
            ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '600,000', '11.3%', '15']
        ]
        
        categories_table = Table(categories_data, colWidths=[2*inch, 1.3*inch, 1.2*inch, 0.8*inch])
        categories_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['success']),
            ('TEXTCOLOR', (0, 0), (-1, 0), 'white'),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), 'white'),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['dark_gray'])
        ]))
        
        story.append(categories_table)
        story.append(Spacer(1, 20))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
        chart_image = self._create_price_trend_chart(data)
        if chart_image:
            story.append(Paragraph("üìà –¢—Ä–µ–Ω–¥ –¶–µ–Ω (30 –¥–Ω–µ–π)", self.styles['SectionHeader']))
            story.append(chart_image)
            story.append(Spacer(1, 20))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        story.append(Paragraph("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", self.styles['SectionHeader']))
        
        recommendations = [
            "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫—É–ø–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' (—ç–∫–æ–Ω–æ–º–∏—è 18.5%)",
            "‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' (—ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–ª—å–∫–æ 11.3%)", 
            "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å —Ç–æ–ø-–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏",
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é"
        ]
        
        for rec in recommendations:
            story.append(Paragraph(rec, self.styles['ReportBody']))
        
        story.append(Spacer(1, 30))
        
        # –ü–æ–¥–ø–∏—Å—å
        footer = Paragraph(
            "–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Monito Unified v4.2<br/>"
            "üèùÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ—Å—Ç—Ä–æ–≤–∞ –ë–∞–ª–∏", 
            self.styles['ReportSubtitle']
        )
        story.append(footer)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _generate_price_analysis_excel(self, data: Dict[str, Any]) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ü–µ–Ω"""
        
        workbook = Workbook()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç
        workbook.remove(workbook.active)
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
        summary_ws = workbook.create_sheet("–°–≤–æ–¥–∫–∞")
        categories_ws = workbook.create_sheet("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        trends_ws = workbook.create_sheet("–¢—Ä–µ–Ω–¥—ã")
        
        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="4A90E2", end_color="4A90E2", fill_type="solid")
        border = Border(
            left=Side(border_style="thin"),
            right=Side(border_style="thin"),
            top=Side(border_style="thin"),
            bottom=Side(border_style="thin")
        )
        
        # === –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞" ===
        summary_ws['A1'] = "üèùÔ∏è Monito - –ê–Ω–∞–ª–∏–∑ –¶–µ–Ω –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
        summary_ws['A1'].font = Font(size=16, bold=True, color="4A90E2")
        summary_ws.merge_cells('A1:D1')
        
        summary_ws['A2'] = f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        summary_ws.merge_cells('A2:D2')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        summary_ws['A4'] = "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"
        summary_ws['B4'] = "–ó–Ω–∞—á–µ–Ω–∏–µ"
        summary_ws['C4'] = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"
        
        for col in ['A4', 'B4', 'C4']:
            summary_ws[col].font = header_font
            summary_ws[col].fill = header_fill
            summary_ws[col].border = border
        
        metrics = [
            ("–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ", f"{data.get('total_products', 0):,}", "+5.2%"),
            ("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", str(data.get('total_suppliers', 0)), "+2"),
            ("–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è", f"{data.get('avg_savings', 0):.1f}%", "+1.3%"),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è", f"{data.get('updates_today', 0):,}", "+12.5%")
        ]
        
        for i, (metric, value, change) in enumerate(metrics, 5):
            summary_ws[f'A{i}'] = metric
            summary_ws[f'B{i}'] = value
            summary_ws[f'C{i}'] = change
            
            for col in ['A', 'B', 'C']:
                summary_ws[f'{col}{i}'].border = border
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in summary_ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            summary_ws.column_dimensions[column_letter].width = adjusted_width
        
        # === –õ–∏—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" ===
        categories_data = [
            ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è (IDR)", "–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è (%)", "–¢–æ–≤–∞—Ä–æ–≤"],
            ["–ù–∞–ø–∏—Ç–∫–∏", 2400000, 15.2, 45],
            ["–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", 1800000, 12.8, 32],
            ["–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", 1200000, 18.5, 28],
            ["–ö–æ—Å–º–µ—Ç–∏–∫–∞", 900000, 14.1, 22],
            ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", 600000, 11.3, 15]
        ]
        
        for row_num, row_data in enumerate(categories_data, 1):
            for col_num, cell_value in enumerate(row_data, 1):
                cell = categories_ws.cell(row=row_num, column=col_num, value=cell_value)
                cell.border = border
                
                if row_num == 1:  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    cell.font = header_font
                    cell.fill = header_fill
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart = BarChart()
        chart.title = "–≠–∫–æ–Ω–æ–º–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        chart.y_axis.title = "–≠–∫–æ–Ω–æ–º–∏—è (IDR)"
        chart.x_axis.title = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        data_ref = Reference(categories_ws, min_col=2, min_row=1, max_row=6, max_col=2)
        cats_ref = Reference(categories_ws, min_col=1, min_row=2, max_row=6)
        chart.add_data(data_ref, titles_from_data=True)
        chart.set_categories(cats_ref)
        
        categories_ws.add_chart(chart, "F2")
        
        # === –õ–∏—Å—Ç "–¢—Ä–µ–Ω–¥—ã" ===
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤
        trends_data = self._generate_trend_data()
        
        trends_df = pd.DataFrame(trends_data)
        for r in dataframe_to_rows(trends_df, index=False, header=True):
            trends_ws.append(r)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in trends_ws[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.border = border
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        line_chart = LineChart()
        line_chart.title = "–¢—Ä–µ–Ω–¥ —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω"
        line_chart.y_axis.title = "–¶–µ–Ω–∞ (IDR)"
        line_chart.x_axis.title = "–î–∞—Ç–∞"
        
        data_ref = Reference(trends_ws, min_col=2, min_row=1, max_row=len(trends_data)+1, max_col=4)
        line_chart.add_data(data_ref, titles_from_data=True)
        
        trends_ws.add_chart(line_chart, "F2")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        workbook.save(buffer)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _create_price_trend_chart(self, data: Dict[str, Any]) -> Optional[Image]:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ —Ü–µ–Ω –¥–ª—è PDF"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            dates = pd.date_range(start=datetime.now() - timedelta(days=30), 
                                 end=datetime.now(), freq='D')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            np_random = pd.np.random
            np_random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            
            best_prices = 13000 + np_random.normal(0, 500, len(dates)).cumsum() * 0.1
            avg_prices = best_prices * 1.15 + np_random.normal(0, 200, len(dates))
            worst_prices = best_prices * 1.35 + np_random.normal(0, 300, len(dates))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
            plt.style.use('default')
            fig, ax = plt.subplots(figsize=(8, 5))
            
            ax.plot(dates, best_prices, label='–õ—É—á—à–∞—è —Ü–µ–Ω–∞', color='#4CAF50', linewidth=2)
            ax.plot(dates, avg_prices, label='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', color='#2196F3', linewidth=2)
            ax.plot(dates, worst_prices, label='–•—É–¥—à–∞—è —Ü–µ–Ω–∞', color='#F44336', linewidth=2)
            
            ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π', fontsize=14, fontweight='bold')
            ax.set_xlabel('–î–∞—Ç–∞')
            ax.set_ylabel('–¶–µ–Ω–∞ (IDR)')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π
            ax.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
            plt.savefig(temp_file.name, dpi=150, bbox_inches='tight')
            plt.close()
            
            # –°–æ–∑–¥–∞–µ–º Image –æ–±—ä–µ–∫—Ç –¥–ª—è ReportLab
            image = Image(temp_file.name, width=6*inch, height=3.75*inch)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            
            return image
            
        except Exception as e:
            print(f"Error creating chart: {e}")
            return None
    
    def _generate_trend_data(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è Excel"""
        
        dates = pd.date_range(start=datetime.now() - timedelta(days=30), 
                             end=datetime.now(), freq='D')
        
        data = []
        for i, date in enumerate(dates):
            data.append({
                '–î–∞—Ç–∞': date.strftime('%Y-%m-%d'),
                '–õ—É—á—à–∞—è —Ü–µ–Ω–∞': 13000 + i * 10 + (i % 5) * 50,
                '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': 14950 + i * 15 + (i % 7) * 75,
                '–•—É–¥—à–∞—è —Ü–µ–Ω–∞': 17500 + i * 20 + (i % 3) * 100
            })
        
        return data
    
    def generate_supplier_performance_report(self, supplier_data: List[Dict[str, Any]], 
                                           format: str = 'pdf') -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
        
        if format.lower() == 'pdf':
            return self._generate_supplier_pdf(supplier_data)
        elif format.lower() == 'excel':
            return self._generate_supplier_excel(supplier_data)
        else:
            raise ValueError(f"Unsupported format: {format}")
    
    def _generate_supplier_pdf(self, supplier_data: List[Dict[str, Any]]) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=1*inch)
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Paragraph("üè¨ Monito - –û—Ç—á–µ—Ç –ø–æ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞–º", self.styles['ReportTitle'])
        story.append(title)
        
        subtitle = Paragraph(f"–ü–µ—Ä–∏–æ–¥: {datetime.now().strftime('%d.%m.%Y')}", 
                            self.styles['ReportSubtitle'])
        story.append(subtitle)
        story.append(Spacer(1, 20))
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        story.append(Paragraph("üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", self.styles['SectionHeader']))
        
        table_data = [['–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–¢–æ–≤–∞—Ä–æ–≤', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å']]
        
        for supplier in supplier_data:
            table_data.append([
                supplier.get('name', 'N/A'),
                str(supplier.get('product_count', 0)),
                f"{supplier.get('avg_price', 0):,.0f} IDR",
                f"{supplier.get('rating', 0):.1f}/5.0",
                f"{supplier.get('reliability', 0):.0f}%"
            ])
        
        table = Table(table_data, colWidths=[2*inch, 1*inch, 1.2*inch, 1*inch, 1*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['secondary']),
            ('TEXTCOLOR', (0, 0), (-1, 0), 'white'),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), 'white'),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['dark_gray'])
        ]))
        
        story.append(table)
        story.append(PageBreak())
        
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _generate_supplier_excel(self, supplier_data: List[Dict[str, Any]]) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º"""
        
        workbook = Workbook()
        ws = workbook.active
        ws.title = "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–¢–æ–≤–∞—Ä–æ–≤', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (IDR)', '–†–µ–π—Ç–∏–Ω–≥', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (%)']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="7B68EE", end_color="7B68EE", fill_type="solid")
        
        # –î–∞–Ω–Ω—ã–µ
        for row, supplier in enumerate(supplier_data, 2):
            ws.cell(row=row, column=1, value=supplier.get('name', 'N/A'))
            ws.cell(row=row, column=2, value=supplier.get('product_count', 0))
            ws.cell(row=row, column=3, value=supplier.get('avg_price', 0))
            ws.cell(row=row, column=4, value=supplier.get('rating', 0))
            ws.cell(row=row, column=5, value=supplier.get('reliability', 0))
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        buffer = io.BytesIO()
        workbook.save(buffer)
        buffer.seek(0)
        return buffer.getvalue()
    
    def save_report(self, report_data: bytes, filename: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        
        filepath = self.output_dir / filename
        
        with open(filepath, 'wb') as f:
            f.write(report_data)
        
        return str(filepath) 