#!/usr/bin/env python3
"""
–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
"""

import os
import sys
import asyncio
from pathlib import Path

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.universal_excel_parser import UniversalExcelParser
from modules.pdf_parser import PDFParser
from modules.batch_chatgpt_processor import BatchChatGPTProcessor
from modules.google_sheets_manager import GoogleSheetsManager
from dotenv import load_dotenv

load_dotenv()

async def process_file_directly(file_path: str):
    """–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    print("üìÅ –ü–†–Ø–ú–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê")
    print("=" * 40)
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    
    print(f"üìÑ –§–∞–π–ª: {file_path}")
    
    # 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...")
    file_extension = Path(file_path).suffix.lower()
    
    if file_extension == '.pdf':
        print("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF —Ñ–∞–π–ª (—Å AI-–∞–Ω–∞–ª–∏–∑–æ–º)...")
        parser = PDFParser()
        extracted_data = parser.extract_products_from_pdf(file_path, max_products=1000, use_ai=True)
    elif file_extension in ['.xlsx', '.xls']:
        print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Excel —Ñ–∞–π–ª (—Å AI-–∞–Ω–∞–ª–∏–∑–æ–º)...")
        parser = UniversalExcelParser()
        extracted_data = parser.extract_products_universal(file_path, max_products=1000, use_ai=True)
    else:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
        return None
    
    if 'error' in extracted_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {extracted_data['error']}")
        return None
    
    products = extracted_data.get('products', [])
    stats = extracted_data.get('extraction_stats', {})
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1%}")
    print(f"üîß –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {stats.get('extraction_method', 'N/A')}")
    print(f"ü§ñ AI Enhanced: {stats.get('ai_enhanced', False)}")
    if stats.get('used_sheet'):
        print(f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏—Å—Ç: {stats.get('used_sheet', 'N/A')}")
    
    if not products:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    print(f"\nüì¶ –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
    for i, product in enumerate(products[:3]):
        print(f"{i+1}. {product['original_name']} | {product['price']} | {product['unit']}")
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key:
        print(f"\nü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ GPT-4.1...")
        
        processor = BatchChatGPTProcessor(openai_key)
        supplier_name = extracted_data.get('supplier', {}).get('name', 'Unknown')
        
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ
            demo_products = products[:20] if len(products) > 20 else products
            
            result = await processor.process_all_products(demo_products, supplier_name)
            
            if 'error' not in result:
                processed_products = result.get('products', [])
                processing_stats = result.get('processing_stats', {})
                
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(processed_products)}")
                print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {processing_stats.get('success_rate', 0):.1%}")
                print(f"üéØ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {processing_stats.get('estimated_tokens', 0)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                print(f"\nüéØ –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
                for i, product in enumerate(processed_products[:3]):
                    print(f"{i+1}. –ò–°–•–û–î–ù–û–ï: {product.get('original_name', '')[:50]}...")
                    print(f"   –ë–†–ï–ù–î: {product.get('brand', 'unknown')}")
                    print(f"   –°–¢–ê–ù–î–ê–†–¢: {product.get('standardized_name', '')[:50]}...")
                    print(f"   –†–ê–ó–ú–ï–†: {product.get('size', 'unknown')} {product.get('unit', 'pcs')}")
                    print(f"   –¶–ï–ù–ê: {product.get('price', 0)} {product.get('currency', 'USD')}")
                    print(f"   –ö–ê–¢–ï–ì–û–†–ò–Ø: {product.get('category', 'general')}")
                    print()
                
                # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
                gm = GoogleSheetsManager()
                if gm.is_connected():
                    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets...")
                    
                    sheets_result = gm.update_master_table(result)
                    
                    if 'error' not in sheets_result:
                        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets:")
                        print(f"  ‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {sheets_result.get('new_products', 0)}")
                        print(f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {sheets_result.get('updated_prices', 0)}")
                        print(f"üîó –¢–∞–±–ª–∏—Ü–∞: {gm.get_sheet_url()}")
                        
                        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        gm.create_supplier_summary(supplier_name, processed_products)
                        print(f"üìã –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: Supplier_{supplier_name}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {sheets_result['error']}")
                else:
                    print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ ChatGPT: {result['error']}")
                return extracted_data
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT: {e}")
            return extracted_data
    else:
        print("‚ö†Ô∏è OpenAI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ChatGPT –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return extracted_data

def interactive_file_upload():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    print("üìÅ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê")
    print("=" * 40)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:")
        print("1. –í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        print("2. –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏ data/temp")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == '1':
            file_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É: ").strip()
            if file_path:
                return file_path
        
        elif choice == '2':
            temp_dir = Path("data/temp")
            if temp_dir.exists():
                excel_files = list(temp_dir.glob("*.xlsx")) + list(temp_dir.glob("*.xls"))
                
                if excel_files:
                    print("\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                    for i, file_path in enumerate(excel_files, 1):
                        print(f"{i}. {file_path.name}")
                    
                    try:
                        idx = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1-{len(excel_files)}): ")) - 1
                        if 0 <= idx < len(excel_files):
                            return str(excel_files[idx])
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                else:
                    print("üì≠ –ù–µ—Ç Excel —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ data/temp")
            else:
                print("üì≠ –ü–∞–ø–∫–∞ data/temp –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        elif choice == '3':
            return None
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ü–†–Ø–ú–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    file_path = interactive_file_upload()
    
    if file_path:
        result = await process_file_directly(file_path)
        
        if result:
            print(f"\n‚úÖ –§–ê–ô–õ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            create_reference = input("\n‚ùì –°–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞? (y/n): ").strip().lower()
            
            if create_reference == 'y':
                print(f"\nüìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                print(f"1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 create_training_example.py")
                print(f"2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç 2 (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON)")
                print(f"3. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                print(f"4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª: {file_path}")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
    else:
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    asyncio.run(main())