#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π Telegram –±–æ—Ç –¥–ª—è Price List Analyzer
–° Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (–±–µ–∑ ChatGPT –≤—Ä–µ–º–µ–Ω–Ω–æ)
"""

import os
import sys
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from telegram import Update, Document
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.google_sheets_manager import GoogleSheetsManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class WorkingTelegramBot:
    """–†–∞–±–æ—á–∏–π Telegram –±–æ—Ç —Å Google Sheets"""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.google_sheets = GoogleSheetsManager()
        self.temp_dir = "data/temp"
        os.makedirs(self.temp_dir, exist_ok=True)
        
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Price List Analyzer!*

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é Google Sheets —Ç–∞–±–ª–∏—Ü—É

*–ö–æ–º–∞–Ω–¥—ã:*
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
/sheet - —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞! üìä
        """
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞*

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ Excel: .xlsx, .xls (–¥–æ 20 –ú–ë)

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:*
‚Ä¢ –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Å —Ü–µ–Ω–∞–º–∏
‚Ä¢ –¶–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

*–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:*
1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω
4. –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü—ã
5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π

*Google Sheets —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:*
‚Ä¢ Master Table - —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

*–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:*
"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        sheets_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if self.google_sheets.is_connected() else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
        help_text += f"‚Ä¢ Google Sheets: {sheets_status}\n"
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        try:
            if self.google_sheets.is_connected():
                stats = self.google_sheets.get_stats()
                
                stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Google Sheets*

*–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('total_products', 0)}
‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {stats.get('total_suppliers', 0)}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(stats.get('categories', []))}

*–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏:*
"""
                suppliers = stats.get('suppliers', [])
                if suppliers:
                    for supplier in suppliers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                        stats_text += f"‚Ä¢ {supplier}\n"
                    if len(suppliers) > 10:
                        stats_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(suppliers) - 10}\n"
                else:
                    stats_text += "‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
                
                stats_text += f"\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({stats.get('sheet_url', '')})"
                
            else:
                stats_text = "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            
            await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def sheet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /sheet - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É"""
        if self.google_sheets.is_connected():
            url = self.google_sheets.get_sheet_url()
            await update.message.reply_text(
                f"üìä [–û—Ç–∫—Ä—ã—Ç—å Google Sheets —Ç–∞–±–ª–∏—Ü—É]({url})", 
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        document: Document = update.message.document
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        validation_result = self._validate_file(document)
        if not validation_result['valid']:
            await update.message.reply_text(f"‚ùå {validation_result['error']}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
        if not self.google_sheets.is_connected():
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        processing_message = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")
        
        try:
            start_time = datetime.now()
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await context.bot.get_file(document.file_id)
            file_path = os.path.join(self.temp_dir, document.file_name)
            await file.download_to_drive(file_path)
            
            logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {document.file_name}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text="üìÑ –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞..."
            )
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
            extracted_data = await self._extract_excel_data(file_path, document.file_name)
            
            if not extracted_data.get('products'):
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –≤ —Ñ–∞–π–ª–µ\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å:\n‚Ä¢ –°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤\n‚Ä¢ –°—Ç–æ–ª–±–µ—Ü —Å —Ü–µ–Ω–∞–º–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
                )
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text="üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets..."
            )
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            standardized_data = self._standardize_data(extracted_data)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
            sheets_result = self.google_sheets.update_master_table(standardized_data)
            
            if 'error' in sheets_result:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets:\n{sheets_result['error']}"
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier_name = standardized_data.get('supplier', {}).get('name', 'Unknown')
            self.google_sheets.create_supplier_summary(supplier_name, standardized_data.get('products', []))
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = self._generate_success_report(standardized_data, sheets_result, processing_time)
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text=report,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            
            error_text = f"""‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:
`{str(e)}`

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞
‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –µ—Å—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text=error_text,
                parse_mode=ParseMode.MARKDOWN
            )
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except:
                pass
    
    def _validate_file(self, document: Document) -> dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if not document.file_name.lower().endswith(('.xlsx', '.xls')):
            return {
                'valid': False,
                'error': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        max_size = 20 * 1024 * 1024  # 20 MB
        if document.file_size > max_size:
            return {
                'valid': False,
                'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë'
            }
        
        return {'valid': True}
    
    async def _extract_excel_data(self, file_path: str, file_name: str) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        import pandas as pd
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        supplier_name = os.path.splitext(file_name)[0]
        
        # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        df = pd.read_excel(file_path)
        
        logger.info(f"Excel —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
        product_col = None
        price_col = None
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for col in df.columns:
            col_lower = str(col).lower()
            
            # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            if any(keyword in col_lower for keyword in ['product', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'item', 'name', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']):
                product_col = col
                
            # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏
            if any(keyword in col_lower for keyword in ['price', '—Ü–µ–Ω–∞', 'cost', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä—É–±', 'usd', '$']):
                price_col = col
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã - —Ç–æ–≤–∞—Ä—ã: {product_col}, —Ü–µ–Ω—ã: {price_col}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        products = []
        for idx, row in df.iterrows():
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                if product_col:
                    name = str(row[product_col]).strip()
                else:
                    name = str(row.iloc[0]).strip()  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                
                # –¶–µ–Ω–∞
                if price_col:
                    price_str = str(row[price_col])
                else:
                    # –ò—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
                    price_str = ""
                    for col_val in row:
                        val_str = str(col_val)
                        if any(char.isdigit() for char in val_str):
                            price_str = val_str
                            break
                
                # –û—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã –æ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                import re
                price_clean = re.sub(r'[^\d.,]', '', price_str)
                if price_clean:
                    price = float(price_clean.replace(',', '.'))
                else:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                if len(name) > 2 and price > 0 and price < 1000000:
                    products.append({
                        'original_name': name,
                        'price': price,
                        'unit': 'pcs',
                        'row_index': idx
                    })
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
                continue
        
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        return {
            'file_type': 'excel',
            'supplier': {'name': supplier_name},
            'products': products,
            'total_rows': len(df)
        }
    
    def _standardize_data(self, data: dict) -> dict:
        """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        products = []
        for product in data.get('products', []):
            products.append({
                'original_name': product.get('original_name', ''),
                'standardized_name': product.get('original_name', ''),  # –ü–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                'price': product.get('price', 0),
                'unit': product.get('unit', 'pcs'),
                'category': 'general',
                'confidence': 0.8
            })
        
        return {
            'supplier': {
                'name': data.get('supplier', {}).get('name', 'Unknown'),
                'contact': '',
                'confidence': 0.9
            },
            'products': products,
            'data_quality': {
                'extraction_confidence': 0.8,
                'source_clarity': 'high',
                'potential_errors': []
            }
        }
    
    def _generate_success_report(self, data: dict, sheets_result: dict, processing_time: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        supplier_name = data.get('supplier', {}).get('name', 'Unknown')
        products_count = len(data.get('products', []))
        
        report = f"""
‚úÖ *–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*

*–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:*
‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫

*–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets:*
‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {sheets_result.get('new_products', 0)}
‚Ä¢ –¶–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {sheets_result.get('updated_prices', 0)}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {sheets_result.get('processed_products', 0)}

üîó [–û—Ç–∫—Ä—ã—Ç—å Google Sheets —Ç–∞–±–ª–∏—Ü—É]({self.google_sheets.get_sheet_url()})

üìä –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ–±–ª–∞—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É!

*–ß—Ç–æ –¥–∞–ª—å—à–µ:*
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Å—Ç "Master Table" –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ª–∏—Å—Ç "Supplier_{supplier_name.replace(' ', '_')}" –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        
        return report
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls) —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º\n\n"
            "*–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:*\n"
            "‚Ä¢ –°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –°—Ç–æ–ª–±–µ—Ü —Å —Ü–µ–Ω–∞–º–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏",
            parse_mode=ParseMode.MARKDOWN
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if self.google_sheets.is_connected():
            logger.info("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω")
            sheet_url = self.google_sheets.get_sheet_url()
            print(f"üìä Google Sheets: {sheet_url}")
        else:
            logger.warning("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("sheet", self.sheet_command))
        application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\n" + "="*50)
        print("ü§ñ TELEGRAM BOT –ó–ê–ü–£–©–ï–ù!")
        print("="*50)
        print("üì± –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        print("üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üîó –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ Google Sheets")
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("="*50)
        
        application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        bot = WorkingTelegramBot()
        bot.run()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("‚Ä¢ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        print("‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets")