#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI –ø–∞—Ä—Å–µ—Ä–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Å—Ç—Ä–æ–∫
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Setup paths
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

# Enhanced logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

from modules.universal_excel_parser import UniversalExcelParser

def test_improved_ai():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üöÄ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û AI –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    # Check for API key
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # Test file
    test_file = "/Users/denisdomashenko/price_list_analyzer/DOC-20250428-WA0004..xlsx"
    
    if not os.path.exists(test_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {os.path.basename(test_file)}")
    
    # Create parser
    parser = UniversalExcelParser()
    
    print(f"\nü§ñ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û AI (100 —Å—Ç—Ä–æ–∫ vs 20)")
    print("-" * 50)
    
    try:
        result = parser.extract_products_universal(test_file, max_products=200, use_ai=True)
        
        if 'error' in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            products = result.get('products', [])
            stats = result.get('extraction_stats', {})
            
            print(f"‚úÖ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(products)}")
            print(f"   üìä –ú–µ—Ç–æ–¥: {stats.get('extraction_method', 'N/A')}")
            print(f"   ü§ñ AI Enhanced: {stats.get('ai_enhanced', False)}")
            print(f"   üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.get('total_rows', 0)}")
            print(f"   üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ: {len(products)}/{stats.get('total_rows', 1)*100:.1f}% —Å—Ç—Ä–æ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π
            print(f"\nüéØ –ü–†–ò–ú–ï–†–´ –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –¢–û–í–ê–†–û–í:")
            for i, product in enumerate(products[:10]):
                print(f"{i+1}. {product.get('original_name', 'N/A')} | {product.get('price', 0)} | {product.get('unit', 'N/A')}")
                if 'brand' in product:
                    print(f"   üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product.get('brand')}")
                if 'size' in product:
                    print(f"   üìè –†–∞–∑–º–µ—Ä: {product.get('size')}")
                print()
            
            if len(products) > 10:
                print(f"   ... –∏ –µ—â–µ {len(products) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            expected_improvement = len(products) - 8  # –ë—ã–ª–æ 8 —Ç–æ–≤–∞—Ä–æ–≤
            print(f"\nüìà –£–õ–£–ß–®–ï–ù–ò–ï:")
            print(f"   üî∫ –ë—ã–ª–æ —Ç–æ–≤–∞—Ä–æ–≤: 8")
            print(f"   üî∫ –°—Ç–∞–ª–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            print(f"   üöÄ –ü—Ä–∏—Ä–æ—Å—Ç: +{expected_improvement} —Ç–æ–≤–∞—Ä–æ–≤ ({expected_improvement/8*100:.0f}% —É–ª—É—á—à–µ–Ω–∏–µ)")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Main function"""
    test_improved_ai()

if __name__ == "__main__":
    main()