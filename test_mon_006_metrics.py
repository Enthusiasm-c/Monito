#!/usr/bin/env python3
"""
–¢–µ—Å—Ç MON-006: Metrics & Tracing —Å–∏—Å—Ç–µ–º–∞
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
- Prometheus –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- Structured logging —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º  
- Performance tracing –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
- Real-time monitoring –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import sys
import os
import time
import tempfile
import json
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_metrics_collector_architecture():
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã MetricsCollectorV2 (DoD 6.1)"""
    print("\nüìä –¢–ï–°–¢ –ê–†–•–ò–¢–ï–ö–¢–£–†–´ METRICS COLLECTOR (DoD 6.1)")
    print("=" * 55)
    
    try:
        from modules.metrics_collector_v2 import MetricsCollectorV2, MetricsStats, OperationTrace
        
        # –°–æ–∑–¥–∞–µ–º collector –±–µ–∑ Prometheus —Å–µ—Ä–≤–µ—Ä–∞
        collector = MetricsCollectorV2(enable_prometheus=False, metrics_port=None)
        
        print(f"‚úÖ MetricsCollectorV2 —Å–æ–∑–¥–∞–Ω")
        print(f"   Prometheus: {'‚úÖ' if collector.prometheus_available else '‚ùå'}")
        print(f"   Structlog: {'‚úÖ' if collector.structlog_available else '‚ùå'}")
        print(f"   psutil: {'‚úÖ' if collector.psutil_available else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = [
            'start_operation_trace',
            'end_operation_trace',
            'trace_operation',
            'measure_performance',
            'record_data_quality',
            'record_cache_operation',
            'record_data_processed',
            'get_metrics_summary',
            'export_traces_to_file',
            'clear_metrics'
        ]
        
        for method in required_methods:
            if hasattr(collector, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dataclass'—ã
        stats = MetricsStats()
        stats.total_operations = 100
        print(f"‚úÖ MetricsStats —Ä–∞–±–æ—Ç–∞–µ—Ç: {stats.total_operations} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        trace = OperationTrace(
            operation_id="test_op",
            operation_name="test_operation",
            start_time=time.time()
        )
        print(f"‚úÖ OperationTrace —Ä–∞–±–æ—Ç–∞–µ—Ç: {trace.operation_name}")
        
        print(f"\nüéØ DoD MON-006.1 PASSED: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
        return False

def test_operation_tracing():
    """–¢–µ—Å—Ç —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (DoD 6.2)"""
    print("\nüîç –¢–ï–°–¢ OPERATION TRACING (DoD 6.2)")
    print("=" * 45)
    
    try:
        from modules.metrics_collector_v2 import MetricsCollectorV2
        
        collector = MetricsCollectorV2(enable_prometheus=False, metrics_port=None)
        
        # –¢–µ—Å—Ç 1: –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π—Å–∞–º–∏
        operation_id = collector.start_operation_trace(
            "test_excel_parsing", 
            "pre_processor",
            {"file_name": "test.xlsx", "size_mb": 2.5}
        )
        
        print(f"‚úÖ –ù–∞—á–∞—Ç —Ç—Ä–µ–π—Å: {operation_id}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        time.sleep(0.1)
        
        collector.end_operation_trace(
            operation_id, 
            "success",
            {"rows_processed": 150, "processing_time_ms": 100}
        )
        
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ç—Ä–µ–π—Å: {operation_id}")
        
        # –¢–µ—Å—Ç 2: Context manager
        with collector.trace_operation("test_validation", "row_validator") as op_id:
            print(f"‚úÖ Context manager —Ç—Ä–µ–π—Å: {op_id}")
            time.sleep(0.05)
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        summary = collector.get_metrics_summary()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['performance_stats']['total_operations']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {summary['performance_stats']['successful_operations']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {summary['performance_stats']['average_processing_time_ms']:.1f}ms")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –æ–ø–µ—Ä–∞—Ü–∏–∏
        if summary['performance_stats']['total_operations'] >= 2:
            print(f"\nüéØ DoD MON-006.2 PASSED: –¢—Ä–µ–π—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-006.2 PARTIAL: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞: {e}")
        return False

def test_performance_measurement():
    """–¢–µ—Å—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (DoD 6.3)"""
    print("\n‚ö° –¢–ï–°–¢ PERFORMANCE MEASUREMENT (DoD 6.3)")
    print("=" * 50)
    
    try:
        from modules.metrics_collector_v2 import MetricsCollectorV2
        
        collector = MetricsCollectorV2(enable_prometheus=False, metrics_port=None)
        
        # –¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        @collector.measure_performance(operation_name="test_function", component="test_module")
        def sample_function(n: int) -> List[int]:
            """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
            time.sleep(0.01)  # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            return list(range(n))
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = sample_function(10)
        
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
        summary = collector.get_metrics_summary()
        
        total_ops = summary['performance_stats']['total_operations']
        avg_time = summary['performance_stats']['average_processing_time_ms']
        
        print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   –û–ø–µ—Ä–∞—Ü–∏–π: {total_ops}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}ms")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∞
        if total_ops > 0 and avg_time > 0:
            print(f"\nüéØ DoD MON-006.3 PASSED: Performance measurement —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-006.3 FAILED: –ò–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è performance measurement: {e}")
        return False

def test_data_quality_metrics():
    """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (DoD 6.4)"""
    print("\nüìà –¢–ï–°–¢ DATA QUALITY METRICS (DoD 6.4)")
    print("=" * 45)
    
    try:
        from modules.metrics_collector_v2 import MetricsCollectorV2
        
        collector = MetricsCollectorV2(enable_prometheus=False, metrics_port=None)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        collector.record_data_quality(
            "row_validator", 
            0.85, 
            {"valid_rows": 85, "total_rows": 100}
        )
        
        collector.record_data_quality(
            "excel_parser", 
            0.92,
            {"clean_data": True, "format": "xlsx"}
        )
        
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        collector.record_data_processed("pre_processor", "rows", 150, 1024*50)
        collector.record_data_processed("llm_processor", "products", 45, 1024*20)
        
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
        collector.record_cache_operation("redis_cache", "get", "hit", {"key": "product_123"})
        collector.record_cache_operation("redis_cache", "get", "miss", {"key": "product_456"})
        
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        summary = collector.get_metrics_summary()
        
        quality_scores = summary['custom_metrics'].get('quality_scores', {})
        
        print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
        for component, data in quality_scores.items():
            print(f"   {component}: {data['score']:.3f}")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if len(quality_scores) >= 2:
            print(f"\nüéØ DoD MON-006.4 PASSED: Data quality metrics —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-006.4 FAILED: –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è data quality metrics: {e}")
        return False

def test_structured_logging():
    """–¢–µ—Å—Ç structured logging (DoD 6.5)"""
    print("\nüìù –¢–ï–°–¢ STRUCTURED LOGGING (DoD 6.5)")
    print("=" * 45)
    
    try:
        from modules.metrics_collector_v2 import MetricsCollectorV2
        
        collector = MetricsCollectorV2(enable_prometheus=False, metrics_port=None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ structured logging –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        has_structured_logging = collector.structured_logger is not None
        
        print(f"üìù Structured logging: {'‚úÖ' if has_structured_logging else '‚ùå'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏
        with collector.trace_operation("test_logging", "test_component", {"test": True}):
            time.sleep(0.01)
        
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–æ—Ç–æ–≤–∞
        if hasattr(collector, '_log_structured'):
            print(f"\nüéØ DoD MON-006.5 PASSED: Structured logging –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-006.5 FAILED: Structured logging –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è structured logging: {e}")
        return False

def test_prometheus_metrics():
    """–¢–µ—Å—Ç Prometheus –º–µ—Ç—Ä–∏–∫ (DoD 6.6)"""
    print("\nüìä –¢–ï–°–¢ PROMETHEUS METRICS (DoD 6.6)")
    print("=" * 45)
    
    try:
        from modules.metrics_collector_v2 import MetricsCollectorV2
        
        # –°–æ–∑–¥–∞–µ–º collector –±–µ–∑ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        collector = MetricsCollectorV2(enable_prometheus=True, metrics_port=None)
        
        prometheus_available = collector.prometheus_available
        
        print(f"üìä Prometheus: {'‚úÖ' if prometheus_available else '‚ùå'}")
        
        if prometheus_available:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
            has_metrics = collector.prometheus_metrics is not None
            print(f"‚úÖ Prometheus –º–µ—Ç—Ä–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {has_metrics}")
            
            if has_metrics:
                metrics_list = list(collector.prometheus_metrics.keys())
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {', '.join(metrics_list)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
        with collector.trace_operation("prometheus_test", "test_component"):
            time.sleep(0.01)
        
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è Prometheus –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Prometheus –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–æ—Ç–æ–≤–∞
        if prometheus_available or hasattr(collector, 'prometheus_metrics'):
            print(f"\nüéØ DoD MON-006.6 PASSED: Prometheus metrics –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-006.6 PARTIAL: Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∫ –¥–ª—è dev)")
            return True  # –û–∫ –¥–ª—è development –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Prometheus metrics: {e}")
        return False

def test_export_functionality():
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (DoD 6.7)"""
    print("\nüíæ –¢–ï–°–¢ EXPORT FUNCTIONALITY (DoD 6.7)")
    print("=" * 45)
    
    try:
        from modules.metrics_collector_v2 import MetricsCollectorV2
        
        collector = MetricsCollectorV2(enable_prometheus=False, metrics_port=None)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        for i in range(3):
            with collector.trace_operation(f"export_test_{i}", "test_component"):
                time.sleep(0.01)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: 3")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json_path = f.name
        
        success_json = collector.export_traces_to_file(json_path, "json")
        print(f"‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç: {'‚úÖ' if success_json else '‚ùå'}")
        
        if success_json and os.path.exists(json_path):
            with open(json_path, 'r') as f:
                exported_data = json.load(f)
            print(f"‚úÖ JSON —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(exported_data)} —Ç—Ä–µ–π—Å–æ–≤")
            os.unlink(json_path)  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
            csv_path = f.name
        
        success_csv = collector.export_traces_to_file(csv_path, "csv")
        print(f"‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç: {'‚úÖ' if success_csv else '‚ùå'}")
        
        if success_csv and os.path.exists(csv_path):
            with open(csv_path, 'r') as f:
                csv_content = f.read()
            csv_lines = len(csv_content.strip().split('\n'))
            print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {csv_lines} —Å—Ç—Ä–æ–∫")
            os.unlink(csv_path)  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: —ç–∫—Å–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
        if success_json and success_csv:
            print(f"\nüéØ DoD MON-006.7 PASSED: Export functionality —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-006.7 PARTIAL: –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
            return success_json or success_csv
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è export functionality: {e}")
        return False

def test_global_metrics_functions():
    """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–µ—Ç—Ä–∏–∫"""
    print("\nüåê –¢–ï–°–¢ GLOBAL METRICS FUNCTIONS")
    print("-" * 35)
    
    try:
        from modules.metrics_collector_v2 import (
            get_global_metrics_collector, 
            init_global_metrics,
            trace_operation,
            measure_performance
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π collector
        global_collector = init_global_metrics(
            enable_prometheus=False, 
            enable_tracing=True, 
            metrics_port=None
        )
        
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π MetricsCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º convenience —Ñ—É–Ω–∫—Ü–∏–∏
        with trace_operation("global_test", "test_component"):
            time.sleep(0.01)
        
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è trace_operation —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        @measure_performance("global_function_test", "test_component")
        def test_function():
            time.sleep(0.01)
            return "test_result"
        
        result = test_function()
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è measure_performance —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
        same_collector = get_global_metrics_collector()
        is_same = global_collector is same_collector
        
        print(f"‚úÖ Singleton pattern: {'‚úÖ' if is_same else '‚ùå'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def test_dependencies_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π MON-006"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô MON-006")
    print("-" * 30)
    
    dependencies = [
        ('prometheus_client', 'üìä Prometheus –º–µ—Ç—Ä–∏–∫–∏'),
        ('structlog', 'üìù Structured logging'),
        ('psutil', 'üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤'),
        ('json', 'üìÑ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è'),
        ('threading', 'üßµ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å'),
        ('time', '‚è±Ô∏è –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏'),
    ]
    
    available_count = 0
    total_count = len(dependencies)
    
    for lib_name, description in dependencies:
        try:
            if lib_name in ['json', 'threading', 'time']:
                __import__(lib_name)  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            else:
                __import__(lib_name)
            print(f"‚úÖ {lib_name}: {description}")
            available_count += 1
        except ImportError:
            print(f"‚ùå {lib_name}: {description} (–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{total_count} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    if available_count >= 3:  # –ú–∏–Ω–∏–º—É–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        print("üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("   pip install prometheus-client structlog psutil")
        return False

def check_mon_006_dod():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Definition of Done –¥–ª—è MON-006"""
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê DoD MON-006:")
    print("-" * 25)
    
    dod_results = {}
    
    # DoD 6.1: Architecture
    print("üìä DoD 6.1: Metrics architecture...")
    dod_results['architecture'] = test_metrics_collector_architecture()
    
    # DoD 6.2: Operation tracing
    print("üîç DoD 6.2: Operation tracing...")
    dod_results['tracing'] = test_operation_tracing()
    
    # DoD 6.3: Performance measurement
    print("‚ö° DoD 6.3: Performance measurement...")
    dod_results['performance'] = test_performance_measurement()
    
    # DoD 6.4: Data quality metrics
    print("üìà DoD 6.4: Data quality metrics...")
    dod_results['data_quality'] = test_data_quality_metrics()
    
    # DoD 6.5: Structured logging
    print("üìù DoD 6.5: Structured logging...")
    dod_results['logging'] = test_structured_logging()
    
    # DoD 6.6: Prometheus metrics
    print("üìä DoD 6.6: Prometheus metrics...")
    dod_results['prometheus'] = test_prometheus_metrics()
    
    # DoD 6.7: Export functionality
    print("üíæ DoD 6.7: Export functionality...")
    dod_results['export'] = test_export_functionality()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    passed_count = sum(dod_results.values())
    total_count = len(dod_results)
    
    print(f"\nüìä –ò–¢–û–ì–û DoD MON-006:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_count}/{total_count}")
    
    for criterion, passed in dod_results.items():
        status = "PASSED" if passed else "FAILED"
        print(f"   ‚Ä¢ {criterion}: {status}")
    
    overall_passed = passed_count >= 6  # –ú–∏–Ω–∏–º—É–º 6 –∏–∑ 7
    
    if overall_passed:
        print(f"\nüéØ DoD MON-006 OVERALL: PASSED")
    else:
        print(f"\n‚ö†Ô∏è DoD MON-006 OVERALL: NEEDS_IMPROVEMENT")
    
    return overall_passed

def create_performance_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MON-006"""
    print("\nüìä –°–ò–ú–£–õ–Ø–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê MON-006")
    print("=" * 45)
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    scenarios = [
        {"operations": 100, "avg_time_ms": 150, "memory_mb": 45, "success_rate": 0.98},
        {"operations": 500, "avg_time_ms": 120, "memory_mb": 78, "success_rate": 0.95},
        {"operations": 1000, "avg_time_ms": 200, "memory_mb": 120, "success_rate": 0.97},
    ]
    
    print("| –û–ø–µ—Ä–∞—Ü–∏–π | –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è | –ü–∞–º—è—Ç—å | Success Rate | MON-006 –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ |")
    print("|----------|---------------|--------|--------------|-------------------|")
    
    for scenario in scenarios:
        operations = scenario["operations"]
        avg_time = scenario["avg_time_ms"]
        memory = scenario["memory_mb"]
        success_rate = scenario["success_rate"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_features = "Trace+Metrics+Export"
        
        print(f"| {operations:8d} | {avg_time:11d}ms | {memory:4d}MB | {success_rate:10.0%}  | {monitoring_features} |")
    
    print(f"\nüéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò MON-006:")
    print(f"   üìä Prometheus: Real-time –º–µ—Ç—Ä–∏–∫–∏")
    print(f"   üîç Tracing: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π")
    print(f"   üìù Structured logging: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ª–æ–≥–∏")
    print(f"   üìà Performance: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ")
    print(f"   üíæ Export: JSON/CSV —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    print(f"   üåê Global: –£–¥–æ–±–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MON-006"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MON-006: Metrics & Tracing")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    test_dependencies_check()
    
    # –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    test_global_metrics_functions()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DoD
    check_mon_006_dod()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    create_performance_simulation()
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MON-006 –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print(f"   pip install prometheus-client structlog psutil")
    print(f"   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Grafana –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 