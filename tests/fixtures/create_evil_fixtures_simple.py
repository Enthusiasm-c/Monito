#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Evil Test Fixtures –¥–ª—è MON-S01
–ë–µ–∑ pandas –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
"""

import os
import csv
import json
import random
from pathlib import Path
from typing import List, Dict, Any

class SimpleEvilFixtureGenerator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, fixtures_dir: str = "tests/fixtures/evil_files"):
        self.fixtures_dir = Path(fixtures_dir)
        self.fixtures_dir.mkdir(parents=True, exist_ok=True)
        self.expected_dir = Path("tests/fixtures/expected_outputs")
        self.expected_dir.mkdir(parents=True, exist_ok=True)
        
    def create_all_fixtures(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ evil fixtures"""
        print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ Evil Test Fixtures –¥–ª—è MON-S01 (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        fixtures_created = []
        
        # 1. Simple CSV with issues
        try:
            result = self.create_problematic_csv()
            fixtures_created.append(result)
            print("‚úÖ problematic.csv —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è problematic.csv: {e}")
        
        # 2. Large CSV (–∏–º–∏—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞)
        try:
            result = self.create_large_csv()
            fixtures_created.append(result)
            print("‚úÖ large_data.csv —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è large_data.csv: {e}")
        
        # 3. Windows-1252 CSV
        try:
            result = self.create_win1252_csv()
            fixtures_created.append(result)
            print("‚úÖ win1252.csv —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è win1252.csv: {e}")
        
        # 4. CSV with empty rows and columns
        try:
            result = self.create_empty_gaps_csv()
            fixtures_created.append(result)
            print("‚úÖ empty_gaps.csv —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è empty_gaps.csv: {e}")
        
        # 5. Mock PDF table
        try:
            result = self.create_mock_pdf_table()
            fixtures_created.append(result)
            print("‚úÖ pdf_table.txt —Å–æ–∑–¥–∞–Ω (mock PDF)")
        except Exception as e:
            print(f"‚ö†Ô∏è pdf_table.txt: {e}")
        
        # 6. Mock OCR image
        try:
            result = self.create_mock_ocr_image()
            fixtures_created.append(result)
            print("‚úÖ ocr_table.txt —Å–æ–∑–¥–∞–Ω (mock image)")
        except Exception as e:
            print(f"‚ö†Ô∏è ocr_table.txt: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç fixtures
        self.create_fixtures_manifest(fixtures_created)
        
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω–æ {len(fixtures_created)} evil fixtures")
        return fixtures_created
    
    def create_problematic_csv(self) -> Dict[str, Any]:
        """Evil Fixture 1: CSV —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ü—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = [
            ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ'],
            ['iPhone 14', '99,999', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ù–æ–≤—ã–π iPhone —Å –∫–∞–º–µ—Ä–æ–π'],
            ['', '89999', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', 'Samsung Galaxy'],  # –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            ['MacBook Pro', '–¥–æ—Ä–æ–≥–æ', '–ù–æ—É—Ç–±—É–∫–∏', ''],  # –ù–µ—á–∏—Å–ª–æ–≤–∞—è —Ü–µ–Ω–∞, –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            ['iPad Air', '59999.99', '', '–ü–ª–∞–Ω—à–µ—Ç Apple'],  # –ü—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            ['AirPods"Pro', '25000', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–ù–∞—É—à–Ω–∏–∫–∏\n—Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º'],  # –ö–∞–≤—ã—á–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            ['–¢–æ–≤–∞—Ä #123', '0', '–¢–µ—Å—Ç–æ–≤–∞—è', '–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: @#$%^&*()'],  # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        ]
        
        file_path = self.fixtures_dir / "problematic.csv"
        
        with open(file_path, 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            for row in data:
                writer.writerow(row)
        
        expected = {
            'filename': 'problematic.csv',
            'expected_rows_in': 6,  # –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            'expected_rows_out': 4,  # –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–æ—Ö–∏—Ö —Å—Ç—Ä–æ–∫
            'challenges': ['Empty cells', 'Non-numeric prices', 'Special characters', 'Multiline text']
        }
        
        with open(self.expected_dir / "problematic_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_large_csv(self) -> Dict[str, Any]:
        """Evil Fixture 2: –ë–æ–ª—å—à–æ–π CSV —Ñ–∞–π–ª (150 —Å—Ç—Ä–æ–∫ x 20 –∫–æ–ª–æ–Ω–æ–∫)"""
        
        categories = ['–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ù–æ—É—Ç–±—É–∫–∏', '–ü–ª–∞–Ω—à–µ—Ç—ã', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–¢–í', '–ê—É–¥–∏–æ']
        brands = ['Apple', 'Samsung', 'Xiaomi', 'Sony', 'LG', 'Huawei', 'ASUS', 'HP']
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ë—Ä–µ–Ω–¥', '–û–ø–∏—Å–∞–Ω–∏–µ'] + \
                 [f'–ü–æ–ª–µ_{i+1}' for i in range(14)]  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        
        data = [headers]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 150 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        for i in range(150):
            row = [
                f'PROD_{i+1:03d}',
                f'{random.choice(brands)} {random.choice(["Pro", "Max", "Ultra", "Mini"])} {random.randint(10,99)}',
                str(random.randint(5000, 200000)),
                random.choice(categories),
                random.choice(brands),
                f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {i+1} —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏'
            ]
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for j in range(14):
                row.append(f'–ó–Ω–∞—á–µ–Ω–∏–µ_{j+1}_{i+1}')
            
            data.append(row)
        
        file_path = self.fixtures_dir / "large_data.csv"
        
        with open(file_path, 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            for row in data:
                writer.writerow(row)
        
        file_size_mb = round(os.path.getsize(file_path) / (1024*1024), 2)
        
        expected = {
            'filename': 'large_data.csv',
            'expected_rows_in': 150,
            'expected_rows_out': 150,
            'columns_count': 20,
            'file_size_mb': file_size_mb,
            'challenges': ['Large file size', 'Many columns', 'Memory usage']
        }
        
        with open(self.expected_dir / "large_data_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_win1252_csv(self) -> Dict[str, Any]:
        """Evil Fixture 3: CSV —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Windows-1252"""
        
        # –î–∞–Ω–Ω—ã–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ Windows-1252
        products = [
            ['–¢–æ–≤–∞—Ä', '–¶–µ–Ω–∞', '–û–ø–∏—Å–∞–Ω–∏–µ'],
            ['–°–º–∞—Ä—Ç—Ñ–æ–Ω "iPhone"', '99 999‚ÇΩ', '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω‚Äî–æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'],
            ['–ù–æ—É—Ç–±—É–∫ ‚Ññ1', '150 000—Ä.', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫‚Äî–≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
            ['–ü–ª–∞–Ω—à–µ—Ç "iPad"', '59 999‚ÇΩ', '–ü–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã‚Äî–ª–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π'],
            ['–ù–∞—É—à–Ω–∏–∫–∏', '25 000—Ä.', '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏‚Äîpremium –∫–∞—á–µ—Å—Ç–≤–æ'],
        ]
        
        file_path = self.fixtures_dir / "win1252.csv"
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ Windows-1252
            with open(file_path, 'w', encoding='cp1252', newline='') as f:
                writer = csv.writer(f, delimiter=';')
                for row in products:
                    writer.writerow(row)
            encoding_used = 'cp1252'
        except UnicodeEncodeError:
            # Fallback –Ω–∞ UTF-8 –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
            with open(file_path, 'w', encoding='utf-8', newline='') as f:
                writer = csv.writer(f, delimiter=';')
                for row in products:
                    writer.writerow(row)
            encoding_used = 'utf-8'
        
        expected = {
            'filename': 'win1252.csv',
            'expected_rows_in': 4,
            'expected_rows_out': 4,
            'encoding': encoding_used,
            'delimiter': ';',
            'challenges': ['Encoding issues', 'Special characters', 'European CSV format']
        }
        
        with open(self.expected_dir / "win1252_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_empty_gaps_csv(self) -> Dict[str, Any]:
        """Evil Fixture 4: CSV —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –∏ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏"""
        
        data = [
            ['–ù–∞–∑–≤–∞–Ω–∏–µ', '', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'Unnamed_4', '–û–ø–∏—Å–∞–Ω–∏–µ'],  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            ['', '', '', '', ''],  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            ['iPhone 14', '99999', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', 'Apple', '–ù–æ–≤—ã–π iPhone'],
            ['', '', '', '', ''],  # –ï—â–µ –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            ['Samsung S23', '89999', '', 'Samsung', 'Galaxy S23'],  # –ü—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            ['MacBook Pro', '200000', '–ù–æ—É—Ç–±—É–∫–∏', '', ''],  # –ü—É—Å—Ç—ã–µ –ø–æ–ª—è
            ['', '', '', '', ''],  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ
        ]
        
        file_path = self.fixtures_dir / "empty_gaps.csv"
        
        with open(file_path, 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            for row in data:
                writer.writerow(row)
        
        expected = {
            'filename': 'empty_gaps.csv',
            'expected_rows_in': 3,  # –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            'expected_rows_out': 3,
            'challenges': ['Empty rows', 'Empty column headers', 'Missing data', 'Unnamed columns']
        }
        
        with open(self.expected_dir / "empty_gaps_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_mock_pdf_table(self) -> Dict[str, Any]:
        """Evil Fixture 5: Mock PDF table"""
        
        pdf_content = """
PDF TABLE SIMULATION
====================

–ü–†–ê–ô–°-–õ–ò–°–¢ –¢–û–í–ê–†–û–í 2024
–ö–æ–º–ø–∞–Ω–∏—è: –û–û–û "–¢–µ—Å—Ç –°–∏—Å—Ç–µ–º—Å"
–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 15.01.2024

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞     ‚îÇ –¶–µ–Ω–∞     ‚îÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è   ‚îÇ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ iPhone 15 Pro       ‚îÇ 120,000  ‚îÇ –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã   ‚îÇ –ù–æ–≤–∏–Ω–∫–∞ 2024 ‚îÇ
‚îÇ MacBook Air M2      ‚îÇ 150,000  ‚îÇ –ù–æ—É—Ç–±—É–∫–∏    ‚îÇ –í –Ω–∞–ª–∏—á–∏–∏    ‚îÇ
‚îÇ iPad Pro 12.9"      ‚îÇ 80,000   ‚îÇ –ü–ª–∞–Ω—à–µ—Ç—ã    ‚îÇ –ü–æ–¥ –∑–∞–∫–∞–∑    ‚îÇ
‚îÇ AirPods Pro 2       ‚îÇ 25,000   ‚îÇ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã  ‚îÇ –°–∫–∏–¥–∫–∞ 10%   ‚îÇ
‚îÇ Apple Watch Ultra   ‚îÇ 95,000   ‚îÇ –ß–∞—Å—ã        ‚îÇ –í–æ–¥–æ–Ω–µ–ø—Ä.    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

–ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: 5
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 470,000 —Ä—É–±.

–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:
- –ú–æ—Å–∫–≤–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 50,000 —Ä—É–±.
- –†–µ–≥–∏–æ–Ω—ã: 1,500 —Ä—É–±.

–ö–æ–Ω—Ç–∞–∫—Ç—ã: sales@testsystems.ru
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
        """
        
        file_path = self.fixtures_dir / "pdf_table.txt"
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(pdf_content)
        
        expected = {
            'filename': 'pdf_table.txt',
            'expected_rows_in': 5,
            'expected_rows_out': 5,
            'format': 'mock_pdf',
            'challenges': ['PDF table extraction', 'ASCII table parsing', 'Non-standard format', 'Mixed content']
        }
        
        with open(self.expected_dir / "pdf_table_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_mock_ocr_image(self) -> Dict[str, Any]:
        """Evil Fixture 6: Mock OCR image result"""
        
        ocr_content = """
OCR TEXT EXTRACTION RESULT
=========================

–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: product_list.jpg
–ö–∞—á–µ—Å—Ç–≤–æ OCR: 87%
–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2024-01-15

–ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô –¢–ï–ö–°–¢:
-----------------

–ü–†–ê–ô–°-–õ–ò–°–¢ (OCR)

—Ç–æ–≤–∞—Ä:           iPhone14Pro
—Ü–µ–Ω–∞:            99999—Ä—É–±
–∫–∞—Ç–µ–≥–æ—Ä–∏—è:       —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã
—Å—Ç–∞—Ç—É—Å:          –Ω–∞–ª–∏—á–∏–∏

—Ç–æ–≤–∞—Ä:           SamsungGalaxyS23
—Ü–µ–Ω–∞:            89999
–∫–∞—Ç–µ–≥–æ—Ä–∏—è:       —Ç–µ–ª–µ—Ñ–æ–Ω—ã
—Å—Ç–∞—Ç—É—Å:          –∑–∞–∫–∞–∑

—Ç–æ–≤–∞—Ä:           macbookpro14
—Ü–µ–Ω–∞:            200000—Ä
–∫–∞—Ç–µ–≥–æ—Ä–∏—è:       –Ω–æ—É—Ç–±—É–∫–∏
—Å—Ç–∞—Ç—É—Å:          –Ω–∞–ª–∏—á–∏–∏

—Ç–æ–≤–∞—Ä:           ipadair
—Ü–µ–Ω–∞:            59999—Ä—É–±
–∫–∞—Ç–µ–≥–æ—Ä–∏—è:       –ø–ª–∞–Ω—à–µ—Ç—ã
—Å—Ç–∞—Ç—É—Å:          —Å–∫–ª–∞–¥

–ö–û–ù–ï–¶ –¢–ê–ë–õ–ò–¶–´

–ü–†–ò–ú–ï–ß–ê–ù–ò–Ø OCR:
- –°–∫–ª–µ–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è OCR)
- –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
- –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
- –ù–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–∞—Ö
- –°–º–µ—à–∞–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç (—Ä—É–±/—Ä)

–¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: 4 –∏–∑ 4 —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã –≤—Ä—É—á–Ω—É—é
        """
        
        file_path = self.fixtures_dir / "ocr_table.txt"
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(ocr_content)
        
        expected = {
            'filename': 'ocr_table.txt',
            'expected_rows_in': 4,
            'expected_rows_out': 4,
            'format': 'mock_ocr',
            'challenges': ['OCR text extraction', 'Joined words', 'Text parsing', 'Format recognition', 'OCR errors']
        }
        
        with open(self.expected_dir / "ocr_table_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_fixtures_manifest(self, fixtures: List[Dict[str, Any]]):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –≤—Å–µ—Ö fixtures"""
        
        manifest = {
            'mon_s01_fixtures': {
                'description': 'Simple evil test fixtures for MON-S01 regression testing',
                'generator': 'SimpleEvilFixtureGenerator',
                'total_fixtures': len(fixtures),
                'created_at': '2024-01-15',
                'fixtures': fixtures,
                'test_objectives': [
                    'Data validation robustness',
                    'Error handling',
                    'Format compatibility',
                    'Performance under load',
                    'Edge case handling',
                    'Encoding support'
                ]
            }
        }
        
        with open(self.fixtures_dir / "fixtures_manifest.json", 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìã –°–æ–∑–¥–∞–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç fixtures: {len(fixtures)} —Ñ–∞–π–ª–æ–≤")

def main():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö evil fixtures"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ Evil Fixtures –¥–ª—è MON-S01")
    
    generator = SimpleEvilFixtureGenerator()
    fixtures = generator.create_all_fixtures()
    
    print(f"\nüéØ MON-S01 Evil Fixtures –≥–æ—Ç–æ–≤—ã!")
    print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: tests/fixtures/evil_files/")
    print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: tests/fixtures/expected_outputs/")
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    
    for fixture in fixtures:
        challenges = ', '.join(fixture.get('challenges', []))
        print(f"   ‚Ä¢ {fixture['filename']} - {challenges}")
    
    return fixtures

if __name__ == "__main__":
    main() 