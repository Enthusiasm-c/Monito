#!/usr/bin/env python3
"""
Universal Excel Parser V2 - —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MON-002 Pre-Processor
–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PreProcessor –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è (3x –±—ã—Å—Ç—Ä–µ–µ)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
"""

import pandas as pd
import re
import logging
import os
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from .base_parser import BaseParser
from .pre_processor import PreProcessor, ProcessingStats

logger = logging.getLogger(__name__)

class UniversalExcelParserV2(BaseParser):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel V2 —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MON-002 Pre-Processor
    
    –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    - ‚ö° 3x –±—ã—Å—Ç—Ä–µ–µ —á—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ calamine
    - üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    - üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
    - üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        super().__init__()
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º PreProcessor –¥–ª—è MON-002
        self.preprocessor = PreProcessor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        self.processing_stats = None
        
        logger.info("‚úÖ UniversalExcelParserV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å PreProcessor")
    
    def extract_products_universal(self, file_path: str, max_products: int = 1000, use_ai: bool = True) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MON-002 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        
        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            max_products: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            use_ai: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –∞–Ω–∞–ª–∏–∑
        
        Returns:
            Dict —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            logger.info(f"üöÄ UniversalExcelParserV2: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {Path(file_path).name}")
            
            # –®–∞–≥ 1: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ MON-002
            df, preprocessing_stats = self.preprocessor.process_excel_file(file_path)
            self.processing_stats = preprocessing_stats
            
            logger.info(f"‚úÖ MON-002 –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {preprocessing_stats.total_time_ms}ms:")
            logger.info(f"   üìñ –ß—Ç–µ–Ω–∏–µ: {preprocessing_stats.read_time_ms}ms")
            logger.info(f"   üî¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {preprocessing_stats.cells_normalized} —è—á–µ–µ–∫")
            
            if df.empty:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
                return self._create_empty_result(file_path, "–§–∞–π–ª –ø—É—Å—Ç")
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)
            sheets_analysis = self._analyze_all_sheets_from_df(df, file_path)
            
            # –®–∞–≥ 3: –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞
            best_sheet = self._select_best_sheet(sheets_analysis)
            if not best_sheet:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")
                return self._create_empty_result(file_path, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –®–∞–≥ 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞
            products = self._extract_products_from_sheet(df, best_sheet, max_products)
            
            # –®–∞–≥ 5: AI –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if use_ai and products:
                ai_result = self._try_ai_extraction_v2(df, file_path)
                if ai_result and ai_result.get('products'):
                    logger.info("ü§ñ AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    products = ai_result['products'][:max_products]
            
            result = {
                'success': True,
                'products': products,
                'total_products': len(products),
                'file_info': {
                    'name': Path(file_path).name,
                    'size_mb': round(os.path.getsize(file_path) / 1024 / 1024, 2),
                    'rows': len(df),
                    'columns': len(df.columns)
                },
                'processing_stats': {
                    'preprocessing_time_ms': preprocessing_stats.total_time_ms,
                    'read_time_ms': preprocessing_stats.read_time_ms,
                    'cells_normalized': preprocessing_stats.cells_normalized,
                    'formulas_evaluated': preprocessing_stats.formulas_evaluated,
                    'method': 'UniversalExcelParserV2_with_MON002'
                },
                'extraction_method': 'smart_analysis',
                'confidence': 0.9 if products else 0.0
            }
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {preprocessing_stats.total_time_ms}ms")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return self._create_empty_result(file_path, str(e))
    
    def _analyze_all_sheets_from_df(self, df: pd.DataFrame, file_path: str) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ DataFrame"""
        try:
            # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
            sheet_analysis = {
                'name': 'processed_sheet',
                'df': df,
                'data_quality': self._calculate_data_quality(df),
                'product_columns': self._find_product_columns(df),
                'price_columns': self._find_price_columns(df),
                'row_count': len(df),
                'col_count': len(df.columns)
            }
            
            return [sheet_analysis]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Å—Ç–æ–≤: {e}")
            return []
    
    def _calculate_data_quality(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ"""
        if df.empty:
            return 0.0
        
        try:
            # –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
            total_cells = len(df) * len(df.columns)
            non_empty_cells = df.count().sum()
            
            # –ü–æ–¥—Å—á–µ—Ç —è—á–µ–µ–∫, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Ç–æ–≤–∞—Ä—ã
            product_like_cells = 0
            price_like_cells = 0
            
            for col in df.columns:
                for value in df[col].dropna():
                    if isinstance(value, str):
                        if self._looks_like_product(value):
                            product_like_cells += 1
                        elif self._looks_like_price(str(value)):
                            price_like_cells += 1
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            fill_ratio = non_empty_cells / total_cells if total_cells > 0 else 0
            product_ratio = product_like_cells / max(non_empty_cells, 1)
            price_ratio = price_like_cells / max(non_empty_cells, 1)
            
            quality = (fill_ratio * 0.3 + product_ratio * 0.4 + price_ratio * 0.3)
            
            logger.debug(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {quality:.3f} "
                        f"(–∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {fill_ratio:.2f}, —Ç–æ–≤–∞—Ä—ã: {product_ratio:.2f}, —Ü–µ–Ω—ã: {price_ratio:.2f})")
            
            return min(quality, 1.0)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return 0.0
    
    def _find_product_columns(self, df: pd.DataFrame) -> List[str]:
        """–ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        product_columns = []
        
        try:
            for col in df.columns:
                product_count = 0
                sample_size = min(len(df), 20)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
                
                for value in df[col].head(sample_size).dropna():
                    if isinstance(value, str) and self._looks_like_product(value):
                        product_count += 1
                
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 30% —Å—Ç—Ä–æ–∫ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
                if product_count / max(sample_size, 1) > 0.3:
                    product_columns.append(col)
                    logger.debug(f"üì¶ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Ç–æ–≤–∞—Ä–æ–≤: {col} ({product_count}/{sample_size})")
            
            return product_columns
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []
    
    def _find_price_columns(self, df: pd.DataFrame) -> List[str]:
        """–ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ü–µ–Ω–∞–º–∏"""
        price_columns = []
        
        try:
            for col in df.columns:
                price_count = 0
                sample_size = min(len(df), 20)
                
                for value in df[col].head(sample_size).dropna():
                    if self._looks_like_price(str(value)):
                        price_count += 1
                
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 40% —Å—Ç—Ä–æ–∫ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ü–µ–Ω—ã
                if price_count / max(sample_size, 1) > 0.4:
                    price_columns.append(col)
                    logger.debug(f"üí∞ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Ü–µ–Ω: {col} ({price_count}/{sample_size})")
            
            return price_columns
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ü–µ–Ω: {e}")
            return []
    
    def _select_best_sheet(self, sheets_analysis: List[Dict]) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not sheets_analysis:
            return None
        
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö
            sorted_sheets = sorted(sheets_analysis, key=lambda x: x['data_quality'], reverse=True)
            
            best_sheet = sorted_sheets[0]
            logger.info(f"üìä –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: {best_sheet['name']} "
                       f"(–∫–∞—á–µ—Å—Ç–≤–æ: {best_sheet['data_quality']:.3f})")
            
            return best_sheet
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞: {e}")
            return None
    
    def _extract_products_from_sheet(self, df: pd.DataFrame, sheet_info: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞"""
        products = []
        
        try:
            product_cols = sheet_info.get('product_columns', [])
            price_cols = sheet_info.get('price_columns', [])
            
            logger.info(f"üì¶ –°—Ç–æ–ª–±—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤: {product_cols}")
            logger.info(f"üí∞ –°—Ç–æ–ª–±—Ü—ã —Ü–µ–Ω: {price_cols}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É
            if not product_cols:
                product_cols = [df.columns[0]] if len(df.columns) > 0 else []
            if not price_cols:
                # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —á–∏—Å–ª–∞–º–∏
                for col in df.columns:
                    if df[col].dtype in ['int64', 'float64'] or 'price' in str(col).lower():
                        price_cols.append(col)
                        break
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            for idx, row in df.iterrows():
                if len(products) >= max_products:
                    break
                
                product = self._extract_product_from_row(row, product_cols, price_cols)
                if product:
                    products.append(product)
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(df)} —Å—Ç—Ä–æ–∫")
            return products
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []
    
    def _extract_product_from_row(self, row: pd.Series, product_cols: List[str], price_cols: List[str]) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_name = None
            for col in product_cols:
                if col in row and pd.notna(row[col]):
                    value = str(row[col]).strip()
                    if value and self._looks_like_product(value):
                        product_name = self._clean_product_name(value)
                        break
            
            if not product_name:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = 0.0
            for col in price_cols:
                if col in row and pd.notna(row[col]):
                    price_value = self._clean_price(str(row[col]))
                    if price_value > 0:
                        price = price_value
                        break
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            unit = 'pcs'
            for value in row:
                if pd.notna(value) and self._looks_like_unit(str(value)):
                    unit = str(value).strip().lower()
                    break
            
            return {
                'original_name': product_name,
                'standardized_name': product_name,  # –ë—É–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
                'price': price,
                'unit': unit,
                'brand': 'unknown',
                'size': 'unknown',
                'category': 'general',
                'confidence': 0.8
            }
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
            return None
    
    def _try_ai_extraction_v2(self, df: pd.DataFrame, file_path: str) -> Optional[Dict]:
        """–ü–æ–ø—ã—Ç–∫–∞ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –ø–∞—Ä—Å–µ—Ä
            from .ai_table_parser import AITableParser
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            temp_file = f"{file_path}_preprocessed.xlsx"
            df.to_excel(temp_file, index=False, engine='openpyxl')
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –ø–∞—Ä—Å–µ—Ä
                openai_key = os.getenv('OPENAI_API_KEY')
                if not openai_key:
                    logger.info("ü§ñ OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑")
                    return None
                
                ai_parser = AITableParser(openai_key)
                ai_result = ai_parser.extract_products_with_ai(df, context=f"–§–∞–π–ª: {Path(file_path).name}")
                
                return ai_result
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            return None
    
    def _create_empty_result(self, file_path: str, error_message: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            'success': False,
            'products': [],
            'total_products': 0,
            'error': error_message,
            'file_info': {
                'name': Path(file_path).name,
                'size_mb': round(os.path.getsize(file_path) / 1024 / 1024, 2) if os.path.exists(file_path) else 0
            },
            'processing_stats': {
                'preprocessing_time_ms': self.processing_stats.total_time_ms if self.processing_stats else 0,
                'method': 'UniversalExcelParserV2_error'
            },
            'extraction_method': 'error',
            'confidence': 0.0
        }
    
    def get_processing_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å —É—á–µ—Ç–æ–º MON-002 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.processing_stats:
            return {}
        
        return {
            'preprocessing': {
                'total_time_ms': self.processing_stats.total_time_ms,
                'read_time_ms': self.processing_stats.read_time_ms,
                'unmerge_time_ms': self.processing_stats.unmerge_time_ms,
                'formula_eval_time_ms': self.processing_stats.formula_eval_time_ms,
                'normalize_time_ms': self.processing_stats.normalize_time_ms,
                'rows_processed': self.processing_stats.rows_processed,
                'cells_normalized': self.processing_stats.cells_normalized,
                'formulas_evaluated': self.processing_stats.formulas_evaluated
            },
            'performance_metrics': {
                'read_speed_acceptable': self.processing_stats.read_time_ms <= 700,
                'processing_efficient': self.processing_stats.total_time_ms <= 5000,
                'normalization_active': self.processing_stats.cells_normalized > 0
            },
            'version': 'UniversalExcelParserV2_with_MON002'
        }


# Backward compatibility
class UniversalExcelParser(UniversalExcelParserV2):
    """
    –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å MON-002 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
    """
    
    def __init__(self):
        super().__init__()
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UniversalExcelParser V2 —Å MON-002 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏") 