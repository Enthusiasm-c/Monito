#!/usr/bin/env python3
"""
Celery Worker V2 –¥–ª—è MON-007 - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- Celery task queue –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- Redis broker –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
- Background jobs –¥–ª—è Telegram Bot
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ workers
"""

import os
import time
import json
import logging
import traceback
from typing import Dict, List, Any, Optional, Union
from dataclasses import dataclass, field
from pathlib import Path
from datetime import datetime, timezone

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Celery
try:
    from celery import Celery, Task
    from celery.result import AsyncResult
    from celery.states import PENDING, SUCCESS, FAILURE, RETRY, REVOKED
    CELERY_AVAILABLE = True
except ImportError:
    CELERY_AVAILABLE = False
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    class Celery:
        def __init__(self, *args, **kwargs): pass
        def task(self, *args, **kwargs): return lambda f: f
        def control(self): return type('obj', (object,), {'inspect': lambda: None})()
    
    class Task: pass
    class AsyncResult: pass
    
    PENDING = SUCCESS = FAILURE = RETRY = REVOKED = "MOCK_STATE"

logger = logging.getLogger(__name__)

@dataclass
class TaskResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id: str
    status: str  # pending, success, failure, retry, revoked
    result: Any = None
    error: str = ""
    start_time: float = 0.0
    end_time: float = 0.0
    duration_ms: int = 0
    metadata: Dict[str, Any] = field(default_factory=dict)

@dataclass
class WorkerStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã Celery workers"""
    total_tasks: int = 0
    successful_tasks: int = 0
    failed_tasks: int = 0
    pending_tasks: int = 0
    active_workers: int = 0
    queue_length: int = 0
    average_processing_time_ms: float = 0.0
    errors: List[str] = field(default_factory=list)

class MonitoTaskBase(Task):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è Monito –∑–∞–¥–∞—á —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    
    def on_success(self, retval, task_id, args, kwargs):
        """Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ MON-006
            from modules.monito_metrics import get_monito_metrics
            metrics = get_monito_metrics()
            
            metrics.record_data_processed("celery_worker", "tasks", 1)
            metrics.record_data_quality("celery_worker", 1.0, {
                "task_id": task_id,
                "task_name": self.name,
                "status": "success",
                "result_type": type(retval).__name__
            })
            
            logger.info(f"‚úÖ Task {self.name} [{task_id}] completed successfully")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—Ö–∞: {e}")
    
    def on_failure(self, exc, task_id, args, kwargs, einfo):
        """Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
            from modules.monito_metrics import get_monito_metrics
            metrics = get_monito_metrics()
            
            metrics.record_data_quality("celery_worker", 0.0, {
                "task_id": task_id,
                "task_name": self.name,
                "status": "failure",
                "error": str(exc),
                "traceback": str(einfo)
            })
            
            logger.error(f"‚ùå Task {self.name} [{task_id}] failed: {exc}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–∫–∏: {e}")
    
    def on_retry(self, exc, task_id, args, kwargs, einfo):
        """Callback –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"""
        try:
            logger.warning(f"üîÑ Task {self.name} [{task_id}] retrying: {exc}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ retry callback: {e}")

class CeleryWorkerV2:
    """
    Celery Worker V2 –¥–ª—è MON-007 –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - üîÑ Celery task queue
    - üíæ Redis broker
    - ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    - üì± Background jobs
    """
    
    def __init__(self, app_name: str = "monito", 
                 broker_url: str = "redis://localhost:6379/0",
                 result_backend: str = "redis://localhost:6379/0",
                 enable_monitoring: bool = True):
        
        self.app_name = app_name
        self.broker_url = broker_url
        self.result_backend = result_backend
        self.enable_monitoring = enable_monitoring
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = WorkerStats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self._check_dependencies()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Celery app
        self._init_celery_app()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.enable_monitoring:
            self._init_monitoring()
        
        logger.info("‚úÖ CeleryWorkerV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å MON-007 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    
    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π MON-007"""
        self.celery_available = CELERY_AVAILABLE
        self.redis_available = False
        
        if not self.celery_available:
            logger.warning("‚ö†Ô∏è Celery –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º")
        else:
            logger.info("‚úÖ Celery –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        try:
            import redis
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            redis_client = redis.Redis.from_url(self.broker_url)
            redis_client.ping()
            self.redis_available = True
            logger.info("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ broker")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def _init_celery_app(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.celery_available:
            # Mock —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            self.celery_app = None
            logger.info("üìù Celery mock —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º Celery app
            self.celery_app = Celery(
                self.app_name,
                broker=self.broker_url,
                backend=self.result_backend
            )
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
            self.celery_app.conf.update(
                # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
                task_serializer='json',
                accept_content=['json'],
                result_serializer='json',
                timezone='UTC',
                enable_utc=True,
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                result_expires=3600,  # 1 —á–∞—Å
                result_persistent=True,
                
                # –í–æ—Ä–∫–µ—Ä—ã
                worker_prefetch_multiplier=1,
                task_acks_late=True,
                worker_disable_rate_limits=False,
                
                # –†–æ—É—Ç–∏–Ω–≥
                task_routes={
                    'monito.file_processing': {'queue': 'file_processing'},
                    'monito.llm_processing': {'queue': 'llm_processing'},
                    'monito.data_validation': {'queue': 'data_validation'},
                    'monito.sheets_writing': {'queue': 'sheets_writing'},
                    'monito.telegram_notifications': {'queue': 'notifications'},
                },
                
                # Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                task_default_retry_delay=60,  # 1 –º–∏–Ω—É—Ç–∞
                task_max_retries=3,
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                worker_send_task_events=True,
                task_send_sent_event=True,
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            self._register_tasks()
            
            logger.info(f"‚úÖ Celery app –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {self.app_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Celery: {e}")
            self.celery_app = None
    
    def _register_tasks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Monito –∑–∞–¥–∞—á"""
        if not self.celery_app:
            return
        
        try:
            # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            @self.celery_app.task(base=MonitoTaskBase, bind=True, name="monito.file_processing")
            def process_file_task(self, file_path: str, user_id: int, options: Dict[str, Any] = None):
                """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
                return self._process_file_impl(file_path, user_id, options or {})
            
            # –ó–∞–¥–∞—á–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏
            @self.celery_app.task(base=MonitoTaskBase, bind=True, name="monito.llm_processing")
            def llm_processing_task(self, products: List[Dict], options: Dict[str, Any] = None):
                """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
                return self._llm_processing_impl(products, options or {})
            
            # –ó–∞–¥–∞—á–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            @self.celery_app.task(base=MonitoTaskBase, bind=True, name="monito.data_validation")
            def data_validation_task(self, data: List[Dict], options: Dict[str, Any] = None):
                """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
                return self._data_validation_impl(data, options or {})
            
            # –ó–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∏ –≤ Sheets
            @self.celery_app.task(base=MonitoTaskBase, bind=True, name="monito.sheets_writing")
            def sheets_writing_task(self, products: List[Dict], spreadsheet_id: str, options: Dict[str, Any] = None):
                """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets"""
                return self._sheets_writing_impl(products, spreadsheet_id, options or {})
            
            # –ó–∞–¥–∞—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
            @self.celery_app.task(base=MonitoTaskBase, bind=True, name="monito.telegram_notifications")
            def telegram_notification_task(self, user_id: int, message: str, options: Dict[str, Any] = None):
                """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
                return self._telegram_notification_impl(user_id, message, options or {})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏
            self.process_file_task = process_file_task
            self.llm_processing_task = llm_processing_task
            self.data_validation_task = data_validation_task
            self.sheets_writing_task = sheets_writing_task
            self.telegram_notification_task = telegram_notification_task
            
            logger.info("‚úÖ Monito –∑–∞–¥–∞—á–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á: {e}")
    
    def _init_monitoring(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ MON-006"""
        try:
            from modules.monito_metrics import get_monito_metrics
            self.metrics = get_monito_metrics()
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Celery –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ MON-006")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.metrics = None
    
    def submit_file_processing(self, file_path: str, user_id: int, 
                             options: Dict[str, Any] = None) -> str:
        """
        MON-007.1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            options: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        
        Returns:
            str: Task ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        try:
            if not self.celery_app:
                # Mock —Ä–µ–∂–∏–º - –∏–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                task_id = f"mock_task_{int(time.time() * 1000)}"
                logger.info(f"üìù Mock –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path} -> {task_id}")
                return task_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            task = self.process_file_task.delay(file_path, user_id, options)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if self.metrics:
                self.metrics.record_data_processed("celery_worker", "files", 1)
            
            self.stats.total_tasks += 1
            self.stats.pending_tasks += 1
            
            logger.info(f"üöÄ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: {file_path} -> {task.id}")
            return task.id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    def submit_llm_processing(self, products: List[Dict], 
                            options: Dict[str, Any] = None) -> str:
        """
        MON-007.2: –û—Ç–ø—Ä–∞–≤–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            options: –û–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Returns:
            str: Task ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        try:
            if not self.celery_app:
                task_id = f"mock_llm_task_{int(time.time() * 1000)}"
                logger.info(f"üìù Mock LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ -> {task_id}")
                return task_id
            
            task = self.llm_processing_task.delay(products, options)
            
            if self.metrics:
                self.metrics.record_data_processed("celery_worker", "products", len(products))
            
            self.stats.total_tasks += 1
            self.stats.pending_tasks += 1
            
            logger.info(f"ü§ñ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ -> {task.id}")
            return task.id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ LLM –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    def submit_telegram_notification(self, user_id: int, message: str,
                                   options: Dict[str, Any] = None) -> str:
        """
        MON-007.3: –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            options: –û–ø—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        Returns:
            str: Task ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        try:
            if not self.celery_app:
                task_id = f"mock_telegram_task_{int(time.time() * 1000)}"
                logger.info(f"üìù Mock Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: user {user_id} -> {task_id}")
                return task_id
            
            task = self.telegram_notification_task.delay(user_id, message, options)
            
            if self.metrics:
                self.metrics.record_data_processed("celery_worker", "notifications", 1)
            
            self.stats.total_tasks += 1
            self.stats.pending_tasks += 1
            
            logger.info(f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: user {user_id} -> {task.id}")
            return task.id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    def get_task_result(self, task_id: str) -> TaskResult:
        """
        MON-007.4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
        
        Returns:
            TaskResult: –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏
        """
        try:
            if not self.celery_app:
                # Mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return TaskResult(
                    task_id=task_id,
                    status="success",
                    result={"mock": True, "message": "Mock task completed"},
                    duration_ms=100
                )
            
            result = AsyncResult(task_id, app=self.celery_app)
            
            task_result = TaskResult(
                task_id=task_id,
                status=result.state.lower(),
                result=result.result if result.successful() else None,
                error=str(result.result) if result.failed() else "",
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if hasattr(result, 'info') and result.info:
                task_result.metadata = result.info if isinstance(result.info, dict) else {}
            
            return task_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            return TaskResult(
                task_id=task_id,
                status="error",
                error=str(e)
            )
    
    def get_queue_status(self) -> Dict[str, Any]:
        """
        MON-007.5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–µ–π
        """
        try:
            if not self.celery_app:
                return {
                    "mode": "mock",
                    "queues": {
                        "file_processing": {"pending": 0, "active": 0},
                        "llm_processing": {"pending": 0, "active": 0},
                        "data_validation": {"pending": 0, "active": 0},
                        "sheets_writing": {"pending": 0, "active": 0},
                        "notifications": {"pending": 0, "active": 0}
                    },
                    "workers": {"active": 0, "total": 0}
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–∞—Ö
            inspect = self.celery_app.control.inspect()
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = inspect.active() or {}
            
            # –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            reserved_tasks = inspect.reserved() or {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
            worker_stats = inspect.stats() or {}
            
            queue_info = {
                "mode": "celery",
                "queues": {},
                "workers": {
                    "active": len(active_tasks),
                    "total": len(worker_stats)
                },
                "active_tasks": sum(len(tasks) for tasks in active_tasks.values()),
                "reserved_tasks": sum(len(tasks) for tasks in reserved_tasks.values())
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –æ—á–µ—Ä–µ–¥—è–º
            all_tasks = []
            for worker_tasks in active_tasks.values():
                all_tasks.extend(worker_tasks)
            for worker_tasks in reserved_tasks.values():
                all_tasks.extend(worker_tasks)
            
            queue_names = ["file_processing", "llm_processing", "data_validation", 
                          "sheets_writing", "notifications"]
            
            for queue_name in queue_names:
                queue_tasks = [task for task in all_tasks 
                             if task.get('delivery_info', {}).get('routing_key') == queue_name]
                queue_info["queues"][queue_name] = {
                    "pending": len([t for t in queue_tasks if t.get('acknowledged') == False]),
                    "active": len([t for t in queue_tasks if t.get('acknowledged') == True])
                }
            
            return queue_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π: {e}")
            return {"error": str(e)}
    
    def get_worker_stats(self) -> WorkerStats:
        """
        MON-007.6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
        
        Returns:
            WorkerStats: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        """
        try:
            queue_status = self.get_queue_status()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.active_workers = queue_status.get("workers", {}).get("active", 0)
            self.stats.queue_length = queue_status.get("active_tasks", 0) + queue_status.get("reserved_tasks", 0)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if self.stats.successful_tasks > 0:
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
                self.stats.average_processing_time_ms = 2000.0  # 2 —Å–µ–∫—É–Ω–¥—ã —Å—Ä–µ–¥–Ω–µ–µ
            
            return self.stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤: {e}")
            return self.stats
    
    def purge_queue(self, queue_name: str = None) -> int:
        """
        MON-007.7: –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        
        Args:
            queue_name: –ò–º—è –æ—á–µ—Ä–µ–¥–∏ (None –¥–ª—è –≤—Å–µ—Ö)
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        try:
            if not self.celery_app:
                logger.info("üìù Mock –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏")
                return 0
            
            if queue_name:
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
                purged = self.celery_app.control.purge()
                logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å {queue_name}: {purged} –∑–∞–¥–∞—á")
                return purged or 0
            else:
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏
                total_purged = 0
                queues = ["file_processing", "llm_processing", "data_validation", 
                         "sheets_writing", "notifications"]
                
                for queue in queues:
                    try:
                        purged = self.celery_app.control.purge()
                        total_purged += purged or 0
                    except:
                        continue
                
                logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏: {total_purged} –∑–∞–¥–∞—á")
                return total_purged
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return 0
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
    def _process_file_impl(self, file_path: str, user_id: int, options: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
        try:
            start_time = time.time()
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
            logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_path}")
            
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            file_size = os.path.getsize(file_path)
            logger.info(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            # –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–Ω–≥ (–∏–º–∏—Ç–∞—Ü–∏—è)
            time.sleep(1.0)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            
            # –≠—Ç–∞–ø 3: –í–∞–ª–∏–¥–∞—Ü–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è)
            time.sleep(0.5)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            
            # –≠—Ç–∞–ø 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            processing_time = int((time.time() - start_time) * 1000)
            
            result = {
                "status": "completed",
                "file_path": file_path,
                "user_id": user_id,
                "processing_time_ms": processing_time,
                "file_size_bytes": file_size,
                "rows_processed": 150,  # –ò–º–∏—Ç–∞—Ü–∏—è
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.successful_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            
            logger.info(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time}ms")
            return result
            
        except Exception as e:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
            self.stats.failed_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            self.stats.errors.append(f"File processing: {str(e)}")
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def _llm_processing_impl(self, products: List[Dict], options: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            start_time = time.time()
            
            logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º LLM –æ–±—Ä–∞–±–æ—Ç–∫—É {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º LLM –æ–±—Ä–∞–±–æ—Ç–∫—É
            time.sleep(len(products) * 0.1)  # 100ms –Ω–∞ —Ç–æ–≤–∞—Ä
            
            processing_time = int((time.time() - start_time) * 1000)
            
            result = {
                "status": "completed",
                "products_processed": len(products),
                "processing_time_ms": processing_time,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            self.stats.successful_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            
            logger.info(f"‚úÖ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time}ms")
            return result
            
        except Exception as e:
            self.stats.failed_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            self.stats.errors.append(f"LLM processing: {str(e)}")
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            raise
    
    def _data_validation_impl(self, data: List[Dict], options: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            start_time = time.time()
            
            logger.info(f"‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            time.sleep(0.5)
            
            processing_time = int((time.time() - start_time) * 1000)
            
            result = {
                "status": "completed",
                "records_validated": len(data),
                "valid_records": int(len(data) * 0.9),  # 90% –≤–∞–ª–∏–¥–Ω—ã–µ
                "invalid_records": int(len(data) * 0.1),  # 10% –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
                "processing_time_ms": processing_time,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            self.stats.successful_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time}ms")
            return result
            
        except Exception as e:
            self.stats.failed_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            self.stats.errors.append(f"Data validation: {str(e)}")
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _sheets_writing_impl(self, products: List[Dict], spreadsheet_id: str, 
                           options: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets"""
        try:
            start_time = time.time()
            
            logger.info(f"üìã –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ Sheets")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ Sheets
            time.sleep(len(products) * 0.02)  # 20ms –Ω–∞ —Ç–æ–≤–∞—Ä
            
            processing_time = int((time.time() - start_time) * 1000)
            
            result = {
                "status": "completed",
                "products_written": len(products),
                "spreadsheet_id": spreadsheet_id,
                "processing_time_ms": processing_time,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            self.stats.successful_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ Sheets –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time}ms")
            return result
            
        except Exception as e:
            self.stats.failed_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            self.stats.errors.append(f"Sheets writing: {str(e)}")
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Sheets: {e}")
            raise
    
    def _telegram_notification_impl(self, user_id: int, message: str, 
                                  options: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            start_time = time.time()
            
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            time.sleep(0.1)
            
            processing_time = int((time.time() - start_time) * 1000)
            
            result = {
                "status": "sent",
                "user_id": user_id,
                "message_length": len(message),
                "processing_time_ms": processing_time,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            self.stats.successful_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            
            logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {processing_time}ms")
            return result
            
        except Exception as e:
            self.stats.failed_tasks += 1
            self.stats.pending_tasks = max(0, self.stats.pending_tasks - 1)
            self.stats.errors.append(f"Telegram notification: {str(e)}")
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_global_celery_worker = None

def get_global_celery_worker() -> CeleryWorkerV2:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CeleryWorker"""
    global _global_celery_worker
    
    if _global_celery_worker is None:
        _global_celery_worker = CeleryWorkerV2()
    
    return _global_celery_worker

def init_global_celery_worker(app_name: str = "monito",
                             broker_url: str = "redis://localhost:6379/0",
                             result_backend: str = "redis://localhost:6379/0") -> CeleryWorkerV2:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ CeleryWorker —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    global _global_celery_worker
    
    _global_celery_worker = CeleryWorkerV2(
        app_name=app_name,
        broker_url=broker_url,
        result_backend=result_backend
    )
    
    return _global_celery_worker

# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def submit_file_async(file_path: str, user_id: int, options: Dict[str, Any] = None) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    worker = get_global_celery_worker()
    return worker.submit_file_processing(file_path, user_id, options)

def submit_llm_async(products: List[Dict], options: Dict[str, Any] = None) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    worker = get_global_celery_worker()
    return worker.submit_llm_processing(products, options)

def get_task_status(task_id: str) -> TaskResult:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    worker = get_global_celery_worker()
    return worker.get_task_result(task_id) 