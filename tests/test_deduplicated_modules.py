#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_base_parser():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º BaseParser...")
    
    from modules.base_parser import BaseParser
    
    parser = BaseParser()
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞
    assert parser._looks_like_product("Apple iPhone 14") == True
    assert parser._looks_like_product("123") == False
    assert parser._looks_like_price("15000") == True
    assert parser._looks_like_price("abc") == False
    assert parser._looks_like_unit("kg") == True
    assert parser._looks_like_unit("xyz") == False
    
    # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ü–µ–Ω—ã
    assert parser._clean_price("15,000") == 15000
    assert parser._clean_price("$100") == 100
    assert parser._clean_price("abc") == 0
    
    print("‚úÖ BaseParser —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_excel_parser():
    """–¢–µ—Å—Ç Excel –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º UniversalExcelParser...")
    
    from modules.universal_excel_parser import UniversalExcelParser
    
    parser = UniversalExcelParser()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    assert hasattr(parser, '_looks_like_product')
    assert hasattr(parser, '_looks_like_price')
    assert hasattr(parser, '_clean_price')
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    assert parser._looks_like_product("Samsung Galaxy S23") == True
    assert parser._clean_price("25000") == 25000
    
    print("‚úÖ UniversalExcelParser –Ω–∞—Å–ª–µ–¥—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_pdf_parser():
    """–¢–µ—Å—Ç PDF –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PDFParser...")
    
    from modules.pdf_parser import PDFParser
    
    parser = PDFParser()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    assert hasattr(parser, '_looks_like_product')
    assert hasattr(parser, '_looks_like_price')
    assert hasattr(parser, '_clean_price')
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    assert parser._looks_like_product("Coca Cola 330ml") == True
    assert parser._clean_price("12.50") == 12.5
    
    print("‚úÖ PDFParser –Ω–∞—Å–ª–µ–¥—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_ai_parser():
    """–¢–µ—Å—Ç AI –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º AITableParser...")
    
    from modules.ai_table_parser import AITableParser
    
    parser = AITableParser("test_key")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    assert hasattr(parser, '_looks_like_product')
    assert hasattr(parser, '_looks_like_price')
    assert hasattr(parser, '_clean_price')
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    assert parser._looks_like_product("Bread whole wheat") == True
    assert parser._clean_price("5.99") == 5.99
    
    print("‚úÖ AITableParser –Ω–∞—Å–ª–µ–¥—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_no_duplicates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π...")
    
    import modules.base_parser as base
    import modules.universal_excel_parser as excel
    import modules.pdf_parser as pdf
    import modules.ai_table_parser as ai
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ
    base_parser = base.BaseParser()
    excel_parser = excel.UniversalExcelParser()
    pdf_parser = pdf.PDFParser()
    ai_parser = ai.AITableParser("test")
    
    # –í—Å–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    test_value = "Test Product 100g"
    
    base_result = base_parser._looks_like_product(test_value)
    excel_result = excel_parser._looks_like_product(test_value)
    pdf_result = pdf_parser._looks_like_product(test_value)
    ai_result = ai_parser._looks_like_product(test_value)
    
    assert base_result == excel_result == pdf_result == ai_result
    
    print("‚úÖ –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ BaseParser")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    try:
        test_base_parser()
        test_excel_parser()
        test_pdf_parser()
        test_ai_parser()
        test_no_duplicates()
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
        print("‚úÖ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 