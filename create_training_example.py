#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import json
from pathlib import Path

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.training_data_manager import TrainingDataManager

def interactive_reference_creation():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üéì –°–û–ó–î–ê–ù–ò–ï –≠–¢–ê–õ–û–ù–ù–û–ì–û –ü–†–ò–ú–ï–†–ê –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    trainer = TrainingDataManager()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞
    example_name = input("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'indonesia_food_supplier'): ").strip()
    if not example_name:
        print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É Excel: ").strip()
    if not os.path.exists(file_path):
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {example_name}")
    print("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ª–æ–Ω–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
    reference_template = trainer.create_reference_template()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    print("\nüè™ –î–ê–ù–ù–´–ï –ü–û–°–¢–ê–í–©–ò–ö–ê:")
    supplier_data = {}
    
    supplier_data['name'] = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ").strip()
    supplier_data['phone'] = input("–¢–µ–ª–µ—Ñ–æ–Ω: ").strip()
    supplier_data['whatsapp'] = input("WhatsApp: ").strip()
    supplier_data['email'] = input("Email: ").strip()
    supplier_data['address'] = input("–ê–¥—Ä–µ—Å: ").strip()
    
    reference_template['supplier'] = supplier_data
    
    # –¢–æ–≤–∞—Ä—ã
    print("\nüì¶ –¢–û–í–ê–†–´:")
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –í–≤–µ–¥–∏—Ç–µ 'stop' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    
    products = []
    while True:
        print(f"\n--- –¢–æ–≤–∞—Ä {len(products) + 1} ---")
        
        original_name = input("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ").strip()
        if original_name.lower() == 'stop':
            break
        
        if not original_name:
            continue
        
        brand = input("–ë—Ä–µ–Ω–¥: ").strip()
        standardized_name = input("–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (EN): ").strip()
        size = input("–†–∞–∑–º–µ—Ä/–≤–µ—Å: ").strip()
        unit = input("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (g/ml/kg/l/pcs): ").strip()
        
        price_str = input("–¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ): ").strip()
        try:
            price = float(price_str) if price_str else 0
        except:
            price = 0
        
        currency = input("–í–∞–ª—é—Ç–∞ (IDR/USD/EUR): ").strip() or "IDR"
        category = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ").strip()
        
        product = {
            "original_name": original_name,
            "brand": brand or "unknown",
            "standardized_name": standardized_name or original_name,
            "size": size or "unknown",
            "unit": unit or "pcs",
            "price": price,
            "currency": currency,
            "category": category or "general",
            "confidence": 0.95
        }
        
        products.append(product)
        print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {original_name}")
    
    reference_template['products'] = products
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    print("\nüìã –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
    reference_template['metadata']['document_type'] = input("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ").strip() or "price_list"
    reference_template['metadata']['language'] = input("–Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ").strip() or "mixed"
    
    pages_str = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ").strip()
    try:
        reference_template['metadata']['total_pages'] = int(pages_str) if pages_str else 1
    except:
        reference_template['metadata']['total_pages'] = 1
    
    reference_template['metadata']['notes'] = input("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: ").strip()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
    result_file = trainer.save_training_example(file_path, reference_template, example_name)
    
    if result_file:
        print(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        print(f"üìÅ –§–∞–π–ª: {result_file}")
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_data.get('name', 'N/A')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"training_data/")
        print(f"‚îú‚îÄ‚îÄ original_files/{example_name}.xlsx")
        print(f"‚îú‚îÄ‚îÄ reference_data/{example_name}_reference.json")
        print(f"‚îî‚îÄ‚îÄ comparison_results/ (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

def load_from_json():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
    print("üìÅ –ó–ê–ì–†–£–ó–ö–ê –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–• –ò–ó JSON")
    print("=" * 50)
    
    trainer = TrainingDataManager()
    
    example_name = input("üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞: ").strip()
    json_file = input("üìÅ –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ").strip()
    original_file = input("üìÅ –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É Excel —Ñ–∞–π–ª—É: ").strip()
    
    if not os.path.exists(json_file):
        print("‚ùå JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not os.path.exists(original_file):
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            reference_data = json.load(f)
        
        result_file = trainer.save_training_example(original_file, reference_data, example_name)
        
        if result_file:
            print(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            print(f"üìÅ –§–∞–π–ª: {result_file}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")

def show_template():
    """–ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω–∞ JSON –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìã –®–ê–ë–õ–û–ù JSON –î–õ–Ø –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    trainer = TrainingDataManager()
    template = trainer.create_reference_template()
    
    print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω:")
    print(json.dumps(template, indent=2, ensure_ascii=False))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –≤ —Ñ–∞–π–ª
    template_file = "reference_template.json"
    with open(template_file, 'w', encoding='utf-8') as f:
        json.dump(template, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÅ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {template_file}")

def list_examples():
    """–°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üìö –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –≠–¢–ê–õ–û–ù–ù–´–ï –ü–†–ò–ú–ï–†–´")
    print("=" * 50)
    
    trainer = TrainingDataManager()
    examples = trainer.get_training_examples_list()
    
    if examples:
        for i, example in enumerate(examples, 1):
            print(f"{i}. {example}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            ref_data = trainer.load_reference_data(example)
            if ref_data:
                supplier_name = ref_data.get('supplier', {}).get('name', 'N/A')
                products_count = len(ref_data.get('products', []))
                print(f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}")
                print(f"   –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
            print()
    else:
        print("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        print("\nüéì –ú–ï–ù–ï–î–ñ–ï–† –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•")
        print("=" * 40)
        print("1. –°–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ JSON —Ñ–∞–π–ª–∞")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω JSON")
        print("4. –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == '1':
            interactive_reference_creation()
        elif choice == '2':
            load_from_json()
        elif choice == '3':
            show_template()
        elif choice == '4':
            list_examples()
        elif choice == '5':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()