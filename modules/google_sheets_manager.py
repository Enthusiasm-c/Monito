import os
import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
import gspread
from google.auth.exceptions import GoogleAuthError

logger = logging.getLogger(__name__)

class GoogleSheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        from dotenv import load_dotenv
        load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        self.client = None
        self.sheet = None
        self.credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'google_credentials.json')
        self.sheet_id = os.getenv('GOOGLE_SHEET_ID')
        self._initialize()
    
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if not os.path.exists(self.credentials_file):
                logger.warning(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}")
                return False
            
            if not self.sheet_id:
                logger.warning("GOOGLE_SHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API
            self.client = gspread.service_account(filename=self.credentials_file)
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            self.sheet = self.client.open_by_key(self.sheet_id)
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.sheet.title}")
            return True
            
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}")
            return False
        except GoogleAuthError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            return False
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self.client is not None and self.sheet is not None
    
    def get_or_create_worksheet(self, title: str) -> Optional[gspread.Worksheet]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞"""
        try:
            if not self.is_connected():
                logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                return None
            
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
                worksheet = self.sheet.worksheet(title)
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç: {title}")
                return worksheet
            except gspread.WorksheetNotFound:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
                worksheet = self.sheet.add_worksheet(title=title, rows=1000, cols=20)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç: {title}")
                return worksheet
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ {title}: {e}")
            return None
    
    def create_master_table(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
        try:
            worksheet = self.get_or_create_worksheet("Master Table")
            if not worksheet:
                return False
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            headers = [
                'Product Name (EN)',
                'Brand',
                'Size',
                'Unit',
                'Currency',
                'Category', 
                'First Added',
                'Last Updated'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if worksheet.row_count == 0 or not worksheet.get('A1'):
                worksheet.update('A1:H1', [headers])
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                worksheet.format('A1:H1', {
                    'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 1.0},
                    'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
                })
                
                logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False
    
    def add_supplier_columns(self, supplier_name: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        try:
            worksheet = self.get_or_create_worksheet("Master Table")
            if not worksheet:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = worksheet.row_values(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            price_col_name = f"{supplier_name}_Price"
            date_col_name = f"{supplier_name}_Updated"
            
            if price_col_name not in headers:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –∫–æ–Ω–µ—Ü
                next_col = len(headers) + 1
                
                new_headers = [price_col_name, date_col_name]
                range_name = f"{gspread.utils.rowcol_to_a1(1, next_col)}:{gspread.utils.rowcol_to_a1(1, next_col + 1)}"
                
                worksheet.update(range_name, [new_headers])
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                worksheet.format(range_name, {
                    'backgroundColor': {'red': 0.9, 'green': 0.6, 'blue': 0.2},
                    'textFormat': {'bold': True}
                })
                
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_name}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_name}: {e}")
            return False
    
    def _validate_product_data(self, product: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        name = product.get('standardized_name', '').strip()
        if not name or len(name) < 2:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        price = product.get('price', 0)
        try:
            price = float(price)
            if price <= 0:
                errors.append("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            elif price > 1000000:
                errors.append("–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ (>1,000,000)")
        except (ValueError, TypeError):
            errors.append("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            price = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        unit = product.get('unit', '').strip()
        valid_units = ['pcs', 'kg', 'l', 'm', 'box', 'pack', 'set', 'pair']
        if not unit:
            unit = 'pcs'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        elif unit not in valid_units:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            unit_mapping = {
                '—à—Ç': 'pcs', '—à—Ç—É–∫': 'pcs', 'piece': 'pcs',
                '–∫–≥': 'kg', '–∫–∏–ª–æ–≥—Ä–∞–º–º': 'kg',
                '–ª': 'l', '–ª–∏—Ç—Ä': 'l', 'liter': 'l',
                '–º': 'm', '–º–µ—Ç—Ä': 'm', 'meter': 'm',
                '–∫–æ—Ä–æ–±–∫–∞': 'box', '—É–ø–∞–∫–æ–≤–∫–∞': 'pack', '–ø–∞—Ä–∞': 'pair'
            }
            unit = unit_mapping.get(unit.lower(), 'pcs')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = product.get('category', '').strip()
        if not category:
            category = 'general'
        
        return {
            'valid': len(errors) == 0,
            'errors': errors,
            'cleaned_data': {
                'standardized_name': name,
                'brand': product.get('brand', 'unknown'),
                'size': product.get('size', 'unknown'),
                'price': price,
                'unit': unit,
                'currency': product.get('currency', 'USD'),
                'category': category,
                'confidence': product.get('confidence', 0.8),
                'original_name': product.get('original_name', name)
            }
        }

    def update_master_table(self, standardized_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            logger.info(f"üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets...")
            
            if not self.is_connected():
                logger.error(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                return {'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets'}
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not self.create_master_table():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É'}
            
            worksheet = self.get_or_create_worksheet("Master Table")
            supplier = standardized_data.get('supplier', {})
            products = standardized_data.get('products', [])
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(products)}")
            
            if not products:
                logger.error(f"‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return {'error': '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'}
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é {len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")
            validated_products = []
            validation_errors = []
            detailed_errors = []
            
            for i, product in enumerate(products):
                validation = self._validate_product_data(product)
                if validation['valid']:
                    validated_products.append(validation['cleaned_data'])
                    logger.debug(f"‚úÖ –¢–æ–≤–∞—Ä {i+1} –≤–∞–ª–∏–¥–µ–Ω: {product.get('standardized_name', product.get('original_name', 'N/A'))}")
                else:
                    error_details = f"–¢–æ–≤–∞—Ä {i+1} ({product.get('standardized_name', product.get('original_name', 'N/A'))}): {', '.join(validation['errors'])}"
                    validation_errors.append(error_details)
                    detailed_errors.append({
                        'index': i+1,
                        'name': product.get('standardized_name', product.get('original_name', 'N/A')),
                        'errors': validation['errors'],
                        'raw_data': product
                    })
                    logger.warning(f"‚ö†Ô∏è {error_details}")
            
            loss_count = len(products) - len(validated_products)
            loss_percentage = (loss_count / len(products) * 100) if len(products) > 0 else 0
            
            logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:")
            logger.info(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(validated_products)}/{len(products)} ({len(validated_products)/len(products)*100:.1f}%)")
            logger.info(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {loss_count}/{len(products)} ({loss_percentage:.1f}%)")
            
            if detailed_errors:
                logger.warning(f"üîç –î–ï–¢–ê–õ–ò –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–• –û–®–ò–ë–û–ö:")
                for error in detailed_errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    logger.warning(f"   ‚Ä¢ {error['name']}: {', '.join(error['errors'])}")
                if len(detailed_errors) > 5:
                    logger.warning(f"   ... –∏ –µ—â–µ {len(detailed_errors) - 5} –æ—à–∏–±–æ–∫")
            
            if not validated_products:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                return {'error': f'–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏: {"; ".join(validation_errors)}'}
            
            if validation_errors:
                logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã: {len(validation_errors)} –∏–∑ {len(products)}")
            
            # –ó–∞–º–µ–Ω—è–µ–º products –Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            products = validated_products
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier_name = self._clean_supplier_name(supplier.get('name', 'Unknown Supplier'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if not self.add_supplier_columns(supplier_name):
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            all_data = worksheet.get_all_records()
            headers = worksheet.row_values(1)
            
            # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
            try:
                price_col_idx = headers.index(f"{supplier_name}_Price") + 1
                date_col_idx = headers.index(f"{supplier_name}_Updated") + 1
            except ValueError:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'}
            
            stats = {
                'new_products': 0,
                'updated_prices': 0,
                'processed_products': 0
            }
            
            current_date = datetime.now().strftime('%Y-%m-%d')
            updates = []
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for product in products:
                try:
                    product_name = product.get('standardized_name', '')
                    price = product.get('price', 0)
                    unit = product.get('unit', 'pcs')
                    category = product.get('category', 'general')
                    
                    if not product_name or price <= 0:
                        continue
                    
                    # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    existing_row = None
                    for idx, row_data in enumerate(all_data):
                        if row_data.get('Product Name (EN)', '').lower() == product_name.lower():
                            existing_row = idx + 2  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ enumerate —Å 0, –∞ —Å—Ç—Ä–æ–∫–∏ —Å 1, –ø–ª—é—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                            break
                    
                    if existing_row:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                        updates.append({
                            'range': gspread.utils.rowcol_to_a1(existing_row, price_col_idx),
                            'values': [[price]]
                        })
                        updates.append({
                            'range': gspread.utils.rowcol_to_a1(existing_row, date_col_idx),
                            'values': [[current_date]]
                        })
                        updates.append({
                            'range': gspread.utils.rowcol_to_a1(existing_row, 8),  # Last Updated column (—Ç–µ–ø–µ—Ä—å H)
                            'values': [[current_date]]
                        })
                        stats['updated_prices'] += 1
                    else:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                        new_row = len(all_data) + 2  # +2 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å 1
                        
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                        row_data = [''] * len(headers)
                        if len(row_data) > 0: row_data[0] = product_name  # Product Name (EN)
                        if len(row_data) > 1: row_data[1] = product.get('brand', 'unknown')  # Brand
                        if len(row_data) > 2: row_data[2] = product.get('size', 'unknown')  # Size
                        if len(row_data) > 3: row_data[3] = unit  # Unit
                        if len(row_data) > 4: row_data[4] = product.get('currency', 'USD')  # Currency
                        if len(row_data) > 5: row_data[5] = category  # Category
                        if len(row_data) > 6: row_data[6] = current_date  # First Added
                        if len(row_data) > 7: row_data[7] = current_date  # Last Updated
                        if price_col_idx <= len(row_data): row_data[price_col_idx - 1] = price  # Supplier Price
                        if date_col_idx <= len(row_data): row_data[date_col_idx - 1] = current_date  # Supplier Updated
                        
                        updates.append({
                            'range': f"A{new_row}:{gspread.utils.rowcol_to_a1(new_row, len(headers))}",
                            'values': [row_data]
                        })
                        stats['new_products'] += 1
                    
                    stats['processed_products'] += 1
                    
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product.get('standardized_name', 'unknown')}: {e}")
                    continue
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–¥–Ω–∏–º batch –∑–∞–ø—Ä–æ—Å–æ–º
            if updates:
                worksheet.batch_update(updates)
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(updates)} —è—á–µ–µ–∫ –≤ Google Sheets")
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return {'error': str(e)}
    
    def create_supplier_summary(self, supplier_name: str, products: List[Dict]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        try:
            clean_name = self._clean_supplier_name(supplier_name)
            worksheet_title = f"Supplier_{clean_name}"
            
            worksheet = self.get_or_create_worksheet(worksheet_title)
            if not worksheet:
                return False
            
            # –û—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞
            worksheet.clear()
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                'Original Name',
                'Standardized Name',
                'Brand',
                'Size',
                'Price',
                'Currency',
                'Unit',
                'Category',
                'Confidence',
                'Added Date'
            ]
            
            # –î–∞–Ω–Ω—ã–µ
            data = [headers]
            current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            for product in products:
                row = [
                    product.get('original_name', ''),
                    product.get('standardized_name', ''),
                    product.get('brand', 'unknown'),
                    product.get('size', 'unknown'),
                    product.get('price', 0),
                    product.get('currency', 'USD'),
                    product.get('unit', 'pcs'),
                    product.get('category', 'general'),
                    product.get('confidence', 0),
                    current_date
                ]
                data.append(row)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞
            worksheet.update(f'A1:{gspread.utils.rowcol_to_a1(len(data), len(headers))}', data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            worksheet.format('A1:J1', {
                'backgroundColor': {'red': 0.2, 'green': 0.8, 'blue': 0.2},
                'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
            })
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {worksheet_title}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_name}: {e}")
            return False
    
    def get_sheet_url(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ç–∞–±–ª–∏—Ü—ã"""
        if self.sheet:
            return f"https://docs.google.com/spreadsheets/d/{self.sheet.id}"
        return None
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if not self.is_connected():
                return {'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets'}
            
            worksheet = self.get_or_create_worksheet("Master Table")
            if not worksheet:
                return {'error': '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            all_data = worksheet.get_all_records()
            headers = worksheet.row_values(1)
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (—Å—Ç–æ–ª–±—Ü—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ _Price)
            suppliers = [h.replace('_Price', '') for h in headers if h.endswith('_Price')]
            
            # –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = set()
            for row in all_data:
                if row.get('Category'):
                    categories.add(row['Category'])
            
            return {
                'total_products': len(all_data),
                'total_suppliers': len(suppliers),
                'categories': list(categories),
                'suppliers': suppliers,
                'sheet_url': self.get_sheet_url(),
                'last_updated': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def _clean_supplier_name(self, name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –ª–∏—Å—Ç–æ–≤"""
        import re
        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_name = re.sub(r'[^\w\s\-]', '', str(name))
        # –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        clean_name = re.sub(r'\s+', '_', clean_name)
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        clean_name = clean_name[:30]
        return clean_name.strip('_') or 'Unknown_Supplier'
    
    def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if not self.is_connected():
                return {
                    'status': 'error',
                    'message': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets',
                    'suggestions': [
                        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª google_credentials.json',
                        '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ GOOGLE_SHEET_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env',
                        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ'
                    ]
                }
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            sheet_info = {
                'title': self.sheet.title,
                'id': self.sheet.id,
                'url': self.get_sheet_url(),
                'worksheets': [ws.title for ws in self.sheet.worksheets()]
            }
            
            return {
                'status': 'success',
                'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets –∞–∫—Ç–∏–≤–Ω–æ',
                'sheet_info': sheet_info
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}',
                'suggestions': [
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
                    '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Service Account –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ',
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å GOOGLE_SHEET_ID'
                ]
            }
    
    def create_unified_price_comparison(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω –æ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏...")
            
            if not self.is_connected():
                return {'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets'}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Master Table
            master_worksheet = self.get_or_create_worksheet("Master Table")
            if not master_worksheet:
                return {'error': '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            all_data = master_worksheet.get_all_records()
            headers = master_worksheet.row_values(1)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_data)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ _Price)
            supplier_columns = {}
            for i, header in enumerate(headers):
                if header.endswith('_Price'):
                    supplier_name = header.replace('_Price', '')
                    supplier_columns[supplier_name] = i
            
            logger.info(f"üè™ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len(supplier_columns)} - {list(supplier_columns.keys())}")
            
            if not supplier_columns:
                return {'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'}
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
            comparison_worksheet = self.get_or_create_worksheet("Price Comparison")
            comparison_worksheet.clear()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            comparison_headers = [
                'Product Name',
                'Category', 
                'Unit',
                'Best Price',
                'Best Supplier',
                'Price Difference %'
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            for supplier in sorted(supplier_columns.keys()):
                comparison_headers.extend([f'{supplier}_Price', f'{supplier}_Updated'])
            
            comparison_headers.extend(['Average Price', 'Suppliers Count', 'Last Updated'])
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            comparison_data = [comparison_headers]
            stats = {
                'total_products': len(all_data),
                'products_with_prices': 0,
                'suppliers_count': len(supplier_columns),
                'average_price_difference': 0
            }
            
            price_differences = []
            
            for product_row in all_data:
                product_name = product_row.get('Product Name (EN)', '')
                category = product_row.get('Category', 'general')
                unit = product_row.get('Unit', 'pcs')
                
                if not product_name:
                    continue
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –æ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                supplier_prices = {}
                supplier_dates = {}
                
                for supplier, col_index in supplier_columns.items():
                    price_value = product_row.get(f'{supplier}_Price', '')
                    date_value = product_row.get(f'{supplier}_Updated', '')
                    
                    if price_value and str(price_value).replace('.', '').replace(',', '').isdigit():
                        try:
                            price = float(str(price_value).replace(',', ''))
                            if price > 0:
                                supplier_prices[supplier] = price
                                supplier_dates[supplier] = date_value
                        except ValueError:
                            continue
                
                if not supplier_prices:
                    continue
                
                stats['products_with_prices'] += 1
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é (–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é) —Ü–µ–Ω—É
                best_price = min(supplier_prices.values())
                best_supplier = min(supplier_prices.keys(), key=lambda k: supplier_prices[k])
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏ —Ä–∞–∑–±—Ä–æ—Å
                average_price = sum(supplier_prices.values()) / len(supplier_prices)
                max_price = max(supplier_prices.values())
                price_difference_pct = ((max_price - best_price) / best_price * 100) if best_price > 0 else 0
                price_differences.append(price_difference_pct)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
                row_data = [
                    product_name,
                    category,
                    unit,
                    f"{best_price:,.0f}",
                    best_supplier,
                    f"{price_difference_pct:.1f}%"
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                for supplier in sorted(supplier_columns.keys()):
                    if supplier in supplier_prices:
                        row_data.extend([
                            f"{supplier_prices[supplier]:,.0f}",
                            supplier_dates.get(supplier, '')
                        ])
                    else:
                        row_data.extend(['', ''])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                row_data.extend([
                    f"{average_price:,.0f}",
                    str(len(supplier_prices)),
                    max(supplier_dates.values()) if supplier_dates else ''
                ])
                
                comparison_data.append(row_data)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∑–∞—Ç–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            comparison_data[1:] = sorted(comparison_data[1:], key=lambda x: (x[1], x[0]))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
            range_end = gspread.utils.rowcol_to_a1(len(comparison_data), len(comparison_headers))
            comparison_worksheet.update(f'A1:{range_end}', comparison_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            comparison_worksheet.format('A1:' + gspread.utils.rowcol_to_a1(1, len(comparison_headers)), {
                'backgroundColor': {'red': 0.1, 'green': 0.4, 'blue': 0.8},
                'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
            })
            
            # –í—ã–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ª—É—á—à–∏—Ö —Ü–µ–Ω
            if len(comparison_data) > 1:
                best_price_range = f'D2:D{len(comparison_data)}'
                comparison_worksheet.format(best_price_range, {
                    'backgroundColor': {'red': 0.9, 'green': 1.0, 'blue': 0.9},
                    'textFormat': {'bold': True}
                })
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if price_differences:
                stats['average_price_difference'] = sum(price_differences) / len(price_differences)
            
            logger.info("‚úÖ –°–≤–æ–¥–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {stats['products_with_prices']}")
            logger.info(f"   üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {stats['suppliers_count']}")
            logger.info(f"   üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–±—Ä–æ—Å —Ü–µ–Ω: {stats['average_price_difference']:.1f}%")
            
            return {
                'success': True,
                'worksheet_name': 'Price Comparison',
                'stats': stats,
                'sheet_url': self.get_sheet_url()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")
            return {'error': str(e)}
    
    def get_price_comparison_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Ü–µ–Ω"""
        try:
            if not self.is_connected():
                return {'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets'}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            try:
                comparison_worksheet = self.sheet.worksheet("Price Comparison")
                data = comparison_worksheet.get_all_records()
            except gspread.WorksheetNotFound:
                return {'error': '–õ–∏—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.'}
            
            if not data:
                return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω'}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            categories = {}
            total_savings = 0
            suppliers = set()
            
            for row in data:
                category = row.get('Category', 'general')
                if category not in categories:
                    categories[category] = {'count': 0, 'best_deals': []}
                
                categories[category]['count'] += 1
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                for key in row.keys():
                    if key.endswith('_Price') and row[key]:
                        supplier = key.replace('_Price', '')
                        suppliers.add(supplier)
            
            return {
                'total_products': len(data),
                'categories': len(categories),
                'categories_breakdown': categories,
                'suppliers_count': len(suppliers),
                'suppliers': list(suppliers),
                'sheet_url': self.get_sheet_url()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {'error': str(e)}