#!/usr/bin/env python3
"""
MON-S02: Simple Test Suite (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
"""

import os
import sys
import time
import json
import hashlib
import tempfile
from pathlib import Path
from typing import Dict, Any, Optional, Tuple

def test_basic_file_fingerprinting():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ fingerprinting —Ñ–∞–π–ª–æ–≤"""
    
    print("üìã –¢–µ—Å—Ç file fingerprinting...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        f.write("id,name,price\n1,Product,100\n")
        test_file = Path(f.name)
    
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º hash —Ñ–∞–π–ª–∞
        def compute_file_hash(file_path):
            hash_md5 = hashlib.md5()
            with open(file_path, 'rb') as f:
                hash_md5.update(f.read())
            return hash_md5.hexdigest()
        
        # –î–≤–∞ –≤—ã–∑–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π hash
        hash1 = compute_file_hash(test_file)
        hash2 = compute_file_hash(test_file)
        
        assert hash1 == hash2, "Hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
        with open(test_file, 'a') as f:
            f.write("2,Another,200\n")
        
        hash3 = compute_file_hash(test_file)
        assert hash1 != hash3, "Hash –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"
        
        print("  ‚úÖ File fingerprinting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    finally:
        if test_file.exists():
            test_file.unlink()

def test_task_fingerprint_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –∑–∞–¥–∞—á"""
    
    print("üìã –¢–µ—Å—Ç task fingerprint generation...")
    
    def generate_task_fingerprint(file_path, task_type, user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fingerprint –¥–ª—è –∑–∞–¥–∞—á–∏"""
        data = {
            'task_type': task_type,
            'file_path': str(file_path),
            'file_size': file_path.stat().st_size if file_path.exists() else 0,
            'user_id': user_id or 'anonymous'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º hash —Ñ–∞–π–ª–∞
        if file_path.exists():
            hash_md5 = hashlib.md5()
            with open(file_path, 'rb') as f:
                hash_md5.update(f.read())
            data['file_hash'] = hash_md5.hexdigest()
        
        # –°–æ–∑–¥–∞–µ–º fingerprint
        json_str = json.dumps(data, sort_keys=True)
        fingerprint = hashlib.md5(json_str.encode()).hexdigest()
        
        return f"task_fingerprint:{fingerprint}"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        f.write("test,data\n1,2\n")
        test_file = Path(f.name)
    
    try:
        # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π fingerprint
        fp1 = generate_task_fingerprint(test_file, 'process_file', 'user1')
        fp2 = generate_task_fingerprint(test_file, 'process_file', 'user1')
        assert fp1 == fp2, "Fingerprint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"
        
        # –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ fingerprints
        fp3 = generate_task_fingerprint(test_file, 'process_file', 'user2')
        assert fp1 != fp3, "–†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ fingerprints"
        
        # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ fingerprints
        fp4 = generate_task_fingerprint(test_file, 'another_task', 'user1')
        assert fp1 != fp4, "–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ fingerprints"
        
        print("  ‚úÖ Task fingerprint generation —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    finally:
        if test_file.exists():
            test_file.unlink()

def test_simple_deduplication():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç–∏"""
    
    print("üìã –¢–µ—Å—Ç simple deduplication...")
    
    class SimpleTaskRegistry:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–µ—Å—Ç—Ä –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏"""
        
        def __init__(self):
            self.tasks = {}  # fingerprint -> task_info
        
        def register_task(self, fingerprint, task_id):
            """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É"""
            self.tasks[fingerprint] = {
                'task_id': task_id,
                'status': 'pending',
                'created_at': time.time()
            }
        
        def check_duplicate(self, fingerprint):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
            return self.tasks.get(fingerprint)
        
        def update_status(self, fingerprint, status, result=None):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
            if fingerprint in self.tasks:
                self.tasks[fingerprint]['status'] = status
                if result:
                    self.tasks[fingerprint]['result'] = result
    
    registry = SimpleTaskRegistry()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        f.write("id,name\n1,test\n")
        test_file1 = Path(f.name)
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        f.write("id,name\n2,test\n")  # –î—Ä—É–≥–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        test_file2 = Path(f.name)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fingerprints
        def make_fingerprint(file_path, user_id):
            content_hash = hashlib.md5(file_path.read_bytes()).hexdigest()
            data = f"{file_path.name}:{content_hash}:{user_id}"
            return hashlib.md5(data.encode()).hexdigest()
        
        fp1 = make_fingerprint(test_file1, 'user1')
        fp2 = make_fingerprint(test_file1, 'user1')  # –¢–æ—Ç –∂–µ —Ñ–∞–π–ª, —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        fp3 = make_fingerprint(test_file2, 'user1')  # –î—Ä—É–≥–æ–π —Ñ–∞–π–ª
        fp4 = make_fingerprint(test_file1, 'user2')  # –¢–æ—Ç –∂–µ —Ñ–∞–π–ª, –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        # Fingerprints –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
        assert fp1 == fp2, "–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π fingerprint"
        assert fp1 != fp3, "–†–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ fingerprints"
        assert fp1 != fp4, "–†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ fingerprints"
        
        # –¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        # –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        registry.register_task(fp1, 'task_001')
        duplicate = registry.check_duplicate(fp1)
        assert duplicate is not None, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏—Å—å"
        assert duplicate['task_id'] == 'task_001'
        
        # –ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        duplicate2 = registry.check_duplicate(fp1)
        assert duplicate2['task_id'] == 'task_001', "–î–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏—Å—å —Ç–∞ –∂–µ –∑–∞–¥–∞—á–∞"
        
        # –î—Ä—É–≥–æ–π —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è
        duplicate3 = registry.check_duplicate(fp3)
        assert duplicate3 is None, "–î—Ä—É–≥–æ–π —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        
        print("  ‚úÖ Simple deduplication —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    finally:
        if test_file1.exists():
            test_file1.unlink()
        if test_file2.exists():
            test_file2.unlink()

def test_idempotency_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    
    print("üìã –¢–µ—Å—Ç idempotency logic...")
    
    def simulate_idempotent_operation(operation_id, operations_cache):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if operation_id in operations_cache:
            return operations_cache[operation_id], True  # result, is_duplicate
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = f"result_for_{operation_id}"
        operations_cache[operation_id] = result
        
        return result, False  # result, is_duplicate
    
    cache = {}
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    result1, is_dup1 = simulate_idempotent_operation('op_123', cache)
    assert not is_dup1, "–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º"
    assert result1 == "result_for_op_123"
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–¥—É–±–ª–∏–∫–∞—Ç)
    result2, is_dup2 = simulate_idempotent_operation('op_123', cache)
    assert is_dup2, "–í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º"
    assert result2 == result1, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º –∂–µ"
    
    # –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ (–¥—É–±–ª–∏–∫–∞—Ç)
    result3, is_dup3 = simulate_idempotent_operation('op_123', cache)
    assert is_dup3, "–¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º"
    assert result3 == result1, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º –∂–µ"
    
    # –î—Ä—É–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    result4, is_dup4 = simulate_idempotent_operation('op_456', cache)
    assert not is_dup4, "–î—Ä—É–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º"
    assert result4 != result1, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–≥–∏–º"
    
    print("  ‚úÖ Idempotency logic —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_retry_mechanisms():
    """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    
    print("üìã –¢–µ—Å—Ç retry mechanisms...")
    
    class RetryTracker:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        def __init__(self, max_retries=3):
            self.attempts = {}  # task_id -> count
            self.max_retries = max_retries
        
        def should_retry(self, task_id, failed=False):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å"""
            if task_id not in self.attempts:
                self.attempts[task_id] = 0
            
            if failed:
                self.attempts[task_id] += 1
            
            return self.attempts[task_id] < self.max_retries
        
        def get_attempt_count(self, task_id):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"""
            return self.attempts.get(task_id, 0)
    
    tracker = RetryTracker(max_retries=3)
    
    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–∞–ª–∞)
    assert tracker.should_retry('task_1'), "–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
    assert tracker.get_attempt_count('task_1') == 0, "–ü–æ–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –±—ã–ª–æ"
    
    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ–≤–∞–ª
    assert tracker.should_retry('task_1', failed=True), "–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω"
    assert tracker.get_attempt_count('task_1') == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞"
    
    # –í—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–∞–ª  
    assert tracker.should_retry('task_1', failed=True), "–ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω"
    assert tracker.get_attempt_count('task_1') == 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏"
    
    # –¢—Ä–µ—Ç–∏–π –ø—Ä–æ–≤–∞–ª - –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–µ—â–µ–Ω (–¥–æ—Å—Ç–∏–≥–ª–∏ max_retries=3)
    assert not tracker.should_retry('task_1', failed=True), "–ü–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–µ—â–µ–Ω"
    assert tracker.get_attempt_count('task_1') == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä—ã —Ç–æ–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã
    assert not tracker.should_retry('task_1'), "–ü–æ–≤—Ç–æ—Ä—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"
    
    print("  ‚úÖ Retry mechanisms —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_file_modification_detection():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞"""
    
    print("üìã –¢–µ—Å—Ç file modification detection...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        f.write("id,name\n1,test\n")
        test_file = Path(f.name)
    
    try:
        # –ü–µ—Ä–≤—ã–π hash
        def file_fingerprint(path):
            return hashlib.md5(path.read_bytes()).hexdigest()
        
        fp1 = file_fingerprint(test_file)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        time.sleep(0.1)
        
        # –¢–æ—Ç –∂–µ —Ñ–∞–π–ª –¥–∞–µ—Ç —Ç–æ—Ç –∂–µ hash
        fp2 = file_fingerprint(test_file)
        assert fp1 == fp2, "–ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å —Ç–æ—Ç –∂–µ hash"
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
        with open(test_file, 'a') as f:
            f.write("2,another\n")
        
        fp3 = file_fingerprint(test_file)
        assert fp1 != fp3, "–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –¥—Ä—É–≥–æ–π hash"
        
        print("  ‚úÖ File modification detection —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    finally:
        if test_file.exists():
            test_file.unlink()

def run_mon_s02_simple_tests():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ MON-S02"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ MON-S02 Simple Tests (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)")
    print("=" * 60)
    
    tests = [
        test_basic_file_fingerprinting,
        test_task_fingerprint_generation,
        test_simple_deduplication,
        test_idempotency_logic,
        test_retry_mechanisms,
        test_file_modification_detection
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}")
            failed += 1
    
    total = len(tests)
    success_rate = (passed / total) * 100
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ MON-S02 SIMPLE TESTS")
    print("=" * 40)
    print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DoD –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    print(f"\nüìã Definition of Done –¥–ª—è MON-S02:")
    
    dod_criteria = [
        ("Task deduplication", success_rate >= 80),
        ("Idempotent operations", success_rate >= 80),
        ("Task fingerprinting", success_rate >= 80),
        ("Recovery mechanisms", success_rate >= 80)
    ]
    
    dod_passed = 0
    for criterion, status in dod_criteria:
        if status:
            print(f"  ‚úÖ {criterion}")
            dod_passed += 1
        else:
            print(f"  ‚ùå {criterion}")
    
    dod_success_rate = (dod_passed / len(dod_criteria)) * 100
    print(f"\nüéØ DoD Success Rate: {dod_success_rate:.1f}%")
    
    if success_rate >= 80 and dod_success_rate >= 75:
        print(f"\nüéâ MON-S02 –≥–æ—Ç–æ–≤ –∫ production!")
        print(f"‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
    else:
        print(f"\n‚ö†Ô∏è MON-S02 —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

if __name__ == "__main__":
    success = run_mon_s02_simple_tests()
    exit(0 if success else 1) 