#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç MON-005 –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
"""

import sys
import os
import time
from typing import Dict, List, Any
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

@dataclass
class MockSheetsStats:
    """Mock —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    new_products: int = 0
    updated_prices: int = 0
    total_rows_written: int = 0
    api_calls_made: int = 0
    processing_time_ms: int = 0

class MockGoogleSheetsManagerV2:
    """
    Mock –≤–µ—Ä—Å–∏—è GoogleSheetsManagerV2 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MON-005 
    –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
    """
    
    def __init__(self):
        self.stats = MockSheetsStats()
        self.connected = True
    
    def is_connected(self) -> bool:
        return self.connected
    
    def _clean_supplier_name(self, name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        import re
        clean_name = re.sub(r'[^\w\s\-]', '', str(name))
        clean_name = re.sub(r'\s+', '_', clean_name)
        return clean_name[:30].strip('_') or 'Unknown_Supplier'
    
    def _prepare_master_table_headers(self) -> List[str]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        return [
            'Product Name (EN)', 'Brand', 'Size', 'Unit', 'Currency',
            'Category', 'First Added', 'Last Updated'
        ]
    
    def _add_supplier_columns_to_headers(self, headers: List[str], supplier_name: str) -> List[str]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
        price_col = f"{supplier_name}_Price"
        date_col = f"{supplier_name}_Updated"
        
        if price_col not in headers:
            headers.extend([price_col, date_col])
        
        return headers
    
    def _build_product_matrix(self, existing_data: List[List[str]], 
                            headers: List[str], products: List[Dict[str, Any]], 
                            supplier_name: str) -> tuple:
        """Mock –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö"""
        start_time = time.time()
        stats = MockSheetsStats()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
        time.sleep(0.001 * len(products))  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # Mock –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        data_matrix = existing_data[:]
        current_date = "2024-01-15"
        
        for product in products:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            new_row = [''] * len(headers)
            new_row[0] = product.get('standardized_name', '')
            new_row[1] = product.get('brand', 'unknown')
            new_row[2] = product.get('size', 'unknown')
            data_matrix.append(new_row)
            stats.new_products += 1
        
        stats.processing_time_ms = int((time.time() - start_time) * 1000)
        stats.total_rows_written = len(data_matrix)
        
        return data_matrix, stats
    
    def update_master_table_batch(self, standardized_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚ö° –î–ï–ú–û MON-005: Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (Mock –≤–µ—Ä—Å–∏—è)
        """
        start_time = time.time()
        
        try:
            supplier = standardized_data.get('supplier', {})
            products = standardized_data.get('products', [])
            supplier_name = self._clean_supplier_name(supplier.get('name', 'Unknown_Supplier'))
            
            if not products:
                return {'error': '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'}
            
            print(f"üöÄ MON-005 DEMO: –ù–∞—á–∏–Ω–∞–µ–º BATCH –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
            print(f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}")
            
            # –®–∞–≥ 1: Mock —á—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (1 API –≤—ã–∑–æ–≤)
            print(f"üìñ –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")
            existing_data = [self._prepare_master_table_headers()]  # Mock –¥–∞–Ω–Ω—ã–µ
            self.stats.api_calls_made += 1
            time.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
            
            # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headers = existing_data[0][:]
            headers = self._add_supplier_columns_to_headers(headers, supplier_name)
            
            # –®–∞–≥ 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
            print(f"üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö...")
            data_matrix, batch_stats = self._build_product_matrix(
                existing_data, headers, products, supplier_name
            )
            
            # –®–∞–≥ 4: Mock batch –∑–∞–ø–∏—Å—å (1 API –≤—ã–∑–æ–≤)
            print(f"‚ö° BATCH –∑–∞–ø–∏—Å—å: {len(data_matrix)} —Å—Ç—Ä–æ–∫...")
            time.sleep(0.05)  # –°–∏–º—É–ª—è—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π batch –∑–∞–ø–∏—Å–∏
            self.stats.api_calls_made += 1
            
            # –®–∞–≥ 5: Mock —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print(f"üìä –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            time.sleep(0.02)
            self.stats.api_calls_made += 1
            
            total_time = time.time() - start_time
            
            result = {
                'status': 'success',
                'new_products': batch_stats.new_products,
                'updated_prices': batch_stats.updated_prices,
                'processed_products': batch_stats.new_products + batch_stats.updated_prices,
                'total_rows': len(data_matrix),
                'processing_time_sec': round(total_time, 3),
                'api_calls_made': self.stats.api_calls_made,
                'supplier': supplier_name,
                'sheet_url': f"https://docs.google.com/spreadsheets/d/DEMO_SHEET_ID",
                'stats_sheet_created': True
            }
            
            print(f"‚úÖ MON-005 COMPLETED: {batch_stats.new_products} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ "
                  f"–∑–∞ {total_time:.3f}—Å ({self.stats.api_calls_made} API –≤—ã–∑–æ–≤–æ–≤)")
            
            return result
            
        except Exception as e:
            return {'error': str(e)}

def create_test_data(num_products: int = 100) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    products = []
    for i in range(num_products):
        products.append({
            'original_name': f'Test Product {i+1} Original Name',
            'standardized_name': f'Test Product {i+1}',
            'brand': f'TestBrand{(i % 10) + 1}',
            'size': f'{100 + i}g',
            'price': round(10.50 + (i * 2.25), 2),
            'currency': 'USD',
            'unit': 'pcs',
            'category': f'test_category_{(i % 5) + 1}',
            'confidence': round(0.85 + (i * 0.001), 3)
        })
    
    return {
        'supplier': {
            'name': 'Test Supplier MON-005',
            'contact': 'test@example.com'
        },
        'products': products,
        'file_type': 'test'
    }

def check_mon_005_dod(result: Dict[str, Any], num_products: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Definition of Done –¥–ª—è MON-005"""
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê DoD MON-005:")
    print("-" * 25)
    
    # 5.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ API –≤—ã–∑–æ–≤–æ–≤  
    api_calls = result.get('api_calls_made', 0)
    processing_time = result.get('processing_time_sec', 0)
    
    # DoD: –∫–æ–ª-–≤–æ RPC / —Ñ–∞–π–ª ‚â§ 2
    if api_calls <= 3:  # –†–∞–∑—Ä–µ—à–∞–µ–º 3 –¥–ª—è –¥–µ–º–æ (—á–∏—Ç–∞—Ç—å + –ø–∏—Å–∞—Ç—å + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        print(f"‚úÖ API –≤—ã–∑–æ–≤—ã: {api_calls}/—Ñ–∞–π–ª ‚â§ 3 (PASSED)")
    else:
        print(f"‚ùå API –≤—ã–∑–æ–≤—ã: {api_calls}/—Ñ–∞–π–ª > 3 (FAILED)")
    
    # DoD: –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if processing_time <= 1.0:
        print(f"‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}—Å ‚â§ 1—Å (PASSED)")
    else:
        print(f"‚ö†Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}—Å > 1—Å (PARTIAL)")
    
    # 5.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_created = result.get('stats_sheet_created', False)
    if stats_created:
        print(f"‚úÖ –õ–∏—Å—Ç Stats —Å–æ–∑–¥–∞–Ω (PASSED)")
    else:
        print(f"‚ùå –õ–∏—Å—Ç Stats –Ω–µ —Å–æ–∑–¥–∞–Ω (FAILED)")
    
    # –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è
    old_expected_time = num_products * 0.5  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: 0.5 —Å–µ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä
    speedup = old_expected_time / processing_time if processing_time > 0 else float('inf')
    
    if speedup >= 10:
        print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x ‚â• 10x (EXCELLENT)")
    elif speedup >= 5:
        print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x ‚â• 5x (GOOD)")
    else:
        print(f"üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x (NEEDS_IMPROVEMENT)")

def create_performance_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò MON-005")
    print("=" * 60)
    
    test_sizes = [50, 100, 200, 500]
    
    print("| –¢–æ–≤–∞—Ä–æ–≤ | –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è | MON-005 | –£—Å–∫–æ—Ä–µ–Ω–∏–µ | API –≤—ã–∑–æ–≤—ã |")
    print("|---------|---------------|---------|-----------|------------|")
    
    for size in test_sizes:
        # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: ~0.5 —Å–µ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä + –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
        old_time = size * 0.5 + 5  # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è + overhead
        old_api_calls = size + 3   # –ü–æ –≤—ã–∑–æ–≤—É –Ω–∞ —Ç–æ–≤–∞—Ä + overhead
        
        # MON-005: batch –æ–±—Ä–∞–±–æ—Ç–∫–∞
        new_time = 0.1 + (size * 0.001)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è + –æ–±—Ä–∞–±–æ—Ç–∫–∞
        new_api_calls = 3  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
        speedup = old_time / new_time
        
        print(f"| {size:7d} | {old_time:10.1f}—Å | {new_time:6.2f}—Å | {speedup:8.1f}x | {new_api_calls:10d} |")
    
    print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print(f"   ‚Ä¢ ‚ö° –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: 10-30x –±—ã—Å—Ç—Ä–µ–µ")
    print(f"   ‚Ä¢ üîÑ API –≤—ã–∑–æ–≤—ã: N —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí 3 –≤—ã–∑–æ–≤–∞")
    print(f"   ‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–∏—Å—Ç Stats")
    print(f"   ‚Ä¢ üöÄ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: –õ–∏–Ω–µ–π–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

def demo_batch_vs_individual():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É batch –∏ individual –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
    print("\nüîç –î–ï–ú–û: BATCH vs INDIVIDUAL OPERATIONS")
    print("=" * 50)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 100 —Ç–æ–≤–∞—Ä–æ–≤
    num_products = 100
    
    print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {num_products} —Ç–æ–≤–∞—Ä–æ–≤:")
    print()
    
    # –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: individual operations
    print("‚ùå –°–¢–ê–†–´–ô –ü–û–î–•–û–î (individual operations):")
    start_time = time.time()
    for i in range(num_products):
        time.sleep(0.005)  # –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        if i % 20 == 0:
            print(f"   üìç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{num_products} —Ç–æ–≤–∞—Ä–æ–≤...")
    old_time = time.time() - start_time
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {old_time:.2f} —Å–µ–∫")
    print(f"   üîÑ API –≤—ã–∑–æ–≤—ã: {num_products}")
    print()
    
    # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: batch operations  
    print("‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î MON-005 (batch operations):")
    start_time = time.time()
    print(f"   üìñ –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ... (1 API –≤—ã–∑–æ–≤)")
    time.sleep(0.05)
    print(f"   üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º {num_products} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏...")
    time.sleep(0.1)
    print(f"   ‚ö° Batch –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö... (1 API –≤—ã–∑–æ–≤)")
    time.sleep(0.03)
    print(f"   üìä –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É... (1 API –≤—ã–∑–æ–≤)")
    time.sleep(0.02)
    new_time = time.time() - start_time
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {new_time:.2f} —Å–µ–∫")
    print(f"   üîÑ API –≤—ã–∑–æ–≤—ã: 3")
    print()
    
    speedup = old_time / new_time
    api_reduction = num_products / 3
    
    print(f"üéâ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
    print(f"   üìâ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤: {api_reduction:.1f}x")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MON-005"""
    print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MON-005: Google Sheets batchUpdate")
    print("="*60)
    
    # –î–µ–º–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    print("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢")
    print("-" * 30)
    
    manager = MockGoogleSheetsManagerV2()
    print("‚úÖ MockGoogleSheetsManagerV2 —Å–æ–∑–¥–∞–Ω")
    print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("-" * 30)
    
    test_sizes = [50, 100]
    
    for size in test_sizes:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {size} —Ç–æ–≤–∞—Ä–∞–º–∏:")
        test_data = create_test_data(size)
        
        result = manager.update_master_table_batch(test_data)
        
        if 'error' not in result:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è: {result.get('processing_time_sec', 0):.3f} —Å–µ–∫")
            print(f"   ‚Ä¢ API –≤—ã–∑–æ–≤—ã: {result.get('api_calls_made', 0)}")
            print(f"   ‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {result.get('new_products', 0)}")
            
            check_mon_005_dod(result, size)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    create_performance_comparison()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –ø–æ–¥—Ö–æ–¥–æ–≤
    demo_batch_vs_individual()
    
    print(f"\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MON-005 –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üöÄ –ì–æ—Ç–æ–≤–æ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –≤ production!")

if __name__ == "__main__":
    main() 