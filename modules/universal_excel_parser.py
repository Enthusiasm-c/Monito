#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª—é–±—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π
"""

import pandas as pd
import re
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple

logger = logging.getLogger(__name__)

class UniversalExcelParser:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel –¥–ª—è –ª—é–±—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω
        self.product_patterns = [
            r'[–∞-—è—ëa-z]{3,}.*\d+.*[–∞-—è—ëa-z]',  # –¢–µ–∫—Å—Ç —Å —á–∏—Å–ª–∞–º–∏ –∏ –±—É–∫–≤–∞–º–∏
            r'[–∞-—è—ëa-z]{5,}',  # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
            r'.*[–∞-—è—ëa-z]{3,}.*[–∞-—è—ëa-z]{3,}',  # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤
        ]
        
        self.price_patterns = [
            r'^\d{3,}\.?\d*$',  # –ß–∏—Å–ª–∞ –æ—Ç 100
            r'^\d{1,3}[\s,]\d{3}.*$',  # –ß–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        ]
        
        self.common_units = [
            'kg', 'g', 'ml', 'l', 'pcs', 'pack', 'box', 'can', 'btl', 
            'ikat', 'gln', 'gram', 'liter', 'piece', '–∫–≥', '–≥', '–º–ª', '–ª', '—à—Ç'
        ]
    
    def extract_products_universal(self, file_path: str, max_products: int = 1000) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª—é–±–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            
            # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
            sheets_data = self._analyze_all_sheets(file_path)
            
            if not sheets_data:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –ª–∏—Å—Ç —Ñ–∞–π–ª–∞'}
            
            # 2. –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            best_sheet_data = self._select_best_sheet(sheets_data)
            
            if not best_sheet_data:
                return {'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏'}
            
            logger.info(f"üìÑ –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: {best_sheet_data['name']}")
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            structure = self._analyze_data_structure(best_sheet_data['dataframe'])
            
            logger.info(f"üèóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure['type']}")
            
            # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            products = self._extract_products_by_structure(best_sheet_data['dataframe'], structure, max_products)
            
            # 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            supplier_name = Path(file_path).stem
            
            result = {
                'file_type': 'excel',
                'supplier': {'name': supplier_name},
                'products': products,
                'extraction_stats': {
                    'total_rows': len(best_sheet_data['dataframe']),
                    'extracted_products': len(products),
                    'success_rate': len(products) / len(best_sheet_data['dataframe']) if len(best_sheet_data['dataframe']) > 0 else 0,
                    'used_sheet': best_sheet_data['name'],
                    'detected_structure': structure['type'],
                    'extraction_method': 'universal_parser'
                }
            }
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(best_sheet_data['dataframe'])} —Å—Ç—Ä–æ–∫")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'}
    
    def _analyze_all_sheets(self, file_path: str) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ —Ñ–∞–π–ª–∞"""
        sheets_data = []
        
        try:
            xls = pd.ExcelFile(file_path)
            
            for sheet_name in xls.sheet_names:
                try:
                    df = pd.read_excel(file_path, sheet_name=sheet_name)
                    
                    if df.empty or len(df) < 2:
                        continue
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ª–∏—Å—Ç–∞
                    potential_score = self._calculate_sheet_potential(df)
                    
                    sheets_data.append({
                        'name': sheet_name,
                        'dataframe': df,
                        'potential_score': potential_score,
                        'rows': len(df),
                        'cols': len(df.columns)
                    })
                    
                    logger.debug(f"üìã –õ–∏—Å—Ç '{sheet_name}': {len(df)} —Å—Ç—Ä–æ–∫, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential_score}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
                    continue
            
            return sheets_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def _calculate_sheet_potential(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        score = 0
        total_cells = 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        sample_df = df.head(50)
        
        for _, row in sample_df.iterrows():
            for value in row:
                if pd.notna(value):
                    total_cells += 1
                    value_str = str(value).strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ–≤–∞—Ä
                    if self._looks_like_product(value_str):
                        score += 2
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–µ–Ω—É
                    elif self._looks_like_price(value_str):
                        score += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    elif self._looks_like_unit(value_str):
                        score += 0.5
        
        return score / max(total_cells, 1)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    
    def _looks_like_product(self, value: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        if len(value) < 3 or len(value) > 200:
            return False
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å–ª–∞ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        if (value.replace('.', '').replace(',', '').isdigit() or
            value.lower() in ['unit', 'price', 'no', 'description', 'total', 'sum', 'nan', 'none']):
            return False
        
        # –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã
        if not any(c.isalpha() for c in value):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
        for pattern in self.product_patterns:
            if re.search(pattern, value.lower()):
                return True
        
        return False
    
    def _looks_like_price(self, value: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
            clean_value = re.sub(r'[^\d.]', '', str(value))
            if not clean_value:
                return False
            
            num_value = float(clean_value)
            
            # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
            return 10 <= num_value <= 50000000
            
        except:
            return False
    
    def _looks_like_unit(self, value: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        value_lower = str(value).lower().strip()
        return value_lower in self.common_units
    
    def _select_best_sheet(self, sheets_data: List[Dict]) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not sheets_data:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É
        sheets_data.sort(key=lambda x: x['potential_score'], reverse=True)
        
        return sheets_data[0]
    
    def _analyze_data_structure(self, df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ"""
        structure = {
            'type': 'unknown',
            'product_columns': [],
            'price_columns': [],
            'unit_columns': [],
            'data_rows': [],
            'header_rows': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü
        for col in df.columns:
            col_analysis = self._analyze_column(df[col])
            
            if col_analysis['type'] == 'product':
                structure['product_columns'].append(col)
            elif col_analysis['type'] == 'price':
                structure['price_columns'].append(col)
            elif col_analysis['type'] == 'unit':
                structure['unit_columns'].append(col)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
        structure['data_rows'] = self._find_data_rows(df)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if len(structure['product_columns']) > 1:
            structure['type'] = 'multi_column'  # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        elif len(structure['product_columns']) == 1 and len(structure['price_columns']) >= 1:
            structure['type'] = 'standard'  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        else:
            structure['type'] = 'mixed'  # –°–º–µ—à–∞–Ω–Ω–∞—è/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ: —Ç–æ–≤–∞—Ä—ã={len(structure['product_columns'])}, —Ü–µ–Ω—ã={len(structure['price_columns'])}")
        
        return structure
    
    def _analyze_column(self, series: pd.Series) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"""
        sample_values = series.dropna().head(20)
        
        if len(sample_values) == 0:
            return {'type': 'empty', 'confidence': 0}
        
        product_score = 0
        price_score = 0
        unit_score = 0
        
        for value in sample_values:
            value_str = str(value).strip()
            
            if self._looks_like_product(value_str):
                product_score += 1
            elif self._looks_like_price(value_str):
                price_score += 1
            elif self._looks_like_unit(value_str):
                unit_score += 1
        
        total = len(sample_values)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞
        if product_score / total > 0.6:
            return {'type': 'product', 'confidence': product_score / total}
        elif price_score / total > 0.7:
            return {'type': 'price', 'confidence': price_score / total}
        elif unit_score / total > 0.5:
            return {'type': 'unit', 'confidence': unit_score / total}
        else:
            return {'type': 'mixed', 'confidence': 0.3}
    
    def _find_data_rows(self, df: pd.DataFrame) -> List[int]:
        """–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        data_rows = []
        
        for idx, row in df.iterrows():
            # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ–≤–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            product_count = 0
            price_count = 0
            
            for value in row:
                if pd.notna(value):
                    value_str = str(value).strip()
                    
                    if self._looks_like_product(value_str):
                        product_count += 1
                    elif self._looks_like_price(value_str):
                        price_count += 1
            
            # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –∏ —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            if product_count >= 1 and price_count >= 1:
                data_rows.append(idx)
        
        return data_rows
    
    def _extract_products_by_structure(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        
        if structure['type'] == 'multi_column':
            products = self._extract_multi_column(df, structure, max_products)
        elif structure['type'] == 'standard':
            products = self._extract_standard(df, structure, max_products)
        else:
            products = self._extract_mixed(df, structure, max_products)
        
        return products
    
    def _extract_multi_column(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–≥–æ–∫–æ–ª–æ–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        product_cols = structure['product_columns']
        price_cols = structure['price_columns']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        data_rows = structure['data_rows'] if structure['data_rows'] else range(len(df))
        
        for row_idx in data_rows:
            if len(products) >= max_products:
                break
                
            row = df.iloc[row_idx]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É —Ç–æ–≤–∞—Ä-—Ü–µ–Ω–∞
            for prod_col in product_cols:
                for price_col in price_cols:
                    try:
                        product_name = self._clean_product_name(row.get(prod_col))
                        price = self._clean_price(row.get(price_col))
                        
                        if product_name and price > 0:
                            unit = self._find_unit_in_row(row, structure['unit_columns'])
                            
                            products.append({
                                'original_name': product_name,
                                'price': price,
                                'unit': unit or 'pcs',
                                'category': 'general',
                                'row_index': row_idx,
                                'confidence': 0.8
                            })
                            
                            if len(products) >= max_products:
                                return products
                                
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                        continue
        
        return products
    
    def _extract_standard(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        
        if not structure['product_columns'] or not structure['price_columns']:
            return products
        
        product_col = structure['product_columns'][0]
        price_col = structure['price_columns'][0]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        data_rows = structure['data_rows'] if structure['data_rows'] else range(len(df))
        
        for row_idx in data_rows:
            if len(products) >= max_products:
                break
                
            try:
                row = df.iloc[row_idx]
                
                product_name = self._clean_product_name(row.get(product_col))
                price = self._clean_price(row.get(price_col))
                
                if product_name and price > 0:
                    unit = self._find_unit_in_row(row, structure['unit_columns'])
                    
                    products.append({
                        'original_name': product_name,
                        'price': price,
                        'unit': unit or 'pcs',
                        'category': 'general',
                        'row_index': row_idx,
                        'confidence': 0.9
                    })
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                continue
        
        return products
    
    def _extract_mixed(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–π/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        
        # –ü—Ä–æ—Å—Ç–æ –∏—â–µ–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã
        for row_idx, row in df.iterrows():
            if len(products) >= max_products:
                break
            
            potential_products = []
            potential_prices = []
            potential_units = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
            for value in row:
                if pd.notna(value):
                    value_str = str(value).strip()
                    
                    if self._looks_like_product(value_str):
                        potential_products.append(value_str)
                    elif self._looks_like_price(value_str):
                        try:
                            price = self._clean_price(value)
                            if price > 0:
                                potential_prices.append(price)
                        except:
                            pass
                    elif self._looks_like_unit(value_str):
                        potential_units.append(value_str)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω—É –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            if potential_products and potential_prices:
                for product_name in potential_products:
                    for price in potential_prices:
                        unit = potential_units[0] if potential_units else 'pcs'
                        
                        products.append({
                            'original_name': product_name,
                            'price': price,
                            'unit': unit,
                            'category': 'general',
                            'row_index': row_idx,
                            'confidence': 0.7
                        })
                        
                        if len(products) >= max_products:
                            return products
        
        return products
    
    def _clean_product_name(self, value) -> Optional[str]:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if pd.isna(value):
            return None
        
        name = str(value).strip()
        
        if not self._looks_like_product(name):
            return None
        
        return name
    
    def _clean_price(self, value) -> float:
        """–û—á–∏—Å—Ç–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
        if pd.isna(value):
            return 0
        
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
            clean_value = re.sub(r'[^\d.]', '', str(value))
            if not clean_value:
                return 0
            
            price = float(clean_value)
            return price if 10 <= price <= 50000000 else 0
            
        except:
            return 0
    
    def _find_unit_in_row(self, row, unit_columns: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –µ–¥–∏–Ω–∏—Ü
        for col in unit_columns:
            if col in row and pd.notna(row[col]):
                unit = str(row[col]).strip().lower()
                if unit in self.common_units:
                    return unit
        
        # –ü–æ—Ç–æ–º –∏—â–µ–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
        for value in row:
            if pd.notna(value):
                value_str = str(value).strip().lower()
                if value_str in self.common_units:
                    return value_str
        
        return None