#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
from pathlib import Path

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.training_data_manager import TrainingDataManager

def create_reference_from_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–∞ –ø–æ —à–∞–±–ª–æ–Ω—É"""
    print("üìù –ë–´–°–¢–†–û–ï –°–û–ó–î–ê–ù–ò–ï –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    template = {
        "supplier": {
            "name": "",
            "phone": "",
            "whatsapp": "",
            "email": "", 
            "address": ""
        },
        "products": [],
        "metadata": {
            "document_type": "price_list",
            "language": "mixed",
            "total_pages": 1,
            "notes": ""
        }
    }
    
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    print(f"\nüè™ –ü–û–°–¢–ê–í–©–ò–ö:")
    template["supplier"]["name"] = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ").strip()
    template["supplier"]["phone"] = input("–¢–µ–ª–µ—Ñ–æ–Ω: ").strip()
    template["supplier"]["whatsapp"] = input("WhatsApp: ").strip() 
    template["supplier"]["email"] = input("Email: ").strip()
    template["supplier"]["address"] = input("–ê–¥—Ä–µ—Å: ").strip()
    
    # –¢–æ–≤–∞—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–≤–æ–¥)
    print(f"\nüì¶ –¢–û–í–ê–†–´:")
    print("–§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ | –±—Ä–µ–Ω–¥ | —Å—Ç–∞–Ω–¥–∞—Ä—Ç_–Ω–∞–∑–≤–∞–Ω–∏–µ | —Ä–∞–∑–º–µ—Ä | –µ–¥–∏–Ω–∏—Ü–∞ | —Ü–µ–Ω–∞ | –≤–∞–ª—é—Ç–∞ | –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    print("–ü—Ä–∏–º–µ—Ä: COCA COLA 330ml | COCA COLA | COCA COLA Can | 330 | ml | 4500 | IDR | beverages")
    print("–í–≤–µ–¥–∏—Ç–µ 'stop' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    
    while True:
        product_input = input(f"\n–¢–æ–≤–∞—Ä {len(template['products']) + 1}: ").strip()
        
        if product_input.lower() == 'stop':
            break
        
        if not product_input:
            continue
        
        try:
            parts = [p.strip() for p in product_input.split('|')]
            
            if len(parts) >= 6:
                product = {
                    "original_name": parts[0],
                    "brand": parts[1] if len(parts) > 1 and parts[1] else "unknown",
                    "standardized_name": parts[2] if len(parts) > 2 and parts[2] else parts[0],
                    "size": parts[3] if len(parts) > 3 and parts[3] else "unknown",
                    "unit": parts[4] if len(parts) > 4 and parts[4] else "pcs",
                    "price": float(parts[5]) if len(parts) > 5 and parts[5] else 0,
                    "currency": parts[6] if len(parts) > 6 and parts[6] else "USD",
                    "category": parts[7] if len(parts) > 7 and parts[7] else "general",
                    "confidence": 0.95
                }
                
                template["products"].append(product)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {parts[0]}")
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: –Ω–∞–∑–≤–∞–Ω–∏–µ|–±—Ä–µ–Ω–¥|—Å—Ç–∞–Ω–¥–∞—Ä—Ç|—Ä–∞–∑–º–µ—Ä|–µ–¥–∏–Ω–∏—Ü–∞|—Ü–µ–Ω–∞")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    if not template["products"]:
        print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    template["metadata"]["notes"] = input(f"\n–ó–∞–º–µ—Ç–∫–∏ –æ —Ñ–∞–π–ª–µ: ").strip()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    example_name = input(f"\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞: ").strip()
    if not example_name:
        example_name = "quick_example"
    
    file_path = input(f"–ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É Excel —Ñ–∞–π–ª—É: ").strip()
    
    # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
    json_file = f"{example_name}_reference.json"
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(template, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_file}")
    print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(template['products'])}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è
    if file_path and os.path.exists(file_path):
        trainer = TrainingDataManager()
        result = trainer.save_training_example(file_path, template, example_name)
        if result:
            print(f"‚úÖ –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è")
            print(f"üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python3 test_against_reference.py")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–∞–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –∫–∞–∫ JSON")

def load_from_csv_like():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CSV-–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    print("üìä –ó–ê–ì–†–£–ó–ö–ê –ò–ó CSV-–ü–û–î–û–ë–ù–û–ì–û –§–û–†–ú–ê–¢–ê")
    print("=" * 50)
    
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤–∏–¥–∞:")
    print("–Ω–∞–∑–≤–∞–Ω–∏–µ;–±—Ä–µ–Ω–¥;—Å—Ç–∞–Ω–¥–∞—Ä—Ç;—Ä–∞–∑–º–µ—Ä;–µ–¥–∏–Ω–∏—Ü–∞;—Ü–µ–Ω–∞;–≤–∞–ª—é—Ç–∞;–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    print("")
    print("–ü—Ä–∏–º–µ—Ä:")
    print("COCA COLA 330ml;COCA COLA;COCA COLA Can;330;ml;4500;IDR;beverages")
    print("INDOMIE Mi Goreng;INDOMIE;INDOMIE Fried Noodles;85;g;3200;IDR;pasta_noodles")
    
    csv_file = input("\n–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É: ").strip()
    
    if not os.path.exists(csv_file):
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    products = []
    
    try:
        with open(csv_file, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                parts = [p.strip() for p in line.split(';')]
                
                if len(parts) >= 6:
                    product = {
                        "original_name": parts[0],
                        "brand": parts[1] if len(parts) > 1 else "unknown",
                        "standardized_name": parts[2] if len(parts) > 2 else parts[0],
                        "size": parts[3] if len(parts) > 3 else "unknown",
                        "unit": parts[4] if len(parts) > 4 else "pcs",
                        "price": float(parts[5]) if len(parts) > 5 else 0,
                        "currency": parts[6] if len(parts) > 6 else "USD",
                        "category": parts[7] if len(parts) > 7 else "general",
                        "confidence": 0.95
                    }
                    products.append(product)
                else:
                    print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {line_num} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    if not products:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    print(f"\nüè™ –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    supplier = {
        "name": input("–ù–∞–∑–≤–∞–Ω–∏–µ: ").strip(),
        "phone": input("–¢–µ–ª–µ—Ñ–æ–Ω: ").strip(),
        "email": input("Email: ").strip(),
        "address": input("–ê–¥—Ä–µ—Å: ").strip()
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    reference_data = {
        "supplier": supplier,
        "products": products,
        "metadata": {
            "document_type": "price_list",
            "language": "mixed",
            "total_pages": 1,
            "notes": f"–ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞ {csv_file}"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    example_name = input(f"\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞: ").strip() or "csv_import"
    excel_file = input(f"–ü—É—Ç—å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É Excel —Ñ–∞–π–ª—É: ").strip()
    
    # JSON —Ñ–∞–π–ª
    json_file = f"{example_name}_reference.json"
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(reference_data, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {json_file}")
    
    # –í —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
    if excel_file and os.path.exists(excel_file):
        trainer = TrainingDataManager()
        result = trainer.save_training_example(excel_file, reference_data, example_name)
        if result:
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è")

def show_examples():
    """–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìö –ü–†–ò–ú–ï–†–´ –§–û–†–ú–ê–¢–û–í –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    print("1Ô∏è‚É£ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ (—á–µ—Ä–µ–∑ |):")
    print("COCA COLA 330ml | COCA COLA | COCA COLA Can | 330 | ml | 4500 | IDR | beverages")
    print("INDOMIE Mi Goreng | INDOMIE | INDOMIE Fried Noodles | 85 | g | 3200 | IDR | pasta_noodles")
    
    print("\n2Ô∏è‚É£ CSV —Ñ–æ—Ä–º–∞—Ç (—á–µ—Ä–µ–∑ ;):")
    print("COCA COLA 330ml;COCA COLA;COCA COLA Can;330;ml;4500;IDR;beverages")
    print("INDOMIE Mi Goreng;INDOMIE;INDOMIE Fried Noodles;85;g;3200;IDR;pasta_noodles")
    
    print("\n3Ô∏è‚É£ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    example_json = {
        "supplier": {
            "name": "PT GLOBAL ANUGRAH PASIFIK",
            "phone": "(0361) 9075914",
            "email": "sales@gap-indo.com"
        },
        "products": [
            {
                "original_name": "COCA COLA 330ml",
                "brand": "COCA COLA",
                "standardized_name": "COCA COLA Can",
                "size": "330",
                "unit": "ml",
                "price": 4500,
                "currency": "IDR",
                "category": "beverages"
            }
        ]
    }
    
    print(json.dumps(example_json, indent=2, ensure_ascii=False))
    
    print("\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:")
    categories = [
        "beverages", "canned_food", "pasta_noodles", "cooking_oil",
        "spices_seasonings", "dairy_products", "snacks", "rice_grains"
    ]
    for cat in categories:
        print(f"  ‚Ä¢ {cat}")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        print("\nüìù –ë–´–°–¢–†–û–ï –°–û–ó–î–ê–ù–ò–ï –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•")
        print("=" * 50)
        print("1. –°–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω (–±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥)")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CSV-–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == '1':
            create_reference_from_template()
        elif choice == '2':
            load_from_csv_like()
        elif choice == '3':
            show_examples()
        elif choice == '4':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()