#!/usr/bin/env python3
"""
=============================================================================
VERIFICATION: TELEGRAM INTEGRATION STRUCTURE
=============================================================================
–í–µ—Ä—Å–∏—è: 3.0
–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å unified API
=============================================================================
"""

import os
import sys

def verify_telegram_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("ü§ñ " + "="*60)
    print("ü§ñ TELEGRAM INTEGRATION STRUCTURE VERIFICATION")
    print("ü§ñ " + "="*60)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    required_files = [
        # API –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        "api/__init__.py",
        "api/main.py",
        "api/config.py",
        
        # Telegram —Ä–æ—É—Ç–µ—Ä
        "api/routers/__init__.py",
        "api/routers/telegram.py",
        
        # Telegram helper
        "api/helpers/__init__.py",
        "api/helpers/telegram_sender.py",
        
        # –°—Ö–µ–º—ã
        "api/schemas/base.py",
        
        # Middleware
        "api/middleware/__init__.py",
        "api/middleware/logging.py",
        "api/middleware/auth.py",
        "api/middleware/rate_limiting.py",
        
        # –î—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
        "api/routers/health.py",
        "api/routers/catalog.py",
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        "api.env.example",
        "requirements.txt",
        "API_README.md"
    ]
    
    print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    existing_files = []
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            size = os.path.getsize(file_path)
            existing_files.append((file_path, size))
            print(f"‚úÖ {file_path} ({size:,} bytes)")
        else:
            missing_files.append(file_path)
            print(f"‚ùå {file_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(existing_files)}")
    print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(missing_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Ä–æ—É—Ç–µ—Ä–∞
    if os.path.exists("api/routers/telegram.py"):
        with open("api/routers/telegram.py", "r", encoding="utf-8") as f:
            content = f.read()
            
        checks = [
            ("UnifiedTelegramBot", "class UnifiedTelegramBot" in content),
            ("TelegramUpdate", "class TelegramUpdate" in content),
            ("webhook endpoint", "@router.post(\"/webhook\"" in content),
            ("background processing", "process_telegram_update_background" in content),
            ("–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", "/start" in content and "/search" in content),
            ("inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", "inline_keyboard" in content),
        ]
        
        print(f"   üì± api/routers/telegram.py:")
        for check_name, result in checks:
            status = "‚úÖ" if result else "‚ùå"
            print(f"      {status} {check_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TelegramSender
    if os.path.exists("api/helpers/telegram_sender.py"):
        with open("api/helpers/telegram_sender.py", "r", encoding="utf-8") as f:
            content = f.read()
            
        checks = [
            ("TelegramSender class", "class TelegramSender" in content),
            ("send_response method", "async def send_response" in content),
            ("webhook management", "set_webhook" in content),
            ("aiohttp integration", "aiohttp" in content),
        ]
        
        print(f"   üì§ api/helpers/telegram_sender.py:")
        for check_name, result in checks:
            status = "‚úÖ" if result else "‚ùå"
            print(f"      {status} {check_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ main.py
    if os.path.exists("api/main.py"):
        with open("api/main.py", "r", encoding="utf-8") as f:
            content = f.read()
            
        checks = [
            ("telegram router import", "telegram_router" in content),
            ("router –≤–∫–ª—é—á–µ–Ω", "include_router(telegram_router" in content),
            ("lifespan management", "lifespan" in content),
            ("middleware", "RequestLoggingMiddleware" in content),
        ]
        
        print(f"   üèóÔ∏è api/main.py:")
        for check_name, result in checks:
            status = "‚úÖ" if result else "‚ùå"
            print(f"      {status} {check_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
    if os.path.exists("requirements.txt"):
        with open("requirements.txt", "r", encoding="utf-8") as f:
            content = f.read()
            
        checks = [
            ("FastAPI", "fastapi" in content),
            ("uvicorn", "uvicorn" in content),
            ("aiohttp", "aiohttp" in content),
            ("pydantic", "pydantic" in content),
        ]
        
        print(f"   üì¶ requirements.txt:")
        for check_name, result in checks:
            status = "‚úÖ" if result else "‚ùå"
            print(f"      {status} {check_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if os.path.exists("api.env.example"):
        with open("api.env.example", "r", encoding="utf-8") as f:
            content = f.read()
            
        checks = [
            ("TELEGRAM_BOT_TOKEN", "TELEGRAM_BOT_TOKEN" in content),
            ("TELEGRAM_WEBHOOK_URL", "TELEGRAM_WEBHOOK_URL" in content),
            ("API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "API_HOST" in content),
        ]
        
        print(f"   ‚öôÔ∏è api.env.example:")
        for check_name, result in checks:
            status = "‚úÖ" if result else "‚ùå"
            print(f"      {status} {check_name}")
    
    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
    total_lines = 0
    for file_path, size in existing_files:
        if file_path.endswith('.py'):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = len(f.readlines())
                    total_lines += lines
            except:
                pass
    
    print(f"   üìè –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ Python –∫–æ–¥–∞: {total_lines:,}")
    print(f"   üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(existing_files)}")
    print(f"   üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {sum(size for _, size in existing_files):,} bytes")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = [
        ("ü§ñ UnifiedTelegramBot", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ webhook"),
        ("üì§ TelegramSender", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram API"),
        ("üîå Webhook Endpoints", "–ü–æ–ª—É—á–µ–Ω–∏–µ updates –æ—Ç Telegram"),
        ("üìã Pydantic Schemas", "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"),
        ("üéõÔ∏è Background Processing", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"),
        ("‚öôÔ∏è Configuration", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ env"),
        ("üìö Documentation", "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
        ("üß™ Error Handling", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    ]
    
    print(f"\nüöÄ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    for component, description in components:
        print(f"   ‚úÖ {component}: {description}")
    
    # –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    bot_commands = [
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "/search [—Ç–æ–≤–∞—Ä] - –ü–æ–∏—Å–∫ –≤ unified –∫–∞—Ç–∞–ª–æ–≥–µ", 
        "/catalog - Browse –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        "/deals - –¢–æ–ø–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç–∫–æ–Ω–æ–º–∏–µ–π",
        "/categories - –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        "/recommend - AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–∞–º",
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ unified —Å–∏—Å—Ç–µ–º—ã",
        "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
    ]
    
    print(f"\nüí¨ –ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ ({len(bot_commands)} —à—Ç):")
    for command in bot_commands:
        print(f"   ‚Ä¢ {command}")
    
    # API endpoints
    api_endpoints = [
        "POST /api/v1/telegram/webhook - –ü—Ä–∏–µ–º updates",
        "GET /api/v1/telegram/webhook/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ",
        "POST /api/v1/telegram/webhook/setup - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook",
        "GET /api/v1/telegram/webhook/status - –°—Ç–∞—Ç—É—Å webhook",
        "DELETE /api/v1/telegram/webhook - –£–¥–∞–ª–µ–Ω–∏–µ webhook",
        "POST /api/v1/telegram/test-message - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    ]
    
    print(f"\nüåê Telegram API endpoints ({len(api_endpoints)} —à—Ç):")
    for endpoint in api_endpoints:
        print(f"   ‚Ä¢ {endpoint}")
    
    print(f"\n" + "="*60)
    
    if len(missing_files) == 0:
        print("‚úÖ –°–¢–†–£–ö–¢–£–†–ê TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–û–õ–ù–ê–Ø –ò –ì–û–¢–û–í–ê!")
        print("="*60)
        print(f"\nüéâ –§–ê–ó–ê 3.2: TELEGRAM BOT INTEGRATION - –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
        print(f"\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É:")
        print(f"   1. pip install -r requirements.txt")
        print(f"   2. cp api.env.example .env")
        print(f"   3. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env: TELEGRAM_BOT_TOKEN=your_token")
        print(f"   4. python api_server.py")
        print(f"   5. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs")
        print(f"   6. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook —á–µ—Ä–µ–∑ API")
        
        return True
    else:
        print("‚ö†Ô∏è –°–¢–†–£–ö–¢–£–†–ê –ù–ï–ü–û–õ–ù–ê–Ø - –ï–°–¢–¨ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –§–ê–ô–õ–´")
        print("="*60)
        return False

if __name__ == "__main__":
    success = verify_telegram_structure()
    sys.exit(0 if success else 1) 