"""
=============================================================================
MONITO API HEALTH ROUTER
=============================================================================
–í–µ—Ä—Å–∏—è: 3.0
–¶–µ–ª—å: –†–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ unified —Å–∏—Å—Ç–µ–º—ã
=============================================================================
"""

import time
from datetime import datetime
from typing import Dict, Any

from fastapi import APIRouter, Request, Depends, HTTPException
from sqlalchemy.exc import SQLAlchemyError

from api.schemas.base import HealthCheckResponse, BaseResponse
from modules.adapters.legacy_integration_adapter import LegacyIntegrationAdapter
from utils.logger import get_logger

logger = get_logger(__name__)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ API
_startup_time = time.time()

router = APIRouter()

def get_integration_adapter(request: Request) -> LegacyIntegrationAdapter:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è integration adapter"""
    return request.app.state.integration_adapter

@router.get("/", 
           response_model=HealthCheckResponse,
           summary="üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API",
           description="–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
async def health_check(request: Request, 
                      integration_adapter: LegacyIntegrationAdapter = Depends(get_integration_adapter)) -> HealthCheckResponse:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    - –°–æ—Å—Ç–æ—è–Ω–∏–µ unified —Å–∏—Å—Ç–µ–º—ã
    - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
    
    Returns:
        –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    logger.info("Health check requested")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    uptime_seconds = time.time() - _startup_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database_status = "unknown"
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        system_stats = integration_adapter.db_manager.get_system_statistics()
        database_status = "connected"
        logger.debug("Database connection check: OK")
    except SQLAlchemyError as e:
        database_status = "disconnected"
        logger.warning(f"Database connection check failed: {e}")
    except Exception as e:
        database_status = "error"
        logger.error(f"Database check error: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º unified —Å–∏—Å—Ç–µ–º—É
    unified_system_status = "unknown"
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã unified —Å–∏—Å—Ç–µ–º—ã
        test_search = integration_adapter.db_manager.search_master_products("test", limit=1)
        unified_system_status = "operational"
        logger.debug("Unified system check: OK")
    except Exception as e:
        unified_system_status = "error"
        logger.warning(f"Unified system check failed: {e}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    overall_status = "healthy"
    if database_status != "connected":
        overall_status = "degraded"
    if unified_system_status == "error":
        overall_status = "unhealthy"
    
    return HealthCheckResponse(
        status=overall_status,
        version="3.0.0",
        uptime_seconds=uptime_seconds,
        database_status=database_status,
        unified_system_status=unified_system_status,
        message=f"System is {overall_status}",
        request_id=getattr(request.state, 'request_id', None)
    )

@router.get("/detailed",
           response_model=Dict[str, Any],
           summary="üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
           description="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö unified —Å–∏—Å—Ç–µ–º—ã")
async def detailed_health_check(request: Request,
                               integration_adapter: LegacyIntegrationAdapter = Depends(get_integration_adapter)) -> Dict[str, Any]:
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    - –°–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    - –°–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
    
    Returns:
        –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    logger.info("Detailed health check requested")
    
    result = {
        "timestamp": datetime.utcnow().isoformat(),
        "uptime_seconds": time.time() - _startup_time,
        "api": {
            "version": "3.0.0",
            "status": "operational"
        }
    }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        system_stats = integration_adapter.db_manager.get_system_statistics()
        result["database"] = {
            "status": "connected",
            "statistics": system_stats,
            "connection_pool": "healthy"  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
        }
    except Exception as e:
        result["database"] = {
            "status": "error",
            "error": str(e)
        }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ unified —Å–∏—Å—Ç–µ–º–µ
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        result["unified_system"] = {
            "status": "operational",
            "components": {
                "database_manager": "healthy",
                "product_matching_engine": "healthy", 
                "price_comparison_engine": "healthy",
                "catalog_manager": "healthy"
            }
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        search_test = integration_adapter.db_manager.search_master_products("", limit=1)
        result["unified_system"]["search_functionality"] = "operational"
        
    except Exception as e:
        result["unified_system"] = {
            "status": "error",
            "error": str(e)
        }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö
    try:
        result["adapters"] = {
            "parser_adapter": "loaded",
            "normalizer_adapter": "loaded", 
            "legacy_integration": "operational"
        }
    except Exception as e:
        result["adapters"] = {
            "status": "error",
            "error": str(e)
        }
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    result["system_metrics"] = {
        "memory_usage": "n/a",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å psutil –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        "cpu_usage": "n/a",
        "disk_usage": "n/a"
    }
    
    result["request_id"] = getattr(request.state, 'request_id', None)
    
    return result

@router.get("/ping",
           response_model=BaseResponse,
           summary="üèì –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
           description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞")
async def ping(request: Request) -> BaseResponse:
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    
    –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç
    
    Returns:
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    """
    return BaseResponse(
        message="pong",
        request_id=getattr(request.state, 'request_id', None)
    )

@router.get("/version",
           response_model=Dict[str, str],
           summary="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏",
           description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ API –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
async def version_info(request: Request) -> Dict[str, str]:
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ API –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    Returns:
        –í–µ—Ä—Å–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """
    return {
        "api_version": "3.0.0",
        "unified_system_version": "3.0.0",
        "database_schema_version": "1.0",
        "legacy_compatibility_version": "2.x",
        "build_timestamp": "2024-01-01T00:00:00Z",  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
        "request_id": getattr(request.state, 'request_id', None)
    }

@router.get("/ready",
           response_model=BaseResponse,
           summary="‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é",
           description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
async def readiness_check(request: Request,
                         integration_adapter: LegacyIntegrationAdapter = Depends(get_integration_adapter)) -> BaseResponse:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ
    
    –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç health check —Ç–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–∑–∞–ø—Ä–æ—Å—ã
    
    Returns:
        –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞
    """
    logger.info("Readiness check requested")
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        system_stats = integration_adapter.db_manager.get_system_statistics()
        checks.append(("database", True, "Connected"))
    except Exception as e:
        checks.append(("database", False, f"Error: {e}"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º unified —Å–∏—Å—Ç–µ–º—É
    try:
        search_test = integration_adapter.db_manager.search_master_products("test", limit=1)
        checks.append(("unified_system", True, "Operational"))
    except Exception as e:
        checks.append(("unified_system", False, f"Error: {e}"))
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    failed_checks = [name for name, passed, _ in checks if not passed]
    
    if failed_checks:
        error_details = {name: msg for name, passed, msg in checks if not passed}
        raise HTTPException(
            status_code=503,
            detail={
                "message": f"System not ready. Failed checks: {', '.join(failed_checks)}",
                "failed_checks": error_details
            }
        )
    
    return BaseResponse(
        message="System is ready to handle requests",
        request_id=getattr(request.state, 'request_id', None)
    ) 