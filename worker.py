#!/usr/bin/env python3
"""
Celery Worker –∑–∞–ø—É—Å–∫ –¥–ª—è MON-007
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ Monito
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Celery worker"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
    os.environ.setdefault('CELERY_BROKER_URL', 'redis://localhost:6379/0')
    os.environ.setdefault('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
    os.environ.setdefault('CELERY_APP_NAME', 'monito')
    
    logger.info("üîß –û–∫—Ä—É–∂–µ–Ω–∏–µ Celery –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    logger.info(f"   üì° Broker: {os.environ.get('CELERY_BROKER_URL')}")
    logger.info(f"   üíæ Backend: {os.environ.get('CELERY_RESULT_BACKEND')}")

def create_celery_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2, init_global_celery_worker
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π worker
        worker = init_global_celery_worker(
            app_name=os.environ.get('CELERY_APP_NAME', 'monito'),
            broker_url=os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0'),
            result_backend=os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
        )
        
        if worker.celery_app:
            logger.info("‚úÖ Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            return worker.celery_app
        else:
            logger.warning("‚ö†Ô∏è Celery —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ mock —Ä–µ–∂–∏–º–µ")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ worker"""
    
    print("üöÄ –ó–ê–ü–£–°–ö MONITO CELERY WORKER")
    print("=" * 40)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Celery app
    celery_app = create_celery_app()
    
    if not celery_app:
        print("‚ö†Ô∏è Celery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞:")
        print("   pip install celery redis")
        print("   docker run -d -p 6379:6379 redis")
        sys.exit(1)
    
    print("‚úÖ Celery worker –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   python worker.py worker          # –ó–∞–ø—É—Å–∫ worker")
    print("   python worker.py flower          # –ó–∞–ø—É—Å–∫ Flower UI")
    print("   python worker.py status          # –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–æ–≤")
    print("   python worker.py purge           # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "worker":
            start_worker(celery_app)
        elif command == "flower":
            start_flower(celery_app)
        elif command == "status":
            show_status(celery_app)
        elif command == "purge":
            purge_queues(celery_app)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            sys.exit(1)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º worker
        start_worker(celery_app)

def start_worker(celery_app):
    """–ó–∞–ø—É—Å–∫ Celery worker"""
    print("\nüîÑ –ó–ê–ü–£–°–ö CELERY WORKER")
    print("-" * 25)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞
        worker_args = [
            '--loglevel=info',
            '--concurrency=4',  # 4 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞
            '--queues=file_processing,llm_processing,data_validation,sheets_writing,notifications',
            '--hostname=monito-worker@%h'
        ]
        
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞:")
        print(f"   üîÑ Concurrency: 4")
        print(f"   üì¶ –û—á–µ—Ä–µ–¥–∏: file_processing, llm_processing, data_validation, sheets_writing, notifications")
        print(f"   üìù Log level: info")
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä...")
        
        # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
        celery_app.worker_main(argv=['worker'] + worker_args)
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        sys.exit(1)

def start_flower(celery_app):
    """–ó–∞–ø—É—Å–∫ Flower UI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüå∏ –ó–ê–ü–£–°–ö FLOWER UI")
    print("-" * 20)
    
    try:
        import flower
        
        flower_args = [
            '--broker=' + os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0'),
            '--port=5555',
            '--url_prefix=flower'
        ]
        
        print(f"üåê Flower UI –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:5555/flower")
        print(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º Flower...")
        
        from flower.command import FlowerCommand
        cmd = FlowerCommand()
        cmd.execute_from_commandline(['flower'] + flower_args)
        
    except ImportError:
        print(f"‚ùå Flower –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install flower")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flower: {e}")
        sys.exit(1)

def show_status(celery_app):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ –æ—á–µ—Ä–µ–¥–µ–π"""
    print("\nüìä –°–¢–ê–¢–£–° CELERY WORKERS")
    print("-" * 30)
    
    try:
        from modules.celery_worker_v2 import get_global_celery_worker
        
        worker = get_global_celery_worker()
        
        # –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
        queue_status = worker.get_queue_status()
        print(f"üîÑ –†–µ–∂–∏–º: {queue_status.get('mode', 'unknown')}")
        
        # –í–æ—Ä–∫–µ—Ä—ã
        workers = queue_status.get('workers', {})
        print(f"üë• –í–æ—Ä–∫–µ—Ä—ã: {workers.get('active', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö / {workers.get('total', 0)} –≤—Å–µ–≥–æ")
        
        # –û—á–µ—Ä–µ–¥–∏
        queues = queue_status.get('queues', {})
        print(f"\nüì¶ –û—á–µ—Ä–µ–¥–∏:")
        for queue_name, queue_info in queues.items():
            pending = queue_info.get('pending', 0)
            active = queue_info.get('active', 0)
            print(f"   {queue_name}: {pending} –æ–∂–∏–¥–∞—é—Ç / {active} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = worker.get_worker_stats()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.total_tasks}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats.successful_tasks}")
        print(f"   –û—à–∏–±–æ–∫: {stats.failed_tasks}")
        print(f"   –í –æ—á–µ—Ä–µ–¥–∏: {stats.pending_tasks}")
        
        if stats.errors:
            print(f"\n‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
            for error in stats.errors[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                print(f"   ‚Ä¢ {error}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def purge_queues(celery_app):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π"""
    print("\nüßπ –û–ß–ò–°–¢–ö–ê –û–ß–ï–†–ï–î–ï–ô")
    print("-" * 20)
    
    try:
        from modules.celery_worker_v2 import get_global_celery_worker
        
        worker = get_global_celery_worker()
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("‚ùì –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏? (y/N): ").strip().lower()
        
        if confirm == 'y':
            purged = worker.purge_queue()
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {purged} –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π")
        else:
            print("üö´ –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π: {e}")

if __name__ == "__main__":
    main() 