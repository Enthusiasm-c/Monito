#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MON-S03 –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_basic_quota():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∫–≤–æ—Ç"""
    
    print("üìã –¢–µ—Å—Ç basic quota...")
    
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º structlog –ø–æ–ª–Ω–æ—Å—Ç—å—é
        import logging
        logging.basicConfig(level=logging.CRITICAL)  # –ú–∏–Ω–∏–º—É–º –ª–æ–≥–æ–≤
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        from modules.quota_manager import QuotaLimits
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã
        limits = QuotaLimits(max_files_per_hour=5, max_concurrent_tasks=2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        assert limits.max_files_per_hour == 5
        assert limits.max_concurrent_tasks == 2
        
        # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        data = limits.to_dict()
        restored = QuotaLimits.from_dict(data)
        assert restored.max_files_per_hour == 5
        
        print("  ‚úÖ Basic quota OK")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_quota_manager_minimal():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç QuotaManager"""
    
    print("üìã –¢–µ—Å—Ç minimal quota manager...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π QuotaManager –ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        class SimpleQuotaManager:
            def __init__(self):
                self.usage = {}
            
            def check_quota(self, user_id, file_size_mb=0.0):
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                return {'allowed': True, 'user_id': user_id}
            
            def reserve_quota(self, user_id, file_size_mb=0.0):
                if user_id not in self.usage:
                    self.usage[user_id] = {'files': 0, 'active': 0}
                self.usage[user_id]['active'] += 1
                return True
            
            def complete_task(self, user_id, success=True):
                if user_id in self.usage:
                    self.usage[user_id]['active'] -= 1
                    if success:
                        self.usage[user_id]['files'] += 1
                return True
        
        manager = SimpleQuotaManager()
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        result = manager.check_quota("user1", 1.0)
        assert result['allowed'] == True
        
        assert manager.reserve_quota("user1", 1.0) == True
        assert manager.complete_task("user1", success=True) == True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        assert manager.usage["user1"]["files"] == 1
        assert manager.usage["user1"]["active"] == 0
        
        print("  ‚úÖ Minimal quota manager OK")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_system_metrics_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üìã –¢–µ—Å—Ç simple system metrics...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ë–ï–ó –∏–º–ø–æ—Ä—Ç–∞ adaptive_scaler
        class SimpleMetrics:
            def __init__(self, cpu=0.0, memory=0.0, tasks=0, queue=0):
                self.cpu_percent = cpu
                self.memory_percent = memory
                self.active_tasks = tasks
                self.queue_size = queue
            
            def to_dict(self):
                return {
                    'cpu_percent': self.cpu_percent,
                    'memory_percent': self.memory_percent,
                    'active_tasks': self.active_tasks,
                    'queue_size': self.queue_size
                }
        
        metrics = SimpleMetrics(cpu=45.5, memory=62.3, tasks=5, queue=10)
        
        data = metrics.to_dict()
        assert data['cpu_percent'] == 45.5
        assert data['memory_percent'] == 62.3
        assert data['active_tasks'] == 5
        
        print("  ‚úÖ Simple system metrics OK")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_scaling_logic():
    """–ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–µ–π–ª–∏–Ω–≥–∞"""
    
    print("üìã –¢–µ—Å—Ç simple scaling logic...")
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        def make_scaling_decision(cpu_percent, memory_percent, queue_size):
            if cpu_percent > 80 or memory_percent > 80 or queue_size > 50:
                return "scale_up"
            elif cpu_percent < 20 and memory_percent < 30 and queue_size < 5:
                return "scale_down"
            else:
                return "none"
        
        # –¢–µ—Å—Ç—ã
        assert make_scaling_decision(85, 60, 20) == "scale_up"  # –í—ã—Å–æ–∫–∏–π CPU
        assert make_scaling_decision(50, 85, 20) == "scale_up"  # –í—ã—Å–æ–∫–∞—è –ø–∞–º—è—Ç—å
        assert make_scaling_decision(50, 60, 60) == "scale_up"  # –ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å
        assert make_scaling_decision(15, 25, 2) == "scale_down"  # –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        assert make_scaling_decision(50, 50, 10) == "none"      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        
        print("  ‚úÖ Simple scaling logic OK")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def run_minimal_tests():
    """–ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ Minimal MON-S03 Tests")
    print("=" * 40)
    
    tests = [
        test_basic_quota,
        test_quota_manager_minimal,
        test_system_metrics_simple,
        test_scaling_logic
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}")
            failed += 1
    
    total = len(tests)
    success_rate = (passed / total) * 100
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ MINIMAL TESTS")
    print("=" * 30)
    print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if success_rate >= 75:
        print(f"\nüéâ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ MON-S03 —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"‚úÖ Core functionality –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        return True
    else:
        print(f"\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    success = run_minimal_tests()
    exit(0 if success else 1) 