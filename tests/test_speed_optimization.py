#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
import asyncio
import time
import logging
from dotenv import load_dotenv

# Setup paths
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

# –ö—Ä–∞—Ç–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')

from upload_and_process import process_file_directly

async def test_speed_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    print("‚ö° –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –°–ö–û–†–û–°–¢–ò")
    print("=" * 60)
    
    # Test file
    test_file = "/Users/denisdomashenko/price_list_analyzer/DOC-20250428-WA0004..xlsx"
    
    if not os.path.exists(test_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {os.path.basename(test_file)}")
    print(f"üéØ –¶–µ–ª—å: —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è —Å ~157 —Å–µ–∫ –¥–æ ~60-80 —Å–µ–∫")
    print("-" * 60)
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    total_start_time = time.time()
    
    try:
        result = await process_file_directly(test_file)
        
        total_time = time.time() - total_start_time
        
        print("\n" + "=" * 60)
        print("‚ö° –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –°–ö–û–†–û–°–¢–ò:")
        print("=" * 60)
        
        if result:
            extraction_stats = result.get('extraction_stats', {})
            processing_stats = result.get('processing_stats', {})
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è  –û–ë–©–ï–ï –í–†–ï–ú–Ø: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            old_time = 157.7
            improvement = old_time - total_time
            improvement_percent = (improvement / old_time) * 100
            
            print(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï:")
            print(f"   üî∫ –ë—ã–ª–æ: {old_time:.1f}—Å")
            print(f"   üîª –°—Ç–∞–ª–æ: {total_time:.1f}—Å") 
            print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {improvement:+.1f}—Å ({improvement_percent:+.1f}%)")
            
            if total_time < 80:
                print(f"üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –í—Ä–µ–º—è –º–µ–Ω—å—à–µ 80 —Å–µ–∫—É–Ω–¥")
            elif total_time < 100:
                print(f"‚úÖ –•–æ—Ä–æ—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ! –ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏")
            else:
                print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            
            print(f"\nüì¶ –î–ï–¢–ê–õ–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
            print(f"   ü§ñ AI Enhanced: {extraction_stats.get('ai_enhanced', False)}")
            print(f"   üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {extraction_stats.get('extracted_products', 0)}")
            
            if processing_stats:
                print(f"   üî• –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {processing_stats.get('successful_batches', 0)}/{processing_stats.get('total_batches', 0)}")
                print(f"   ‚ö° –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {processing_stats.get('success_rate', 0):.1%}")
                print(f"   ü™ô –¢–æ–∫–µ–Ω–æ–≤: {processing_stats.get('estimated_tokens', 0)}")
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —ç—Ç–∞–ø–∞–º
            print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            if total_time < 60:
                print(f"   üöÄ –û–¢–õ–ò–ß–ù–ê–Ø —Å–∫–æ—Ä–æ—Å—Ç—å (<60—Å)")
            elif total_time < 90:
                print(f"   ‚úÖ –•–û–†–û–®–ê–Ø —Å–∫–æ—Ä–æ—Å—Ç—å (60-90—Å)")
            elif total_time < 120:
                print(f"   ‚ö†Ô∏è –ü–†–ò–ï–ú–õ–ï–ú–ê–Ø —Å–∫–æ—Ä–æ—Å—Ç—å (90-120—Å)")
            else:
                print(f"   ‚ùå –ú–ï–î–õ–ï–ù–ù–ê–Ø —Å–∫–æ—Ä–æ—Å—Ç—å (>120—Å)")
        else:
            print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∑–∞ {total_time:.1f}—Å")
            
    except Exception as e:
        total_time = time.time() - total_start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ {total_time:.1f}—Å: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Main function"""
    asyncio.run(test_speed_optimization())

if __name__ == "__main__":
    main()