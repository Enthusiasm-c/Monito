#!/usr/bin/env python3
"""
Google Sheets Manager V2 - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è MON-005
–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
- batchUpdate API –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –≤—ã–∑–æ–≤–æ–≤  
- Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É
- 10x —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

logger = logging.getLogger(__name__)

@dataclass
class SheetsStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π"""
    new_products: int = 0
    updated_prices: int = 0
    total_rows_written: int = 0
    api_calls_made: int = 0
    processing_time_ms: int = 0

class GoogleSheetsManagerV2:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Google Sheets —Å batch API
    MON-005: –ü–µ—Ä–µ—Ö–æ–¥ —Å append_row –Ω–∞ spreadsheets.values.batchUpdate
    
    –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    - –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: 30-60 —Å–µ–∫ ‚Üí 3-5 —Å–µ–∫ (10x –±—ã—Å—Ç—Ä–µ–µ)
    - API –≤—ã–∑–æ–≤—ã: N —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí 2-3 –≤—ã–∑–æ–≤–∞ –º–∞–∫—Å–∏–º—É–º
    - –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: 5x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
    """
    
    def __init__(self):
        from dotenv import load_dotenv
        load_dotenv()
        
        self.service = None
        self.sheet_id = os.getenv('GOOGLE_SHEET_ID')
        self.credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'google_credentials.json')
        self.stats = SheetsStats()
        self._initialize()
    
    def _initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API v4"""
        try:
            if not os.path.exists(self.credentials_file):
                logger.error(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}")
                return False
            
            if not self.sheet_id:
                logger.error("‚ùå GOOGLE_SHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ credentials
            credentials = Credentials.from_service_account_file(
                self.credentials_file,
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API v4
            self.service = build('sheets', 'v4', credentials=credentials)
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            sheet_info = self.service.spreadsheets().get(
                spreadsheetId=self.sheet_id
            ).execute()
            
            logger.info(f"‚úÖ Google Sheets API v4 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {sheet_info.get('properties', {}).get('title', 'Unknown')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API: {e}")
            return False
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self.service is not None
    
    def _get_sheet_data(self, sheet_name: str, range_name: str = None) -> List[List[str]]:
        """–ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞"""
        try:
            if not range_name:
                range_name = f"{sheet_name}!A:Z"  # –ß–∏—Ç–∞–µ–º –¥–æ —Å—Ç–æ–ª–±—Ü–∞ Z
            
            start_time = time.time()
            
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.sheet_id,
                range=range_name,
                valueRenderOption='UNFORMATTED_VALUE'
            ).execute()
            
            self.stats.api_calls_made += 1
            self.stats.processing_time_ms += int((time.time() - start_time) * 1000)
            
            return result.get('values', [])
            
        except HttpError as e:
            if e.resp.status == 400 and 'not found' in str(e):
                logger.info(f"üìã –õ–∏—Å—Ç '{sheet_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω")
                return []
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {sheet_name}: {e}")
            return []
    
    def _create_sheet_if_not_exists(self, sheet_name: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            sheet_metadata = self.service.spreadsheets().get(
                spreadsheetId=self.sheet_id
            ).execute()
            
            existing_sheets = [sheet['properties']['title'] 
                             for sheet in sheet_metadata.get('sheets', [])]
            
            if sheet_name in existing_sheets:
                logger.debug(f"üìã –õ–∏—Å—Ç '{sheet_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
            request_body = {
                'requests': [{
                    'addSheet': {
                        'properties': {
                            'title': sheet_name,
                            'gridProperties': {
                                'rowCount': 1000,
                                'columnCount': 26
                            }
                        }
                    }
                }]
            }
            
            self.service.spreadsheets().batchUpdate(
                spreadsheetId=self.sheet_id,
                body=request_body
            ).execute()
            
            self.stats.api_calls_made += 1
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç: {sheet_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
            return False
    
    def _prepare_master_table_headers(self) -> List[str]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        return [
            'Product Name (EN)',
            'Brand', 
            'Size',
            'Unit',
            'Currency',
            'Category',
            'First Added',
            'Last Updated'
        ]
    
    def _add_supplier_columns_to_headers(self, headers: List[str], supplier_name: str) -> List[str]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
        price_col = f"{supplier_name}_Price"
        date_col = f"{supplier_name}_Updated"
        
        if price_col not in headers:
            headers.extend([price_col, date_col])
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_name}")
        
        return headers
    
    def _clean_supplier_name(self, name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        import re
        clean_name = re.sub(r'[^\w\s\-]', '', str(name))
        clean_name = re.sub(r'\s+', '_', clean_name)
        return clean_name[:30].strip('_') or 'Unknown_Supplier'
    
    def _build_product_matrix(self, 
                            existing_data: List[List[str]], 
                            headers: List[str],
                            products: List[Dict[str, Any]], 
                            supplier_name: str) -> Tuple[List[List[str]], SheetsStats]:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        –°–∞–º–∞—è –≤–∞–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!
        """
        start_time = time.time()
        stats = SheetsStats()
        
        # –ò–Ω–¥–µ–∫—Å—ã –≤–∞–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        try:
            product_name_idx = headers.index('Product Name (EN)')
            price_col_idx = headers.index(f"{supplier_name}_Price")
            date_col_idx = headers.index(f"{supplier_name}_Updated")
            last_updated_idx = headers.index('Last Updated')
        except ValueError as e:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü: {e}")
            return existing_data, stats
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        existing_products = {}
        for row_idx, row in enumerate(existing_data[1:], start=1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(row) > product_name_idx and row[product_name_idx]:
                product_key = row[product_name_idx].lower().strip()
                existing_products[product_key] = row_idx
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
        data_matrix = [row[:] for row in existing_data]  # –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_date = datetime.now().strftime('%Y-%m-%d')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        for product in products:
            product_name = product.get('standardized_name', '').strip()
            price = product.get('price', 0)
            
            if not product_name or price <= 0:
                continue
            
            product_key = product_name.lower()
            
            if product_key in existing_products:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                row_idx = existing_products[product_key]
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è
                while len(data_matrix[row_idx]) <= max(price_col_idx, date_col_idx, last_updated_idx):
                    data_matrix[row_idx].append('')
                
                data_matrix[row_idx][price_col_idx] = price
                data_matrix[row_idx][date_col_idx] = current_date
                data_matrix[row_idx][last_updated_idx] = current_date
                
                stats.updated_prices += 1
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                new_row = [''] * len(headers)
                new_row[product_name_idx] = product_name
                new_row[1] = product.get('brand', 'unknown')  # Brand
                new_row[2] = product.get('size', 'unknown')   # Size
                new_row[3] = product.get('unit', 'pcs')       # Unit
                new_row[4] = product.get('currency', 'USD')   # Currency
                new_row[5] = product.get('category', 'general') # Category
                new_row[6] = current_date                     # First Added
                new_row[7] = current_date                     # Last Updated
                new_row[price_col_idx] = price
                new_row[date_col_idx] = current_date
                
                data_matrix.append(new_row)
                stats.new_products += 1
        
        stats.processing_time_ms = int((time.time() - start_time) * 1000)
        stats.total_rows_written = len(data_matrix)
        
        logger.info(f"üìä –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∑–∞ {stats.processing_time_ms}ms: "
                   f"{stats.new_products} –Ω–æ–≤—ã—Ö, {stats.updated_prices} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
        return data_matrix, stats
    
    def update_master_table_batch(self, standardized_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚ö° –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø MON-005: Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        
        –ó–∞–º–µ–Ω—è–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–π update_master_table –Ω–∞ –±—ã—Å—Ç—Ä—ã–π batch API
        –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: 10x (30-60 —Å–µ–∫ ‚Üí 3-5 —Å–µ–∫)
        """
        start_time = time.time()
        
        try:
            logger.info(f"üöÄ MON-005: –ù–∞—á–∏–Ω–∞–µ–º BATCH —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets...")
            
            if not self.is_connected():
                return {'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API'}
            
            supplier = standardized_data.get('supplier', {})
            products = standardized_data.get('products', [])
            supplier_name = self._clean_supplier_name(supplier.get('name', 'Unknown_Supplier'))
            
            if not products:
                return {'error': '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'}
            
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            logger.info(f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}")
            
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            sheet_name = "Master Table"
            if not self._create_sheet_if_not_exists(sheet_name):
                return {'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç {sheet_name}'}
            
            # –®–∞–≥ 2: –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (1 API –≤—ã–∑–æ–≤)
            logger.info(f"üìñ –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")
            existing_data = self._get_sheet_data(sheet_name)
            
            # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if not existing_data:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = self._prepare_master_table_headers()
                existing_data = [headers]
                logger.info(f"üìã –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {len(headers)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            else:
                headers = existing_data[0][:]  # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            original_header_count = len(headers)
            headers = self._add_supplier_columns_to_headers(headers, supplier_name)
            headers_changed = len(headers) != original_header_count
            
            # –®–∞–≥ 4: –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
            logger.info(f"üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö...")
            data_matrix, batch_stats = self._build_product_matrix(
                existing_data, headers, products, supplier_name
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.new_products += batch_stats.new_products
            self.stats.updated_prices += batch_stats.updated_prices
            
            # –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º batch –∑–∞–ø—Ä–æ—Å–æ–º
            logger.info(f"‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º BATCH –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {len(data_matrix)} —Å—Ç—Ä–æ–∫...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
            end_column = chr(ord('A') + len(headers) - 1)  # A, B, C... –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            range_name = f"{sheet_name}!A1:{end_column}{len(data_matrix)}"
            
            batch_update_request = {
                'valueInputOption': 'RAW',
                'data': [{
                    'range': range_name,
                    'values': data_matrix
                }]
            }
            
            batch_start = time.time()
            self.service.spreadsheets().values().batchUpdate(
                spreadsheetId=self.sheet_id,
                body=batch_update_request
            ).execute()
            
            batch_time = time.time() - batch_start
            self.stats.api_calls_made += 1
            
            # –®–∞–≥ 6: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if headers_changed:
                self._format_headers(sheet_name, headers)
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            self._create_supplier_sheet_batch(supplier_name, products)
            
            total_time = time.time() - start_time
            
            result = {
                'status': 'success',
                'new_products': batch_stats.new_products,
                'updated_prices': batch_stats.updated_prices,
                'processed_products': batch_stats.new_products + batch_stats.updated_prices,
                'total_rows': len(data_matrix),
                'processing_time_sec': round(total_time, 2),
                'batch_write_time_sec': round(batch_time, 2),
                'api_calls_made': self.stats.api_calls_made,
                'supplier': supplier_name,
                'sheet_url': f"https://docs.google.com/spreadsheets/d/{self.sheet_id}"
            }
            
            logger.info(f"‚úÖ MON-005 COMPLETED: {batch_stats.new_products} –Ω–æ–≤—ã—Ö, "
                       f"{batch_stats.updated_prices} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ {total_time:.1f}—Å "
                       f"({self.stats.api_calls_made} API –≤—ã–∑–æ–≤–æ–≤)")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {'error': str(e)}
    
    def _format_headers(self, sheet_name: str, headers: List[str]) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º sheet ID
            sheet_metadata = self.service.spreadsheets().get(
                spreadsheetId=self.sheet_id
            ).execute()
            
            sheet_id = None
            for sheet in sheet_metadata.get('sheets', []):
                if sheet['properties']['title'] == sheet_name:
                    sheet_id = sheet['properties']['sheetId']
                    break
            
            if sheet_id is None:
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            requests = [{
                'repeatCell': {
                    'range': {
                        'sheetId': sheet_id,
                        'startRowIndex': 0,
                        'endRowIndex': 1,
                        'startColumnIndex': 0,
                        'endColumnIndex': len(headers)
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 1.0},
                            'textFormat': {
                                'bold': True,
                                'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}
                            }
                        }
                    },
                    'fields': 'userEnteredFormat(backgroundColor,textFormat)'
                }
            }]
            
            self.service.spreadsheets().batchUpdate(
                spreadsheetId=self.sheet_id,
                body={'requests': requests}
            ).execute()
            
            self.stats.api_calls_made += 1
            logger.debug(f"‚ú® –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {sheet_name}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏: {e}")
    
    def _create_supplier_sheet_batch(self, supplier_name: str, products: List[Dict]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å batch API"""
        try:
            sheet_name = f"Supplier_{supplier_name}"
            
            if not self._create_sheet_if_not_exists(sheet_name):
                return False
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            headers = [
                'Original Name', 'Standardized Name', 'Brand', 'Size', 
                'Price', 'Currency', 'Unit', 'Category', 'Confidence', 'Added Date'
            ]
            
            data_matrix = [headers]
            current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            for product in products:
                row = [
                    product.get('original_name', ''),
                    product.get('standardized_name', ''),
                    product.get('brand', 'unknown'),
                    product.get('size', 'unknown'),
                    product.get('price', 0),
                    product.get('currency', 'USD'),
                    product.get('unit', 'pcs'),
                    product.get('category', 'general'),
                    product.get('confidence', 0),
                    current_date
                ]
                data_matrix.append(row)
            
            # Batch –∑–∞–ø–∏—Å—å
            range_name = f"{sheet_name}!A1:J{len(data_matrix)}"
            
            self.service.spreadsheets().values().batchUpdate(
                spreadsheetId=self.sheet_id,
                body={
                    'valueInputOption': 'RAW',
                    'data': [{
                        'range': range_name,
                        'values': data_matrix
                    }]
                }
            ).execute()
            
            self.stats.api_calls_made += 1
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {sheet_name} ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
            return False
    
    def create_stats_sheet(self, processing_stats: Dict[str, Any]) -> bool:
        """
        MON-005.2: –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        –î–æ–±–∞–≤–ª—è–µ—Ç Sheet ¬´Stats¬ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            sheet_name = "Stats"
            
            if not self._create_sheet_if_not_exists(sheet_name):
                return False
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            headers = [
                'Timestamp', 'Supplier', 'Total Rows', 'New Products', 'Updated Products',
                'Processing Time (sec)', 'Parse Time (sec)', 'API Calls', 'Tokens Used'
            ]
            
            stats_row = [
                current_time,
                processing_stats.get('supplier', 'Unknown'),
                processing_stats.get('total_rows', 0),
                processing_stats.get('new_products', 0), 
                processing_stats.get('updated_prices', 0),
                processing_stats.get('processing_time_sec', 0),
                processing_stats.get('parse_time_sec', 0),
                processing_stats.get('api_calls_made', 0),
                processing_stats.get('tokens_used', 0)
            ]
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            existing_data = self._get_sheet_data(sheet_name)
            
            if not existing_data:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                data_matrix = [headers, stats_row]
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                data_matrix = existing_data[:]
                data_matrix.append(stats_row)
            
            # Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            range_name = f"{sheet_name}!A1:I{len(data_matrix)}"
            
            self.service.spreadsheets().values().batchUpdate(
                spreadsheetId=self.sheet_id,
                body={
                    'valueInputOption': 'RAW',
                    'data': [{
                        'range': range_name,
                        'values': data_matrix
                    }]
                }
            ).execute()
            
            self.stats.api_calls_made += 1
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–∏—Å—Ç Stats")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MON-005"""
        return {
            'api_calls_made': self.stats.api_calls_made,
            'processing_time_ms': self.stats.processing_time_ms,
            'new_products': self.stats.new_products,
            'updated_prices': self.stats.updated_prices,
            'total_rows_written': self.stats.total_rows_written,
            'avg_time_per_row_ms': (
                self.stats.processing_time_ms / max(self.stats.total_rows_written, 1)
            )
        }


# Backward compatibility wrapper
class GoogleSheetsManager(GoogleSheetsManagerV2):
    """
    –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã –Ω–∞ –Ω–æ–≤—ã–µ batch –º–µ—Ç–æ–¥—ã
    """
    
    def update_master_table(self, standardized_data: Dict[str, Any]) -> Dict[str, Any]:
        """Compatibility wrapper –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API"""
        logger.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π batch API...")
        return self.update_master_table_batch(standardized_data) 