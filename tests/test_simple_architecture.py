#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ pandas/numpy –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_architecture():
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ pandas"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    files_to_check = [
        'modules/base_parser.py',
        'modules/universal_excel_parser.py', 
        'modules/pdf_parser.py',
        'modules/ai_table_parser.py'
    ]
    
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
    import py_compile
    
    for file_path in files_to_check:
        try:
            py_compile.compile(file_path, doraise=True)
            print(f"‚úÖ {file_path} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK")
        except py_compile.PyCompileError as e:
            print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    print("\nüèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        with open('modules/base_parser.py', 'r') as f:
            base_content = f.read()
        
        with open('modules/universal_excel_parser.py', 'r') as f:
            excel_content = f.read()
            
        with open('modules/pdf_parser.py', 'r') as f:
            pdf_content = f.read()
            
        with open('modules/ai_table_parser.py', 'r') as f:
            ai_content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        if 'class BaseParser:' in base_content:
            print("‚úÖ BaseParser –∫–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        else:
            print("‚ùå BaseParser –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ
        base_functions = [
            '_looks_like_product',
            '_looks_like_price', 
            '_clean_price',
            '_clean_product_name'
        ]
        
        for func in base_functions:
            if f'def {func}(' in base_content:
                print(f"‚úÖ BaseParser.{func} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
            else:
                print(f"‚ùå BaseParser.{func} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
        parsers = [
            ('UniversalExcelParser', excel_content),
            ('PDFParser', pdf_content), 
            ('AITableParser', ai_content)
        ]
        
        for parser_name, content in parsers:
            if f'class {parser_name}(BaseParser):' in content:
                print(f"‚úÖ {parser_name} –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç BaseParser")
            else:
                print(f"‚ùå {parser_name} –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç BaseParser")
                return False
                
            if 'from .base_parser import BaseParser' in content:
                print(f"‚úÖ {parser_name} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç BaseParser")
            else:
                print(f"‚ùå {parser_name} –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç BaseParser")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π...")
        
        for parser_name, content in parsers:
            duplicated_found = False
            for func in base_functions:
                if f'def {func}(' in content:
                    print(f"‚ö†Ô∏è {parser_name} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é {func}")
                    duplicated_found = True
            
            if not duplicated_found:
                print(f"‚úÖ {parser_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        print("\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–Ω—ã")
        print("‚úÖ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
        return False

if __name__ == "__main__":
    success = test_architecture()
    if success:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ê–†–•–ò–¢–ï–ö–¢–£–†–ï")
    
    sys.exit(0 if success else 1) 