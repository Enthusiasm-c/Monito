#!/usr/bin/env python3
"""
PDF –ø–∞—Ä—Å–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Camelot –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - —É–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
"""

import pandas as pd
import logging
import re
from pathlib import Path
from typing import Dict, List, Any, Optional
import tempfile
import os
from .base_parser import BaseParser

logger = logging.getLogger(__name__)

class PDFParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Camelot"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –æ–±—â–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        super().__init__()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å camelot
        try:
            import camelot
            self.camelot = camelot
            self.camelot_available = True
            logger.info("‚úÖ Camelot —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Camelot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            self.camelot = None
            self.camelot_available = False
            
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å fallback –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        try:
            import tabula
            self.tabula = tabula
            self.tabula_available = True
            logger.info("‚úÖ Tabula –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∫ fallback")
        except ImportError:
            self.tabula = None
            self.tabula_available = False
            
        try:
            import pdfplumber
            self.pdfplumber = pdfplumber
            self.pdfplumber_available = True
            logger.info("‚úÖ PDFplumber –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ fallback")
        except ImportError:
            self.pdfplumber = None
            self.pdfplumber_available = False
    
    def extract_products_from_pdf(self, file_path: str, max_products: int = 1000, use_ai: bool = True) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ PDF —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ PDF —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}'}
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
            tables_data = self._extract_tables_multi_method(file_path)
            
            if not tables_data:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF'}
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            best_table = self._select_best_table(tables_data)
            
            if best_table is None:
                return {'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∞–±–ª–∏—Ü —Å —Ç–æ–≤–∞—Ä–∞–º–∏'}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            df = self._table_to_dataframe(best_table)
            
            if df.empty:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ DataFrame'}
            
            # –ù–û–í–´–ô AI-–ü–û–î–•–û–î: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º AI –∞–Ω–∞–ª–∏–∑
            if use_ai:
                ai_result = self._try_ai_extraction(df, file_path)
                if ai_result and not ai_result.get('error'):
                    # AI —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    ai_result['extraction_stats']['used_method'] = best_table.get('extraction_method', 'camelot')
                    ai_result['extraction_stats']['ai_enhanced'] = True
                    logger.info(f"ü§ñ AI —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫ –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF")
                    return ai_result
                else:
                    logger.warning(f"‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä")
            
            # FALLBACK: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
            from .universal_excel_parser import UniversalExcelParser
            excel_parser = UniversalExcelParser()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            structure = excel_parser._analyze_data_structure(df)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            products = excel_parser._extract_products_by_structure(df, structure, max_products)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            supplier_name = Path(file_path).stem
            
            result = {
                'file_type': 'pdf',
                'supplier': {'name': supplier_name},
                'products': products,
                'extraction_stats': {
                    'total_rows': len(df),
                    'extracted_products': len(products),
                    'success_rate': len(products) / len(df) if len(df) > 0 else 0,
                    'used_method': best_table.get('extraction_method', 'camelot'),
                    'detected_structure': structure['type'],
                    'extraction_method': 'manual_parser',
                    'ai_enhanced': False
                }
            }
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(df)} —Å—Ç—Ä–æ–∫ PDF (—Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–µ—Ä)")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–∞: {str(e)}'}
    
    def _extract_tables_multi_method(self, file_path: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        all_tables = []
        
        # –ú–µ—Ç–æ–¥ 1: Camelot (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –¥–ª—è —Ç–∞–±–ª–∏—Ü)
        if self.camelot_available:
            try:
                camelot_tables = self._extract_with_camelot(file_path)
                all_tables.extend(camelot_tables)
                logger.info(f"üìä Camelot –∏–∑–≤–ª–µ–∫ {len(camelot_tables)} —Ç–∞–±–ª–∏—Ü")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Camelot: {e}")
        
        # –ú–µ—Ç–æ–¥ 2: Tabula (fallback)
        if self.tabula_available and len(all_tables) == 0:
            try:
                tabula_tables = self._extract_with_tabula(file_path)
                all_tables.extend(tabula_tables)
                logger.info(f"üìä Tabula –∏–∑–≤–ª–µ–∫–ª–∞ {len(tabula_tables)} —Ç–∞–±–ª–∏—Ü")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Tabula: {e}")
        
        # –ú–µ—Ç–æ–¥ 3: PDFplumber (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)
        if self.pdfplumber_available and len(all_tables) == 0:
            try:
                pdfplumber_tables = self._extract_with_pdfplumber(file_path)
                all_tables.extend(pdfplumber_tables)
                logger.info(f"üìä PDFplumber –∏–∑–≤–ª–µ–∫ {len(pdfplumber_tables)} —Ç–∞–±–ª–∏—Ü")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ PDFplumber: {e}")
        
        return all_tables
    
    def _extract_with_camelot(self, file_path: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –ø–æ–º–æ—â—å—é Camelot"""
        tables_data = []
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã Camelot
            methods = ['lattice', 'stream']
            
            for method in methods:
                try:
                    tables = self.camelot.read_pdf(file_path, flavor=method, pages='all')
                    
                    for i, table in enumerate(tables):
                        if not table.df.empty:
                            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü—ã
                            accuracy = getattr(table, 'accuracy', 0)
                            
                            tables_data.append({
                                'data': table.df,
                                'extraction_method': f'camelot_{method}',
                                'page': getattr(table, 'page', 1),
                                'accuracy': accuracy,
                                'quality_score': self._calculate_table_quality(table.df)
                            })
                            
                            logger.debug(f"Camelot {method}: —Ç–∞–±–ª–∏—Ü–∞ {i+1}, —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}")
                    
                    if tables_data:
                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–∞–±–ª–∏—Ü—ã, –Ω–µ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ Camelot {method}: {e}")
                    continue
                    
        except Exception as e:
            logger.warning(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ Camelot: {e}")
        
        return tables_data
    
    def _extract_with_tabula(self, file_path: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –ø–æ–º–æ—â—å—é Tabula"""
        tables_data = []
        
        try:
            # Tabula –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            dfs = self.tabula.read_pdf(file_path, pages='all', multiple_tables=True)
            
            for i, df in enumerate(dfs):
                if not df.empty:
                    tables_data.append({
                        'data': df,
                        'extraction_method': 'tabula',
                        'page': i + 1,
                        'accuracy': 0.8,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                        'quality_score': self._calculate_table_quality(df)
                    })
                    
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Tabula: {e}")
        
        return tables_data
    
    def _extract_with_pdfplumber(self, file_path: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –ø–æ–º–æ—â—å—é PDFplumber"""
        tables_data = []
        
        try:
            with self.pdfplumber.open(file_path) as pdf:
                for page_num, page in enumerate(pdf.pages):
                    tables = page.extract_tables()
                    
                    for table in tables:
                        if table and len(table) > 1:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
                            df = pd.DataFrame(table[1:], columns=table[0])
                            
                            if not df.empty:
                                tables_data.append({
                                    'data': df,
                                    'extraction_method': 'pdfplumber',
                                    'page': page_num + 1,
                                    'accuracy': 0.7,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                                    'quality_score': self._calculate_table_quality(df)
                                })
                                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ PDFplumber: {e}")
        
        return tables_data
    
    def _calculate_table_quality(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π"""
        if df.empty:
            return 0
        
        score = 0
        total_cells = df.size
        filled_cells = df.count().sum()
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        fill_ratio = filled_cells / total_cells if total_cells > 0 else 0
        score += fill_ratio * 0.3
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω
        product_count = 0
        price_count = 0
        
        for _, row in df.head(10).iterrows():  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
            for value in row:
                if pd.notna(value):
                    value_str = str(value).strip()
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
                    if self._looks_like_product(value_str):
                        product_count += 1
                    elif self._looks_like_price(value_str):
                        price_count += 1
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —è—á–µ–µ–∫
        sample_size = min(df.size, 10 * len(df.columns))
        if sample_size > 0:
            score += (product_count / sample_size) * 0.4
            score += (price_count / sample_size) * 0.3
        
        return min(score, 1.0)
    
    def _select_best_table(self, tables_data: List[Dict]) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not tables_data:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        sorted_tables = sorted(tables_data, key=lambda x: x['quality_score'], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à—É—é —Ç–∞–±–ª–∏—Ü—É
        best_table = sorted_tables[0]
        logger.info(f"üìä –í—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: –º–µ—Ç–æ–¥={best_table['extraction_method']}, "
                   f"–∫–∞—á–µ—Å—Ç–≤–æ={best_table['quality_score']:.3f}")
        
        return best_table
    
    def _table_to_dataframe(self, table_info: Dict) -> pd.DataFrame:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ DataFrame —Å –æ—á–∏—Å—Ç–∫–æ–π"""
        df = table_info['data'].copy()
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = df.dropna(how='all')  # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(axis=1, how='all')  # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        
        # –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–æ–≤
        df = df.reset_index(drop=True)
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df.columns = [f'col_{i}' if pd.isna(col) or str(col).strip() == '' 
                     else str(col).strip() for i, col in enumerate(df.columns)]
        
        return df
    
    def _try_ai_extraction(self, df: pd.DataFrame, file_path: str) -> Optional[Dict]:
        """–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –ø–∞—Ä—Å–µ—Ä
            from .ai_table_parser import AITableParser
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                logger.debug("OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑")
                return None
            
            # –°–æ–∑–¥–∞–µ–º AI –ø–∞—Ä—Å–µ—Ä
            ai_parser = AITableParser(api_key)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = f"PDF –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {Path(file_path).name}"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI
            result = ai_parser.extract_products_with_ai(df, context)
            
            return result
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return None
    
    def get_supported_formats(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        formats = []
        
        if self.camelot_available or self.tabula_available or self.pdfplumber_available:
            formats.append('pdf')
            
        return formats
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PDF –ø–∞—Ä—Å–µ—Ä–∞"""
        return (self.camelot_available or 
                self.tabula_available or 
                self.pdfplumber_available) 