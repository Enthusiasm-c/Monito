import { useState, useCallback } from 'react'
import { Box, Grid, Paper, Typography, Card, CardContent, Chip, IconButton, Switch, FormControlLabel } from '@mui/material'
import {
  TrendingUp as TrendingUpIcon,
  Store as StoreIcon,
  Business as BusinessIcon,
  AttachMoney as MoneyIcon,
  Speed as SpeedIcon,
  CheckCircle as CheckCircleIcon,
  Refresh as RefreshIcon,
  Wifi as WifiIcon,
  WifiOff as WifiOffIcon,
} from '@mui/icons-material'

import StatCard from '../../components/StatCard/StatCard'
import PriceChart from '../../components/Charts/PriceChart'
import SavingsChart from '../../components/Charts/SavingsChart'
import TopDeals from '../../components/TopDeals/TopDeals'
import RecentActivity from '../../components/RecentActivity/RecentActivity'
import { useWebSocket, useStatsUpdates, usePriceUpdates } from '../../hooks/useWebSocket'
import type { StatsUpdate, PriceUpdate } from '../../services/websocket'

export default function Dashboard() {
  const [chartType, setChartType] = useState<'line' | 'area'>('area')
  const [savingsChartType, setSavingsChartType] = useState<'bar' | 'pie'>('bar')
  const [realTimeStats, setRealTimeStats] = useState<StatsUpdate | null>(null)
  const [recentPriceUpdates, setRecentPriceUpdates] = useState<PriceUpdate[]>([])
  const [enableNotifications, setEnableNotifications] = useState(true)

  const { isConnected, connectionState, requestStats } = useWebSocket()

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const handleStatsUpdate = useCallback((stats: StatsUpdate) => {
    console.log('üìä Received stats update:', stats)
    setRealTimeStats(stats)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω
  const handlePriceUpdate = useCallback((update: PriceUpdate) => {
    console.log('üí∞ Received price update:', update)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 10)
    setRecentPriceUpdates(prev => [update, ...prev.slice(0, 9)])
  }, [])

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ real-time —Å–æ–±—ã—Ç–∏—è
  useStatsUpdates(handleStatsUpdate)
  usePriceUpdates(handlePriceUpdate)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏–Ω–∞—á–µ mock –¥–∞–Ω–Ω—ã–µ
  const stats = realTimeStats || {
    total_products: 1247,
    total_suppliers: 23,
    total_prices: 5420,
    avg_savings: 15.3,
    updates_today: 342,
    api_response_time: 120,
    system_health: 'excellent',
    last_update: new Date().toISOString(),
  }

  const getSystemHealthColor = (health: string) => {
    switch (health) {
      case 'excellent': return 'success'
      case 'good': return 'info'
      case 'warning': return 'warning'
      case 'critical': return 'error'
      default: return 'info'
    }
  }

  const getConnectionIcon = () => {
    return isConnected ? (
      <WifiIcon sx={{ color: 'success.main' }} />
    ) : (
      <WifiOffIcon sx={{ color: 'error.main' }} />
    )
  }

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å real-time —Å—Ç–∞—Ç—É—Å–æ–º */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" component="h1" gutterBottom>
            üèùÔ∏è Dashboard - Monito Unified v3.0
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Real-time —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ—Å—Ç—Ä–æ–≤–∞ –ë–∞–ª–∏
          </Typography>
        </Box>
        
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <Chip
            icon={getConnectionIcon()}
            label={`WebSocket: ${connectionState}`}
            color={isConnected ? 'success' : 'error'}
            variant={isConnected ? 'filled' : 'outlined'}
          />
          
          <IconButton 
            onClick={requestStats}
            disabled={!isConnected}
            sx={{ 
              backgroundColor: 'primary.main',
              color: 'white',
              '&:hover': {
                backgroundColor: 'primary.dark'
              }
            }}
          >
            <RefreshIcon />
          </IconButton>
        </Box>
      </Box>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"
            value={stats.total_products.toLocaleString()}
            icon={<StoreIcon fontSize="large" />}
            color="primary"
            subtitle="Unified –∫–∞—Ç–∞–ª–æ–≥"
            trend={realTimeStats ? "üîÑ Live" : "+12% –∑–∞ –º–µ—Å—è—Ü"}
          />
        </Grid>
        
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
            value={stats.total_suppliers.toString()}
            icon={<BusinessIcon fontSize="large" />}
            color="secondary"
            subtitle="–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏"
            trend="+2 –Ω–æ–≤—ã—Ö"
          />
        </Grid>
        
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è"
            value={`${stats.avg_savings}%`}
            icon={<MoneyIcon fontSize="large" />}
            color="success"
            subtitle="–ü–æ unified –∫–∞—Ç–∞–ª–æ–≥—É"
            trend={realTimeStats?.price_trends ? 
              `${realTimeStats.price_trends.trend_direction === 'up' ? 'üìà' : 'üìâ'} ${realTimeStats.price_trends.trend_percent}%` : 
              "+2.1% vs –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
            }
          />
        </Grid>
        
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è"
            value={stats.updates_today.toString()}
            icon={<TrendingUpIcon fontSize="large" />}
            color="info"
            subtitle="–¶–µ–Ω—ã –∏ —Ç–æ–≤–∞—Ä—ã"
            trend={realTimeStats ? "üîÑ Real-time" : "–ü–æ—Å–ª–µ–¥–Ω–µ–µ: 2 –º–∏–Ω –Ω–∞–∑–∞–¥"}
          />
        </Grid>
        
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="API Response Time"
            value={`${stats.api_response_time}ms`}
            icon={<SpeedIcon fontSize="large" />}
            color="warning"
            subtitle="–°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç"
            trend="Excellent"
          />
        </Grid>
        
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="System Health"
            value="100%"
            icon={<CheckCircleIcon fontSize="large" />}
            color={getSystemHealthColor(stats.system_health) as any}
            subtitle="–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
            trend="Uptime: 99.9%"
          />
        </Grid>
      </Grid>

      {/* –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} lg={8}>
          <Paper sx={{ p: 3, height: 450 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">
                üìà –¢—Ä–µ–Ω–¥—ã —Ü–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
              </Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Chip 
                  label="Area"
                  color={chartType === 'area' ? 'primary' : 'default'}
                  onClick={() => setChartType('area')}
                  size="small"
                />
                <Chip 
                  label="Line"
                  color={chartType === 'line' ? 'primary' : 'default'}
                  onClick={() => setChartType('line')}
                  size="small"
                />
              </Box>
            </Box>
            <PriceChart type={chartType} height={350} />
          </Paper>
        </Grid>
        
        <Grid item xs={12} lg={4}>
          <Paper sx={{ p: 3, height: 450 }}>
            <Typography variant="h6" gutterBottom>
              üî• –¢–æ–ø–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            </Typography>
            <TopDeals />
          </Paper>
        </Grid>
      </Grid>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} lg={6}>
          <Paper sx={{ p: 3, height: 400 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">
                üí∞ –≠–∫–æ–Ω–æ–º–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
              </Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Chip 
                  label="Bar"
                  color={savingsChartType === 'bar' ? 'primary' : 'default'}
                  onClick={() => setSavingsChartType('bar')}
                  size="small"
                />
                <Chip 
                  label="Pie"
                  color={savingsChartType === 'pie' ? 'primary' : 'default'}
                  onClick={() => setSavingsChartType('pie')}
                  size="small"
                />
              </Box>
            </Box>
            <SavingsChart type={savingsChartType} height={320} />
          </Paper>
        </Grid>
        
        <Grid item xs={12} lg={6}>
          <Paper sx={{ p: 3, height: 400 }}>
            <Typography variant="h6" gutterBottom>
              üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </Typography>
            <RecentActivity />
          </Paper>
        </Grid>
      </Grid>

      {/* Real-time Price Updates */}
      {recentPriceUpdates.length > 0 && (
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                ‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω (real-time)
              </Typography>
              <Grid container spacing={2}>
                {recentPriceUpdates.slice(0, 6).map((update, index) => (
                  <Grid item xs={12} sm={6} md={4} key={index}>
                    <Card sx={{ 
                      border: 1, 
                      borderColor: update.price_change_percent > 0 ? 'warning.main' : 'success.main',
                      borderRadius: 2
                    }}>
                      <CardContent sx={{ pb: 2 }}>
                        <Typography variant="subtitle2" gutterBottom>
                          {update.product_name}
                        </Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                          {update.supplier} ‚Ä¢ {update.category}
                        </Typography>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <Typography variant="body2">
                            {new Intl.NumberFormat('id-ID', {
                              style: 'currency',
                              currency: 'IDR',
                              minimumFractionDigits: 0,
                            }).format(update.new_price)}
                          </Typography>
                          <Chip
                            label={`${update.price_change_percent > 0 ? '+' : ''}${update.price_change_percent.toFixed(1)}%`}
                            color={update.price_change_percent > 0 ? 'warning' : 'success'}
                            size="small"
                          />
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Paper>
          </Grid>
        </Grid>
      )}

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Card sx={{ cursor: 'pointer', '&:hover': { bgcolor: 'action.hover' } }}>
                <CardContent>
                  <Typography variant="subtitle1">üîç –ü–æ–∏—Å–∫ –≤ unified –∫–∞—Ç–∞–ª–æ–≥–µ</Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã —Å –ª—É—á—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –æ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                  </Typography>
                </CardContent>
              </Card>
              
              <Card sx={{ cursor: 'pointer', '&:hover': { bgcolor: 'action.hover' } }}>
                <CardContent>
                  <Typography variant="subtitle1">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</Typography>
                  <Typography variant="body2" color="text.secondary">
                    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—É
                  </Typography>
                </CardContent>
              </Card>
              
              <Card sx={{ cursor: 'pointer', '&:hover': { bgcolor: 'action.hover' } }}>
                <CardContent>
                  <Typography variant="subtitle1">üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</Typography>
                  <Typography variant="body2" color="text.secondary">
                    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∏ —ç–∫–æ–Ω–æ–º–∏–∏
                  </Typography>
                </CardContent>
              </Card>
            </Box>
          </Paper>
        </Grid>
        
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              ‚öôÔ∏è Real-time –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <FormControlLabel
                control={
                  <Switch
                    checked={enableNotifications}
                    onChange={(e) => setEnableNotifications(e.target.checked)}
                  />
                }
                label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω"
              />
              
              <Typography variant="body2" color="text.secondary">
                WebSocket —Å—Ç–∞—Ç—É—Å: {connectionState}
              </Typography>
              
              {realTimeStats && (
                <Typography variant="body2" color="success.main">
                  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {recentPriceUpdates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω
                </Typography>
              )}
            </Box>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  )
} 