#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç MON-004 –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é BatchLLMProcessorV2 —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import sys
import os
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_batch_llm_integration_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ OpenAI API"""
    print("üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ MON-004")
    print("=" * 40)
    
    try:
        from modules.batch_llm_processor_v2 import BatchLLMProcessorV2, BatchChatGPTProcessor
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        test_products = [
            {
                'original_name': 'iPhone 14 Pro 128GB Space Black',
                'price': 999.99,
                'unit': 'pcs',
                'currency': 'USD'
            },
            {
                'original_name': 'iPhone 14 Pro 128GB space black',  # –ü–æ—Ö–æ–∂–∏–π –¥–ª—è RapidFuzz
                'price': 999.99,
                'unit': 'pcs',
                'currency': 'USD'
            },
            {
                'original_name': 'Samsung Galaxy S23 Ultra 256GB',
                'price': 1199.99,
                'unit': 'pcs',
                'currency': 'USD'
            }
        ]
        
        supplier_info = {
            'name': 'Test Electronics Store',
            'location': 'USA'
        }
        
        print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤: {len(test_products)}")
        print(f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_info['name']}")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ ProcessorV2
        processor_v2 = BatchLLMProcessorV2()
        print(f"‚úÖ BatchLLMProcessorV2 —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 2: Backward compatibility
        legacy_processor = BatchChatGPTProcessor()  
        print(f"‚úÖ Backward compatibility (BatchChatGPTProcessor)")
        
        # –¢–µ—Å—Ç 3: RapidFuzz filtering (–±–µ–∑ API)
        filtered_products = processor_v2._rapidfuzz_prefilter(test_products)
        print(f"üîç RapidFuzz filtering:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö: {len(test_products)}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(filtered_products)}")
        print(f"   –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: {len(test_products) - len(filtered_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π
        batches = processor_v2._create_optimal_batches(filtered_products)
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π:")
        print(f"   –ë–∞—Ç—á–µ–π: {len(batches)}")
        for i, batch in enumerate(batches):
            print(f"   Batch {i+1}: {len(batch)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –¢–µ—Å—Ç 5: JSONL –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if batches:
            jsonl_data = processor_v2._prepare_jsonl_batch(batches[0], supplier_info)
            print(f"üìÑ JSONL –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞:")
            print(f"   –†–∞–∑–º–µ—Ä: {len(jsonl_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            jsonl_lines = jsonl_data.strip().split('\n')
            print(f"   –°—Ç—Ä–æ–∫: {len(jsonl_lines)}")
        
        # –¢–µ—Å—Ç 6: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if batches:
            prompt = processor_v2._create_optimized_prompt(jsonl_data, supplier_info)
            print(f"üìù –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
            print(f"   –†–∞–∑–º–µ—Ä: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –°–ª–æ–≤: {len(prompt.split())}")
            print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç 'JSONL': {'‚úÖ' if 'JSONL' in prompt else '‚ùå'}")
        
        # –¢–µ—Å—Ç 7: –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
        processor_v2.stats.input_products = len(test_products)
        processor_v2.stats.filtered_products = len(filtered_products)
        processor_v2.stats.tokens_input = 500
        processor_v2.stats.tokens_output = 300
        processor_v2.stats.api_calls = 1
        processor_v2.stats.cost_usd = 0.005
        
        cost_savings = processor_v2._calculate_cost_savings()
        print(f"üí∞ –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è):")
        print(f"   –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cost_savings.get('theoretical_cost', 0):.4f}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cost_savings.get('actual_cost', 0):.4f}")
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {cost_savings.get('savings_percent', 0):.1f}%")
        
        # –¢–µ—Å—Ç 8: –û—Ç—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_report = processor_v2.get_optimization_report()
        print(f"üìä –û—Ç—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        print(f"   RapidFuzz: {'‚úÖ' if optimization_report['mon_004_optimizations']['rapidfuzz_prefiltering'] else '‚ùå'}")
        print(f"   JSONL: {'‚úÖ' if optimization_report['mon_004_optimizations']['jsonl_format'] else '‚ùå'}")
        print(f"   Similarity threshold: {optimization_report['mon_004_optimizations']['similarity_threshold']}")
        
        print(f"\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print(f"‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã MON-004 —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"üîÑ Backward compatibility —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        print(f"üìà –ì–æ—Ç–æ–≤–æ –∫ production –≤–Ω–µ–¥—Ä–µ–Ω–∏—é")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_without_openai_key():
    """–¢–µ—Å—Ç –±–µ–∑ OpenAI API –∫–ª—é—á–∞"""
    print("\nüîê –¢–ï–°–¢ –ë–ï–ó OPENAI API –ö–õ–Æ–ß–ê")
    print("-" * 30)
    
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        old_key = os.environ.get('OPENAI_API_KEY')
        if 'OPENAI_API_KEY' in os.environ:
            del os.environ['OPENAI_API_KEY']
        
        from modules.batch_llm_processor_v2 import BatchLLMProcessorV2
        
        # –°–æ–∑–¥–∞–µ–º processor –±–µ–∑ –∫–ª—é—á–∞
        processor = BatchLLMProcessorV2()
        
        test_products = [
            {'original_name': 'Test Product 1', 'price': 10.0, 'unit': 'pcs'},
            {'original_name': 'Test Product 2', 'price': 20.0, 'unit': 'pcs'}
        ]
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
        result = processor.standardize_products_batch(test_products)
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å error result –±–µ–∑ API –∫–ª—é—á–∞
        if not result['success'] and 'API –∫–ª—é—á' in result.get('error', ''):
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è API –∫–ª—é—á–∞")
            success = True
        else:
            print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ API –∫–ª—é—á–∞")
            success = False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á
        if old_key:
            os.environ['OPENAI_API_KEY'] = old_key
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–µ–∑ API –∫–ª—é—á–∞: {e}")
        return False

def test_empty_products():
    """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüì≠ –¢–ï–°–¢ –° –ü–£–°–¢–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("-" * 25)
    
    try:
        from modules.batch_llm_processor_v2 import BatchLLMProcessorV2
        
        processor = BatchLLMProcessorV2()
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
        result = processor.standardize_products_batch([])
        
        if result['success'] and result['total_products'] == 0:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
            return True
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def show_mon_004_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É MON-004"""
    print("\nüìã –°–í–û–î–ö–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–ò MON-004")
    print("=" * 35)
    
    components = [
        "‚úÖ BatchLLMProcessorV2 - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å",
        "‚úÖ LLMStats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
        "‚úÖ RapidFuzz pre-filtering - –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è",
        "‚úÖ JSONL batch —Ñ–æ—Ä–º–∞—Ç - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞",
        "‚úÖ Intelligent token optimization",
        "‚úÖ Cost calculation - —Ä–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏",
        "‚úÖ Backward compatibility - BatchChatGPTProcessor"
    ]
    
    optimizations = [
        "üîç RapidFuzz: 85% similarity threshold –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏",
        "üìÑ JSONL: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö",
        "üß† GPT-3.5-turbo: 10x –¥–µ—à–µ–≤–ª–µ —á–µ–º GPT-4",
        "üìù –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤",
        "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫–æ–Ω–æ–º–∏–∏"
    ]
    
    print("üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    for component in components:
        print(f"   {component}")
    
    print(f"\n‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    for optimization in optimizations:
        print(f"   {optimization}")
    
    print(f"\nüí∞ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚Ä¢ 30-40% —ç–∫–æ–Ω–æ–º–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ API")
    print(f"   ‚Ä¢ 20-30% –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"   ‚Ä¢ Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    
    print(f"\nüöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:")
    print(f"   ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"   ‚úÖ –¢–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã")
    print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    print(f"   ‚úÖ Backward compatibility")
    print(f"   üîÑ –ì–æ—Ç–æ–≤ –∫ production –≤–Ω–µ–¥—Ä–µ–Ω–∏—é")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MON-004")
    print("="*45)
    
    all_tests_passed = True
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    if not test_batch_llm_integration_simple():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç –±–µ–∑ API –∫–ª—é—á–∞
    if not test_without_openai_key():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if not test_empty_products():
        all_tests_passed = False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    show_mon_004_summary()
    
    print(f"\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    
    if all_tests_passed:
        print(f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        print(f"üöÄ MON-004 –≥–æ—Ç–æ–≤ –∫ production")
        print(f"üí° –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: MON-003 (Row Validation)")
    else:
        print(f"‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
    
    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 