#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Evil Test Fixtures –¥–ª—è MON-S01
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ pipeline
"""

import os
import csv
import json
from pathlib import Path
from typing import List, Dict, Any
import pandas as pd

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
try:
    import openpyxl
    from openpyxl.styles import Font, Alignment
    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

try:
    from PIL import Image, ImageDraw, ImageFont
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

class EvilFixtureGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, fixtures_dir: str = "tests/fixtures/evil_files"):
        self.fixtures_dir = Path(fixtures_dir)
        self.fixtures_dir.mkdir(parents=True, exist_ok=True)
        self.expected_dir = Path("tests/fixtures/expected_outputs")
        self.expected_dir.mkdir(parents=True, exist_ok=True)
        
    def create_all_fixtures(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ evil fixtures"""
        print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ Evil Test Fixtures –¥–ª—è MON-S01...")
        
        fixtures_created = []
        
        # 1. Merged cells Excel
        try:
            result = self.create_merged_cells_xlsx()
            fixtures_created.append(result)
            print("‚úÖ merged_cells.xlsx —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è merged_cells.xlsx: {e}")
        
        # 2. Large XLSB (–∏–º–∏—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –±–æ–ª—å—à–æ–π XLSX)
        try:
            result = self.create_large_xlsb()
            fixtures_created.append(result)
            print("‚úÖ large_xlsb.xlsx —Å–æ–∑–¥–∞–Ω (–∏–º–∏—Ç–∞—Ü–∏—è XLSB)")
        except Exception as e:
            print(f"‚ö†Ô∏è large_xlsb.xlsx: {e}")
        
        # 3. Windows-1252 CSV
        try:
            result = self.create_win1252_csv()
            fixtures_created.append(result)
            print("‚úÖ win1252.csv —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è win1252.csv: {e}")
        
        # 4. Header gap Excel  
        try:
            result = self.create_header_gap_xlsx()
            fixtures_created.append(result)
            print("‚úÖ header_gap.xlsx —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è header_gap.xlsx: {e}")
        
        # 5. Mock PDF table (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)
        try:
            result = self.create_mock_pdf_table()
            fixtures_created.append(result)
            print("‚úÖ pdf_table.txt —Å–æ–∑–¥–∞–Ω (mock PDF)")
        except Exception as e:
            print(f"‚ö†Ô∏è pdf_table.txt: {e}")
        
        # 6. Mock OCR image (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
        try:
            result = self.create_mock_ocr_image()
            fixtures_created.append(result)
            print("‚úÖ ocr_table.txt —Å–æ–∑–¥–∞–Ω (mock image)")
        except Exception as e:
            print(f"‚ö†Ô∏è ocr_table.txt: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç fixtures
        self.create_fixtures_manifest(fixtures_created)
        
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω–æ {len(fixtures_created)} evil fixtures")
        return fixtures_created
    
    def create_merged_cells_xlsx(self) -> Dict[str, Any]:
        """Evil Fixture 1: Excel —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ –∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏"""
        
        if not OPENPYXL_AVAILABLE:
            # Fallback –Ω–∞ pandas
            data = {
                '–¢–æ–≤–∞—Ä': ['iPhone 14', 'Samsung S23', 'MacBook Pro', 'iPad Air'],
                '–¶–µ–Ω–∞': ['=B2*1.2', '89999', '=150000', '59999'],
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ù–æ—É—Ç–±—É–∫–∏', '–ü–ª–∞–Ω—à–µ—Ç—ã'],
                '–û–ø–∏—Å–∞–Ω–∏–µ': ['–ù–æ–≤—ã–π iPhone\n—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏\n—è—á–µ–π–∫–∞–º–∏', 'Samsung Galaxy', 'Apple MacBook', 'Apple iPad']
            }
            df = pd.DataFrame(data)
            file_path = self.fixtures_dir / "merged_cells.xlsx"
            df.to_excel(file_path, index=False)
            
            expected = {
                'filename': 'merged_cells.xlsx',
                'expected_rows_in': 4,
                'expected_rows_out': 4,
                'contains_formulas': True,
                'has_merged_cells': True,
                'challenges': ['Excel formulas', 'Multiline text', 'Mixed data types']
            }
        else:
            # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ openpyxl —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
            from openpyxl import Workbook
            from openpyxl.utils import get_column_letter
            
            wb = Workbook()
            ws = wb.active
            ws.title = "Evil Products"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
            ws['A1'] = '–¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏'
            ws.merge_cells('A1:D1')
            ws['A1'].font = Font(bold=True, size=14)
            ws['A1'].alignment = Alignment(horizontal='center')
            
            # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞ (—Ä—É–±)', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ']
            for i, header in enumerate(headers, 1):
                cell = ws.cell(row=2, column=i, value=header)
                cell.font = Font(bold=True)
            
            # –î–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
            products = [
                ['iPhone 14 Pro', '=120000*1.2', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π\n—Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple\n—Å –∫–∞–º–µ—Ä–æ–π 48MP'],
                ['Samsung Galaxy S23', 89999, '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', ''],  # –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                ['MacBook Pro 14"', '=200000+50000', '–ù–æ—É—Ç–±—É–∫–∏', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫'],
                ['', 59999, '–ü–ª–∞–Ω—à–µ—Ç—ã', 'iPad Air M1'],  # –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                ['AirPods Pro', '=25000/100*120', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏'],
            ]
            
            for i, product in enumerate(products, 3):
                for j, value in enumerate(product, 1):
                    ws.cell(row=i, column=j, value=value)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —è—á–µ–µ–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            ws.merge_cells('D3:D4')
            ws['D3'] = '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n–¥–ª—è –¥–≤—É—Ö —Ç–æ–≤–∞—Ä–æ–≤'
            
            file_path = self.fixtures_dir / "merged_cells.xlsx"
            wb.save(file_path)
            
            expected = {
                'filename': 'merged_cells.xlsx',
                'expected_rows_in': 5,
                'expected_rows_out': 4,  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞
                'contains_formulas': True,
                'has_merged_cells': True,
                'challenges': ['Merged cells', 'Excel formulas', 'Empty cells', 'Multiline text']
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(self.expected_dir / "merged_cells_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_large_xlsb(self) -> Dict[str, Any]:
        """Evil Fixture 2: –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª 150x130 (–∏–º–∏—Ç–∞—Ü–∏—è XLSB)"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        import random
        
        data = []
        categories = ['–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ù–æ—É—Ç–±—É–∫–∏', '–ü–ª–∞–Ω—à–µ—Ç—ã', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–¢–í', '–ê—É–¥–∏–æ']
        brands = ['Apple', 'Samsung', 'Xiaomi', 'Sony', 'LG', 'Huawei', 'ASUS', 'HP']
        
        for i in range(150):
            row = {
                'ID': f'PROD_{i+1:03d}',
                '–ù–∞–∑–≤–∞–Ω–∏–µ': f'{random.choice(brands)} {random.choice(["Pro", "Max", "Ultra", "Mini"])} {random.randint(10,99)}',
                '–¶–µ–Ω–∞': random.randint(5000, 200000),
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': random.choice(categories),
                '–ë—Ä–µ–Ω–¥': random.choice(brands),
                '–û–ø–∏—Å–∞–Ω–∏–µ': f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {i+1} —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': random.randint(0, 100),
                '–°–∫–∏–¥–∫–∞': random.randint(0, 50),
                '–†–µ–π—Ç–∏–Ω–≥': round(random.uniform(3.0, 5.0), 1),
                '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å': random.choice(['–í –Ω–∞–ª–∏—á–∏–∏', '–ü–æ–¥ –∑–∞–∫–∞–∑', '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏']),
            }
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 120 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 130
            for j in range(120):
                row[f'–î–æ–ø_–ø–æ–ª–µ_{j+1}'] = f'–ó–Ω–∞—á–µ–Ω–∏–µ_{j+1}_{i+1}'
            
            data.append(row)
        
        df = pd.DataFrame(data)
        file_path = self.fixtures_dir / "large_xlsb.xlsx"
        df.to_excel(file_path, index=False)
        
        expected = {
            'filename': 'large_xlsb.xlsx',
            'expected_rows_in': 150,
            'expected_rows_out': 150,
            'columns_count': 130,
            'file_size_mb': round(os.path.getsize(file_path) / (1024*1024), 2),
            'challenges': ['Large file size', 'Many columns', 'Memory usage']
        }
        
        with open(self.expected_dir / "large_xlsb_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_win1252_csv(self) -> Dict[str, Any]:
        """Evil Fixture 3: CSV —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Windows-1252"""
        
        # –î–∞–Ω–Ω—ã–µ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ Windows-1252
        products = [
            ['–¢–æ–≤–∞—Ä', '–¶–µ–Ω–∞', '–û–ø–∏—Å–∞–Ω–∏–µ'],
            ['–°–º–∞—Ä—Ç—Ñ–æ–Ω "iPhone"', '99 999‚ÇΩ', '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –∫–∞–º–µ—Ä–æ–π‚Äî–æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'],
            ['–ù–æ—É—Ç–±—É–∫ ‚Ññ1', '150 000—Ä.', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤‚Äî–≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
            ['–ü–ª–∞–Ω—à–µ—Ç "iPad"', '59 999‚ÇΩ', '–ü–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–±–æ—Ç—ã‚Äî–ª–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π'],
            ['–ù–∞—É—à–Ω–∏–∫–∏', '25 000—Ä.', '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º‚Äîpremium –∫–∞—á–µ—Å—Ç–≤–æ'],
        ]
        
        file_path = self.fixtures_dir / "win1252.csv"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Windows-1252
        with open(file_path, 'w', encoding='cp1252', newline='') as f:
            writer = csv.writer(f, delimiter=';')  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            for row in products:
                writer.writerow(row)
        
        expected = {
            'filename': 'win1252.csv',
            'expected_rows_in': 4,  # –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            'expected_rows_out': 4,
            'encoding': 'cp1252',
            'delimiter': ';',
            'challenges': ['Windows-1252 encoding', 'Special characters', 'European CSV format']
        }
        
        with open(self.expected_dir / "win1252_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_header_gap_xlsx(self) -> Dict[str, Any]:
        """Evil Fixture 4: Excel —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö"""
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        data = {
            '–ù–∞–∑–≤–∞–Ω–∏–µ': ['iPhone 14', 'Samsung S23', 'MacBook Pro'],
            '': ['99999', '89999', '200000'],  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ù–æ—É—Ç–±—É–∫–∏'],
            'Unnamed: 3': ['Apple', 'Samsung', 'Apple'],  # –ü–ª–æ—Ö–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏
            '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': ['–ù–æ–≤—ã–π iPhone', 'Galaxy S23', 'MacBook Pro M2'],
        }
        
        df = pd.DataFrame(data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ —Å–µ—Ä–µ–¥–∏–Ω–µ
        empty_row = pd.DataFrame([['', '', '', '', '']], columns=df.columns)
        df = pd.concat([empty_row, df.iloc[:1], empty_row, df.iloc[1:]], ignore_index=True)
        
        file_path = self.fixtures_dir / "header_gap.xlsx"
        df.to_excel(file_path, index=False)
        
        expected = {
            'filename': 'header_gap.xlsx',
            'expected_rows_in': 3,  # –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            'expected_rows_out': 3,
            'challenges': ['Empty column names', 'Empty rows', 'Unnamed columns', 'Data gaps']
        }
        
        with open(self.expected_dir / "header_gap_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_mock_pdf_table(self) -> Dict[str, Any]:
        """Evil Fixture 5: Mock PDF table (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)"""
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º PDF —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ —Ç–µ–∫—Å—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PDF)
        pdf_content = """
PDF TABLE SIMULATION
====================

–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤ 2024
–ö–æ–º–ø–∞–Ω–∏—è: –û–û–û "–¢–µ—Å—Ç –°–∏—Å—Ç–µ–º—Å"
–î–∞—Ç–∞: 15.01.2024

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞     ‚îÇ –¶–µ–Ω–∞     ‚îÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è   ‚îÇ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ iPhone 15 Pro       ‚îÇ 120,000  ‚îÇ –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã   ‚îÇ –ù–æ–≤–∏–Ω–∫–∞      ‚îÇ
‚îÇ MacBook Air M2      ‚îÇ 150,000  ‚îÇ –ù–æ—É—Ç–±—É–∫–∏    ‚îÇ –í –Ω–∞–ª–∏—á–∏–∏    ‚îÇ
‚îÇ iPad Pro 12.9"      ‚îÇ 80,000   ‚îÇ –ü–ª–∞–Ω—à–µ—Ç—ã    ‚îÇ –ü–æ–¥ –∑–∞–∫–∞–∑    ‚îÇ
‚îÇ AirPods Pro 2       ‚îÇ 25,000   ‚îÇ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã  ‚îÇ –°–∫–∏–¥–∫–∞ 10%   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

–û–±—â–∏–π –∏—Ç–æ–≥: 4 —Ç–æ–≤–∞—Ä–∞
–ö–æ–Ω—Ç–∞–∫—Ç—ã: info@test.com
        """
        
        file_path = self.fixtures_dir / "pdf_table.txt"
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(pdf_content)
        
        expected = {
            'filename': 'pdf_table.txt',
            'expected_rows_in': 4,
            'expected_rows_out': 4,
            'format': 'mock_pdf',
            'challenges': ['PDF table extraction', 'ASCII table parsing', 'Non-standard format']
        }
        
        with open(self.expected_dir / "pdf_table_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_mock_ocr_image(self) -> Dict[str, Any]:
        """Evil Fixture 6: Mock OCR image (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)"""
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –∫–∞–∫ —Ç–µ–∫—Å—Ç
        ocr_content = """
OCR IMAGE SIMULATION
===================

–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:

–ü–†–ê–ô–°-–õ–ò–°–¢
----------

—Ç–æ–≤–∞—Ä:           iPhone14Pro
—Ü–µ–Ω–∞:            99999—Ä—É–±
–∫–∞—Ç–µ–≥–æ—Ä–∏—è:       —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã
–æ–ø–∏—Å–∞–Ω–∏–µ:        —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π—Ç–µ–ª–µ—Ñ–æ–Ω

—Ç–æ–≤–∞—Ä:           SamsungS23
—Ü–µ–Ω–∞:            89999
–∫–∞—Ç–µ–≥–æ—Ä–∏—è:       —Ç–µ–ª–µ—Ñ–æ–Ω—ã  
–æ–ø–∏—Å–∞–Ω–∏–µ:        android —Å–º–∞—Ä—Ç—Ñ–æ–Ω

—Ç–æ–≤–∞—Ä:           macbookpro
—Ü–µ–Ω–∞:            200000—Ä
–∫–∞—Ç–µ–≥–æ—Ä–∏—è:       –Ω–æ—É—Ç–±—É–∫–∏
–æ–ø–∏—Å–∞–Ω–∏–µ:        –Ω–æ—É—Ç–±—É–∫–¥–ª—è—Ä–∞–±–æ—Ç—ã

–ö–û–ù–ï–¶ –¢–ê–ë–õ–ò–¶–´

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —Å –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏,
—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º–∏ –¥–ª—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        
        file_path = self.fixtures_dir / "ocr_table.txt"
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(ocr_content)
        
        expected = {
            'filename': 'ocr_table.txt',
            'expected_rows_in': 3,
            'expected_rows_out': 3,
            'format': 'mock_ocr',
            'challenges': ['OCR text extraction', 'Text parsing', 'Format recognition', 'Typos and errors']
        }
        
        with open(self.expected_dir / "ocr_table_expected.json", 'w', encoding='utf-8') as f:
            json.dump(expected, f, indent=2, ensure_ascii=False)
        
        return expected
    
    def create_fixtures_manifest(self, fixtures: List[Dict[str, Any]]):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –≤—Å–µ—Ö fixtures"""
        
        manifest = {
            'mon_s01_fixtures': {
                'description': 'Evil test fixtures for MON-S01 regression testing',
                'total_fixtures': len(fixtures),
                'created_at': '2024-01-15',
                'fixtures': fixtures
            }
        }
        
        with open(self.fixtures_dir / "fixtures_manifest.json", 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìã –°–æ–∑–¥–∞–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç fixtures: {len(fixtures)} —Ñ–∞–π–ª–æ–≤")

def main():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö evil fixtures"""
    generator = EvilFixtureGenerator()
    fixtures = generator.create_all_fixtures()
    
    print(f"\nüéØ MON-S01 Evil Fixtures –≥–æ—Ç–æ–≤—ã!")
    print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: tests/fixtures/evil_files/")
    print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: tests/fixtures/expected_outputs/")
    
    return fixtures

if __name__ == "__main__":
    main() 