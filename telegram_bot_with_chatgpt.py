#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å ChatGPT –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è Price List Analyzer
"""

import os
import sys
import json
import asyncio
import logging
import requests
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from telegram import Update, Document
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.google_sheets_manager import GoogleSheetsManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBotWithChatGPT:
    """Telegram –±–æ—Ç —Å ChatGPT –∏ Google Sheets"""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.openai_key = os.getenv('OPENAI_API_KEY')
        self.google_sheets = GoogleSheetsManager()
        self.temp_dir = "data/temp"
        os.makedirs(self.temp_dir, exist_ok=True)
        
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.openai_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Price List Analyzer —Å ChatGPT!*

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ ChatGPT-4
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º
2. –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é Google Sheets —Ç–∞–±–ª–∏—Ü—É

*–ö–æ–º–∞–Ω–¥—ã:*
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
/sheet - —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets
/test - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞! üìä
        """
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞*

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ Excel: .xlsx, .xls (–¥–æ 20 –ú–ë)

*–ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
‚Ä¢ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö

*Google Sheets —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:*
‚Ä¢ Master Table - —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤

*–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*
"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        sheets_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if self.google_sheets.is_connected() else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
        chatgpt_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if self.openai_key else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        help_text += f"‚Ä¢ Google Sheets: {sheets_status}\n"
        help_text += f"‚Ä¢ ChatGPT API: {chatgpt_status}\n"
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        try:
            if self.google_sheets.is_connected():
                stats = self.google_sheets.get_stats()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                worksheet = self.google_sheets.get_or_create_worksheet("Master Table")
                if worksheet:
                    all_records = worksheet.get_all_records()
                    total_products = len(all_records)
                    
                    # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    headers = worksheet.row_values(1) if worksheet.row_count > 0 else []
                    suppliers = [h.replace('_Price', '') for h in headers if h.endswith('_Price')]
                    
                    stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Google Sheets*

*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}
‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len(suppliers)}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(set(r.get('Category', '') for r in all_records if r.get('Category')))}

*–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏:*
"""
                    if suppliers:
                        for supplier in suppliers[:10]:
                            stats_text += f"‚Ä¢ {supplier}\n"
                        if len(suppliers) > 10:
                            stats_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(suppliers) - 10}\n"
                    else:
                        stats_text += "‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
                    
                    stats_text += f"\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({self.google_sheets.get_sheet_url()})"
                else:
                    stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"
            else:
                stats_text = "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"
            
            await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def sheet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /sheet - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É"""
        if self.google_sheets.is_connected():
            url = self.google_sheets.get_sheet_url()
            await update.message.reply_text(
                f"üìä [–û—Ç–∫—Ä—ã—Ç—å Google Sheets —Ç–∞–±–ª–∏—Ü—É]({url})", 
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
        test_message = await update.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É...")
        
        try:
            # –¢–µ—Å—Ç ChatGPT
            chatgpt_ok = await self._test_chatgpt()
            
            # –¢–µ—Å—Ç Google Sheets
            sheets_ok = self.google_sheets.is_connected()
            
            result_text = f"""
üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã*

ü§ñ *ChatGPT API:* {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if chatgpt_ok else '‚ùå –û—à–∏–±–∫–∞'}
üíæ *Google Sheets:* {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' if sheets_ok else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}

*–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ:* {'üü¢ –ü–æ–ª–Ω–∞—è' if chatgpt_ok and sheets_ok else 'üü° –ß–∞—Å—Ç–∏—á–Ω–∞—è' if chatgpt_ok or sheets_ok else 'üî¥ –ù–µ –≥–æ—Ç–æ–≤'}
            """
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=test_message.message_id,
                text=result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=test_message.message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        document: Document = update.message.document
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        validation_result = self._validate_file(document)
        if not validation_result['valid']:
            await update.message.reply_text(f"‚ùå {validation_result['error']}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if not self.google_sheets.is_connected():
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            return
        
        processing_message = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")
        
        try:
            start_time = datetime.now()
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await context.bot.get_file(document.file_id)
            file_path = os.path.join(self.temp_dir, document.file_name)
            await file.download_to_drive(file_path)
            
            logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {document.file_name}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text="üìÑ –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞..."
            )
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
            extracted_data = await self._extract_excel_data(file_path, document.file_name)
            
            if not extracted_data.get('products'):
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –≤ —Ñ–∞–π–ª–µ"
                )
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text="ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ChatGPT..."
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT
            standardized_data = await self._process_with_chatgpt(extracted_data)
            
            if not standardized_data:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ ChatGPT"
                )
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text="üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets..."
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
            sheets_result = self.google_sheets.update_master_table(standardized_data)
            
            if 'error' in sheets_result:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {sheets_result['error']}"
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier_name = standardized_data.get('supplier', {}).get('name', 'Unknown')
            self.google_sheets.create_supplier_summary(supplier_name, standardized_data.get('products', []))
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = self._generate_success_report(standardized_data, sheets_result, processing_time)
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text=report,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ ChatGPT")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: `{str(e)}`"
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text=error_text,
                parse_mode=ParseMode.MARKDOWN
            )
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except:
                pass
    
    def _validate_file(self, document: Document) -> dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞"""
        if not document.file_name.lower().endswith(('.xlsx', '.xls')):
            return {'valid': False, 'error': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)'}
        
        max_size = 20 * 1024 * 1024  # 20 MB
        if document.file_size > max_size:
            return {'valid': False, 'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë'}
        
        return {'valid': True}
    
    async def _extract_excel_data(self, file_path: str, file_name: str) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
        import pandas as pd
        
        supplier_name = os.path.splitext(file_name)[0]
        df = pd.read_excel(file_path)
        
        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        product_col = None
        price_col = None
        
        for col in df.columns:
            col_lower = str(col).lower()
            if any(keyword in col_lower for keyword in ['product', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'item', 'name']):
                product_col = col
            if any(keyword in col_lower for keyword in ['price', '—Ü–µ–Ω–∞', 'cost', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                price_col = col
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        products = []
        for idx, row in df.iterrows():
            try:
                name = str(row[product_col] if product_col else row.iloc[0]).strip()
                price_str = str(row[price_col] if price_col else row.iloc[1])
                
                # –û—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã
                import re
                price_clean = re.sub(r'[^\d.,]', '', price_str)
                if price_clean:
                    price = float(price_clean.replace(',', '.'))
                else:
                    continue
                
                if len(name) > 2 and price > 0:
                    products.append({
                        'original_name': name,
                        'price': price,
                        'unit': 'pcs'
                    })
            except:
                continue
        
        return {
            'file_type': 'excel',
            'supplier': {'name': supplier_name},
            'products': products
        }
    
    async def _process_with_chatgpt(self, data: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ChatGPT"""
        try:
            products = data.get('products', [])[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Ç–æ–≤–∞—Ä–∞–º–∏
            supplier_name = data.get('supplier', {}).get('name', 'Unknown')
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ChatGPT
            products_text = ""
            for i, product in enumerate(products, 1):
                products_text += f"{i}. {product['original_name']} | {product['price']} | {product['unit']}\n"
            
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ "{supplier_name}" –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ.

–¢–û–í–ê–†–´:
{products_text}

–í–µ—Ä–Ω–∏ JSON –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "supplier": {{
    "name": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
    "contact": "",
    "confidence": 0.9
  }},
  "products": [
    {{
      "original_name": "–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
      "standardized_name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
      "price": —Ü–µ–Ω–∞_—á–∏—Å–ª–æ,
      "unit": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è_–µ–¥–∏–Ω–∏—Ü–∞(pcs/kg/l/m/box)",
      "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è_—Ç–æ–≤–∞—Ä–∞",
      "confidence": 0.95
    }}
  ],
  "data_quality": {{
    "extraction_confidence": 0.9,
    "source_clarity": "high",
    "potential_errors": []
  }}
}}

–ü–†–ê–í–ò–õ–ê:
- –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–π –µ–¥–∏–Ω–∏—Ü—ã: —à—Ç‚Üípcs, –∫–≥‚Üíkg, –ª‚Üíl, –º‚Üím
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: electronics, food, materials, etc.
- –£–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
- –°–æ—Ö—Ä–∞–Ω—è–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ original_name"""
            
            headers = {
                'Authorization': f'Bearer {self.openai_key}',
                'Content-Type': 'application/json'
            }
            
            data_payload = {
                'model': 'gpt-3.5-turbo',
                'messages': [
                    {'role': 'system', 'content': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.'},
                    {'role': 'user', 'content': prompt}
                ],
                'max_tokens': 2000,
                'temperature': 0.1
            }
            
            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers=headers,
                json=data_payload,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                content = content.strip()
                
                # –£–¥–∞–ª–µ–Ω–∏–µ markdown –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
                if content.startswith('```json'):
                    content = content[7:]
                elif content.startswith('```'):
                    content = content[3:]
                    
                if content.endswith('```'):
                    content = content[:-3]
                
                content = content.strip()
                
                # –ü–æ–∏—Å–∫ JSON –±–ª–æ–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    content = json_match.group(0)
                
                # –ü–∞—Ä—Å–∏–Ω–≥ JSON
                parsed_data = json.loads(content)
                logger.info(f"ChatGPT —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª {len(parsed_data.get('products', []))} —Ç–æ–≤–∞—Ä–æ–≤")
                return parsed_data
                
            else:
                logger.error(f"–û—à–∏–±–∫–∞ ChatGPT API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT: {e}")
            return None
    
    async def _test_chatgpt(self) -> bool:
        """–¢–µ—Å—Ç ChatGPT API"""
        try:
            headers = {
                'Authorization': f'Bearer {self.openai_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'model': 'gpt-3.5-turbo',
                'messages': [{'role': 'user', 'content': 'Test message'}],
                'max_tokens': 10
            }
            
            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=10
            )
            
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ChatGPT: {e}")
            return False
    
    def _generate_success_report(self, data: dict, sheets_result: dict, processing_time: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        supplier_name = data.get('supplier', {}).get('name', 'Unknown')
        products_count = len(data.get('products', []))
        confidence = data.get('data_quality', {}).get('extraction_confidence', 0)
        
        report = f"""
‚úÖ *–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ ChatGPT!*

üè™ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {supplier_name}
üì¶ *–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:* {products_count}
ü§ñ *–ö–∞—á–µ—Å—Ç–≤–æ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏:* {confidence:.1%}
‚è± *–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* {processing_time:.1f} —Å–µ–∫

üíæ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets:*
‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {sheets_result.get('new_products', 0)}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {sheets_result.get('updated_prices', 0)}

üîó [–û—Ç–∫—Ä—ã—Ç—å Google Sheets —Ç–∞–±–ª–∏—Ü—É]({self.google_sheets.get_sheet_url()})

*–ß—Ç–æ —Å–¥–µ–ª–∞–ª ChatGPT:*
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–ª –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
‚Ä¢ –ü—Ä–∏–≤–µ–ª –µ–¥–∏–Ω–∏—Ü—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∏–ª –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö

üìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
        """
        
        return report
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º\n"
            "ü§ñ –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —á–µ—Ä–µ–∑ ChatGPT –∏ —Å–æ—Ö—Ä–∞–Ω—é –≤ Google Sheets\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            parse_mode=ParseMode.MARKDOWN
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å ChatGPT...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        sheets_connected = self.google_sheets.is_connected()
        
        print("\n" + "="*60)
        print("ü§ñ TELEGRAM BOT –° CHATGPT –ó–ê–ü–£–©–ï–ù!")
        print("="*60)
        print(f"üìä Google Sheets: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' if sheets_connected else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}")
        print(f"ü§ñ ChatGPT API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.openai_key else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        if sheets_connected:
            print(f"üîó –¢–∞–±–ª–∏—Ü–∞: {self.google_sheets.get_sheet_url()}")
        print("\nüì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        print("üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –ò–ò")
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("="*60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("sheet", self.sheet_command))
        application.add_handler(CommandHandler("test", self.test_command))
        application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫
        application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        bot = TelegramBotWithChatGPT()
        bot.run()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("‚Ä¢ TELEGRAM_BOT_TOKEN –≤ .env")
        print("‚Ä¢ OPENAI_API_KEY –≤ .env")  
        print("‚Ä¢ Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")