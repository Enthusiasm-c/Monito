#!/usr/bin/env python3
"""
–¢–µ—Å—Ç MON-007: Celery Workers –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
- Celery task queue –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- Redis broker –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
- Background jobs –¥–ª—è Telegram Bot  
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ workers
"""

import sys
import os
import time
import tempfile
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_celery_worker_architecture():
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CeleryWorkerV2 (DoD 7.1)"""
    print("\nüîÑ –¢–ï–°–¢ –ê–†–•–ò–¢–ï–ö–¢–£–†–´ CELERY WORKER (DoD 7.1)")
    print("=" * 50)
    
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2, TaskResult, WorkerStats
        
        # –°–æ–∑–¥–∞–µ–º worker (–≤ mock —Ä–µ–∂–∏–º–µ –±–µ–∑ Redis)
        worker = CeleryWorkerV2(
            app_name="test_monito",
            broker_url="redis://localhost:6379/1",  # –û—Ç–¥–µ–ª—å–Ω–∞—è –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            result_backend="redis://localhost:6379/1",
            enable_monitoring=True
        )
        
        print(f"‚úÖ CeleryWorkerV2 —Å–æ–∑–¥–∞–Ω")
        print(f"   Celery: {'‚úÖ' if worker.celery_available else '‚ùå'}")
        print(f"   Redis: {'‚úÖ' if worker.redis_available else '‚ùå'}")
        print(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ' if worker.enable_monitoring else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = [
            'submit_file_processing',
            'submit_llm_processing', 
            'submit_telegram_notification',
            'get_task_result',
            'get_queue_status',
            'get_worker_stats',
            'purge_queue'
        ]
        
        for method in required_methods:
            if hasattr(worker, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dataclass'—ã
        task_result = TaskResult(
            task_id="test_task",
            status="success",
            result={"test": True}
        )
        print(f"‚úÖ TaskResult —Ä–∞–±–æ—Ç–∞–µ—Ç: {task_result.task_id}")
        
        stats = WorkerStats()
        stats.total_tasks = 10
        print(f"‚úÖ WorkerStats —Ä–∞–±–æ—Ç–∞–µ—Ç: {stats.total_tasks} –∑–∞–¥–∞—á")
        
        print(f"\nüéØ DoD MON-007.1 PASSED: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
        return False

def test_async_task_submission():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (DoD 7.2)"""
    print("\nüöÄ –¢–ï–°–¢ ASYNC TASK SUBMISSION (DoD 7.2)")
    print("=" * 45)
    
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2
        
        worker = CeleryWorkerV2(enable_monitoring=True)
        
        # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        task_id_file = worker.submit_file_processing(
            "test_file.xlsx", 
            user_id=123,
            options={"format": "xlsx", "validate": True}
        )
        
        print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: {task_id_file}")
        
        # –¢–µ—Å—Ç 2: LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞
        test_products = [
            {"name": "iPhone 14", "price": 999.99},
            {"name": "Samsung S23", "price": 899.50}
        ]
        
        task_id_llm = worker.submit_llm_processing(
            test_products,
            options={"model": "gpt-4", "batch_size": 50}
        )
        
        print(f"‚úÖ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {task_id_llm}")
        
        # –¢–µ—Å—Ç 3: Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        task_id_telegram = worker.submit_telegram_notification(
            user_id=123,
            message="–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!",
            options={"parse_mode": "Markdown"}
        )
        
        print(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {task_id_telegram}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = worker.get_worker_stats()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
        print(f"   –í—Å–µ–≥–æ: {stats.total_tasks}")
        print(f"   –í –æ—á–µ—Ä–µ–¥–∏: {stats.pending_tasks}")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 –∑–∞–¥–∞—á–∏
        if stats.total_tasks >= 3:
            print(f"\nüéØ DoD MON-007.2 PASSED: –ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-007.2 PARTIAL: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–¥–∞—á")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á: {e}")
        return False

def test_task_result_tracking():
    """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á (DoD 7.3)"""
    print("\nüìä –¢–ï–°–¢ TASK RESULT TRACKING (DoD 7.3)")
    print("=" * 45)
    
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2
        
        worker = CeleryWorkerV2()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        task_id = worker.submit_file_processing("test.xlsx", 123)
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {task_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤ mock —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π)
        task_result = worker.get_task_result(task_id)
        
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏:")
        print(f"   Task ID: {task_result.task_id}")
        print(f"   –°—Ç–∞—Ç—É—Å: {task_result.status}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {task_result.result}")
        print(f"   –û—à–∏–±–∫–∞: {task_result.error}")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if task_result.task_id == task_id:
            print(f"\nüéØ DoD MON-007.3 PASSED: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-007.3 FAILED: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False

def test_queue_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏ (DoD 7.4)"""
    print("\nüì¶ –¢–ï–°–¢ QUEUE MANAGEMENT (DoD 7.4)")
    print("=" * 40)
    
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2
        
        worker = CeleryWorkerV2()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
        worker.submit_file_processing("test1.xlsx", 123)
        worker.submit_llm_processing([{"name": "test"}])
        worker.submit_telegram_notification(123, "test message")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
        queue_status = worker.get_queue_status()
        
        print(f"üîÑ –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π:")
        print(f"   –†–µ–∂–∏–º: {queue_status.get('mode', 'unknown')}")
        
        workers_info = queue_status.get('workers', {})
        print(f"   –í–æ—Ä–∫–µ—Ä—ã: {workers_info.get('active', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        queues = queue_status.get('queues', {})
        print(f"   –û—á–µ—Ä–µ–¥–∏:")
        for queue_name, queue_info in queues.items():
            pending = queue_info.get('pending', 0)
            active = queue_info.get('active', 0)
            print(f"     {queue_name}: {pending} –æ–∂–∏–¥–∞—é—Ç / {active} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ)
        print(f"‚úÖ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–ø—É—â–µ–Ω (—á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏)")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥—è—Ö
        if 'queues' in queue_status:
            print(f"\nüéØ DoD MON-007.4 PASSED: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-007.4 FAILED: –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {e}")
        return False

def test_worker_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ (DoD 7.5)"""
    print("\nüìà –¢–ï–°–¢ WORKER MONITORING (DoD 7.5)")
    print("=" * 40)
    
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2
        
        worker = CeleryWorkerV2(enable_monitoring=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for i in range(3):
            worker.submit_file_processing(f"test_{i}.xlsx", 123 + i)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = worker.get_worker_stats()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.total_tasks}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats.successful_tasks}")
        print(f"   –û—à–∏–±–æ–∫: {stats.failed_tasks}")
        print(f"   –í –æ—á–µ—Ä–µ–¥–∏: {stats.pending_tasks}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: {stats.active_workers}")
        print(f"   –î–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏: {stats.queue_length}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.average_processing_time_ms:.1f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å MON-006
        try:
            if worker.metrics:
                print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MON-006 —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è MON-006 –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except:
            print(f"üìù MON-006 –º–µ—Ç—Ä–∏–∫–∏ –≤ mock —Ä–µ–∂–∏–º–µ")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if stats.total_tasks > 0:
            print(f"\nüéØ DoD MON-007.5 PASSED: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-007.5 PARTIAL: –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return True  # OK –¥–ª—è mock —Ä–µ–∂–∏–º–∞
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def test_scalability_features():
    """–¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ (DoD 7.6)"""
    print("\n‚ö° –¢–ï–°–¢ SCALABILITY FEATURES (DoD 7.6)")
    print("=" * 45)
    
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã
        workers = []
        for i in range(3):
            worker = CeleryWorkerV2(
                app_name=f"test_monito_{i}",
                enable_monitoring=False
            )
            workers.append(worker)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á
        total_tasks = 0
        for i, worker in enumerate(workers):
            # –ö–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏
            worker.submit_file_processing(f"file_{i}.xlsx", 100 + i)
            worker.submit_llm_processing([{"product": f"test_{i}"}])
            total_tasks += 2
        
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_tasks} –∑–∞–¥–∞—á –Ω–∞ {len(workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        for i, worker in enumerate(workers):
            stats = worker.get_worker_stats()
            print(f"   –í–æ—Ä–∫–µ—Ä {i}: {stats.total_tasks} –∑–∞–¥–∞—á")
        
        # –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö convenience —Ñ—É–Ω–∫—Ü–∏–π
        from modules.celery_worker_v2 import (
            submit_file_async,
            submit_llm_async,
            get_task_status,
            get_global_celery_worker
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        global_task_id = submit_file_async("global_test.xlsx", 999)
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è submit_file_async: {global_task_id}")
        
        global_result = get_task_status(global_task_id)
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_task_status: {global_result.status}")
        
        global_worker = get_global_celery_worker()
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω: {global_worker.app_name}")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        if len(workers) >= 3 and total_tasks >= 6:
            print(f"\nüéØ DoD MON-007.6 PASSED: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-007.6 PARTIAL: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å")
            return True  # OK –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏: {e}")
        return False

def test_integration_with_pipeline():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Monito pipeline (DoD 7.7)"""
    print("\nüîó –¢–ï–°–¢ INTEGRATION WITH PIPELINE (DoD 7.7)")
    print("=" * 50)
    
    try:
        from modules.celery_worker_v2 import CeleryWorkerV2
        
        worker = CeleryWorkerV2(enable_monitoring=True)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π pipeline —á–µ—Ä–µ–∑ Celery
        print(f"üìã –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ pipeline:")
        
        # –≠—Ç–∞–ø 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        file_task = worker.submit_file_processing(
            "pipeline_test.xlsx", 
            123, 
            {"pipeline": True, "stage": "file_processing"}
        )
        print(f"   1Ô∏è‚É£ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_task}")
        
        # –≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∏—Ä—É–µ–º)
        validation_data = [{"product": "test", "price": 100} for _ in range(50)]
        
        # –≠—Ç–∞–ø 3: LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞
        llm_task = worker.submit_llm_processing(
            validation_data,
            {"pipeline": True, "stage": "llm_processing"}
        )
        print(f"   2Ô∏è‚É£ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞: {llm_task}")
        
        # –≠—Ç–∞–ø 4: –ó–∞–ø–∏—Å—å –≤ Sheets (—á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –±—ã–ª–∞ –±—ã)
        # –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∫ —á–∞—Å—Ç—å pipeline
        
        # –≠—Ç–∞–ø 5: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notification_task = worker.submit_telegram_notification(
            123,
            "‚úÖ –í–∞—à —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets.",
            {"pipeline": True, "stage": "notification"}
        )
        print(f"   3Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_task}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
        tasks = [file_task, llm_task, notification_task]
        results = []
        
        for task_id in tasks:
            result = worker.get_task_result(task_id)
            results.append(result)
            print(f"   üìä {task_id}: {result.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pipeline
        stats = worker.get_worker_stats()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ pipeline:")
        print(f"   –ó–∞–¥–∞—á –≤ pipeline: {len(tasks)}")
        print(f"   –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.total_tasks} –∑–∞–¥–∞—á")
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π pipeline
        successful_tasks = sum(1 for r in results if r.status in ["success", "completed"])
        
        if successful_tasks >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —É—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–∞
            print(f"\nüéØ DoD MON-007.7 PASSED: Pipeline –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"\n‚ö†Ô∏è DoD MON-007.7 PARTIAL: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True  # OK –¥–ª—è mock —Ä–µ–∂–∏–º–∞
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_dependencies_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π MON-007"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô MON-007")
    print("-" * 30)
    
    dependencies = [
        ('celery', 'üîÑ Celery task queue'),
        ('redis', 'üíæ Redis broker'),
        ('json', 'üìÑ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è'),
        ('time', '‚è±Ô∏è –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏'),
        ('os', 'üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'),
    ]
    
    available_count = 0
    total_count = len(dependencies)
    
    for lib_name, description in dependencies:
        try:
            if lib_name in ['json', 'time', 'os']:
                __import__(lib_name)  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            else:
                __import__(lib_name)
            print(f"‚úÖ {lib_name}: {description}")
            available_count += 1
        except ImportError:
            print(f"‚ùå {lib_name}: {description} (–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{total_count} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    if available_count >= 3:  # –ú–∏–Ω–∏–º—É–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        print("üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("   pip install celery redis")
        print("   docker run -d -p 6379:6379 redis")
        return False

def check_mon_007_dod():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Definition of Done –¥–ª—è MON-007"""
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê DoD MON-007:")
    print("-" * 25)
    
    dod_results = {}
    
    # DoD 7.1: Architecture
    print("üîÑ DoD 7.1: Celery worker architecture...")
    dod_results['architecture'] = test_celery_worker_architecture()
    
    # DoD 7.2: Task submission
    print("üöÄ DoD 7.2: Async task submission...")
    dod_results['task_submission'] = test_async_task_submission()
    
    # DoD 7.3: Result tracking
    print("üìä DoD 7.3: Task result tracking...")
    dod_results['result_tracking'] = test_task_result_tracking()
    
    # DoD 7.4: Queue management
    print("üì¶ DoD 7.4: Queue management...")
    dod_results['queue_management'] = test_queue_management()
    
    # DoD 7.5: Worker monitoring
    print("üìà DoD 7.5: Worker monitoring...")
    dod_results['worker_monitoring'] = test_worker_monitoring()
    
    # DoD 7.6: Scalability
    print("‚ö° DoD 7.6: Scalability features...")
    dod_results['scalability'] = test_scalability_features()
    
    # DoD 7.7: Pipeline integration
    print("üîó DoD 7.7: Pipeline integration...")
    dod_results['pipeline_integration'] = test_integration_with_pipeline()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    passed_count = sum(dod_results.values())
    total_count = len(dod_results)
    
    print(f"\nüìä –ò–¢–û–ì–û DoD MON-007:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_count}/{total_count}")
    
    for criterion, passed in dod_results.items():
        status = "PASSED" if passed else "FAILED"
        print(f"   ‚Ä¢ {criterion}: {status}")
    
    overall_passed = passed_count >= 6  # –ú–∏–Ω–∏–º—É–º 6 –∏–∑ 7
    
    if overall_passed:
        print(f"\nüéØ DoD MON-007 OVERALL: PASSED")
    else:
        print(f"\n‚ö†Ô∏è DoD MON-007 OVERALL: NEEDS_IMPROVEMENT")
    
    return overall_passed

def create_performance_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MON-007"""
    print("\nüìä –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò MON-007")
    print("=" * 50)
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    scenarios = [
        {"workers": 1, "concurrent": 4, "throughput": "4 —Ñ–∞–π–ª–∞/–º–∏–Ω", "latency": "60s"},
        {"workers": 3, "concurrent": 12, "throughput": "12 —Ñ–∞–π–ª–æ–≤/–º–∏–Ω", "latency": "20s"},
        {"workers": 5, "concurrent": 20, "throughput": "20 —Ñ–∞–π–ª–æ–≤/–º–∏–Ω", "latency": "12s"},
    ]
    
    print("| –í–æ—Ä–∫–µ—Ä–æ–≤ | –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å | Throughput | Latency | MON-007 –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ |")
    print("|----------|----------------|------------|---------|-------------------|")
    
    for scenario in scenarios:
        workers = scenario["workers"]
        concurrent = scenario["concurrent"]
        throughput = scenario["throughput"]
        latency = scenario["latency"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        features = "Queue+Monitor+Scale"
        
        print(f"| {workers:8d} | {concurrent:14d} | {throughput:10s} | {latency:7s} | {features} |")
    
    print(f"\nüéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò MON-007:")
    print(f"   üîÑ Celery: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á")
    print(f"   üì¶ Queues: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –ø–æ —Ç–∏–ø–∞–º")
    print(f"   ‚ö° Parallel: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
    print(f"   üì± Background: –§–æ–Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram")
    print(f"   üìà Monitoring: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MON-006 –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    print(f"   üîß Scale: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MON-007"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MON-007: Celery Workers")
    print("="*45)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    test_dependencies_check()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DoD
    check_mon_007_dod()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    create_performance_simulation()
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MON-007 –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üí° –î–ª—è –ø–æ–ª–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏:")
    print(f"   pip install celery redis flower")
    print(f"   docker run -d -p 6379:6379 redis")
    print(f"   python worker.py worker")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 