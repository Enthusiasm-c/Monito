#!/usr/bin/env python3
"""
=============================================================================
TELEGRAM INTEGRATION TEST
=============================================================================
–í–µ—Ä—Å–∏—è: 3.0
–¶–µ–ª—å: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ —Å unified API
=============================================================================
"""

import asyncio
import json
import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ü—Ä–æ—Å—Ç–æ–π logger –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
class SimpleLogger:
    def info(self, msg): print(f"INFO: {msg}")
    def error(self, msg, exc_info=False): print(f"ERROR: {msg}")
    def warning(self, msg): print(f"WARNING: {msg}")
    def debug(self, msg): print(f"DEBUG: {msg}")

logger = SimpleLogger()

async def test_telegram_integration():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("ü§ñ " + "="*60)
    print("ü§ñ TELEGRAM INTEGRATION TEST - MONITO UNIFIED API v3.0")
    print("ü§ñ " + "="*60)
    
    try:
        # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\nüì¶ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock utils.logger –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            import types
            utils_module = types.ModuleType('utils')
            utils_module.logger = types.ModuleType('logger')
            utils_module.logger.get_logger = lambda name: SimpleLogger()
            sys.modules['utils'] = utils_module
            sys.modules['utils.logger'] = utils_module.logger
            
            from api.main import create_app
            from api.routers.telegram import UnifiedTelegramBot, TelegramUpdate, TelegramMessage, TelegramChat
            from api.helpers.telegram_sender import TelegramSender, get_telegram_sender
            # from modules.adapters.legacy_integration_adapter import LegacyIntegrationAdapter
            print("‚úÖ –í—Å–µ API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API: {e}")
            print(f"   –¢–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å mock –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ TelegramSender
        print("\nüì§ –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramSender...")
        
        try:
            # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            sender_no_token = TelegramSender()
            print(f"‚úÖ TelegramSender –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {'–≤–∫–ª—é—á–µ–Ω' if sender_no_token.enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
            
            # –¢–µ—Å—Ç —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            sender_with_token = TelegramSender("test_token")
            print(f"‚úÖ TelegramSender —Å —Ç–æ–∫–µ–Ω–æ–º: {'–≤–∫–ª—é—á–µ–Ω' if sender_with_token.enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
            
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–π sender
            global_sender = get_telegram_sender()
            print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π sender: {'–≥–æ—Ç–æ–≤' if global_sender else '–Ω–µ –≥–æ—Ç–æ–≤'}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ TelegramSender: {e}")
            return False
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ Integration Adapter
        print("\nüîå –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ Mock Integration Adapter...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock adapter –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            class MockDBManager:
                def search_master_products(self, query, limit=10):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –ø—Ä–æ–¥—É–∫—Ç—ã
                    class MockProduct:
                        def __init__(self, product_id, name, category):
                            self.product_id = product_id
                            self.standard_name = name
                            self.category = category
                    
                    return [
                        MockProduct(1, "Coca-Cola 330ml", "beverages"),
                        MockProduct(2, "Bintang Beer 620ml", "beverages"),
                        MockProduct(3, "Jasmine Rice 5kg", "food")
                    ]
                
                def get_current_prices_for_product(self, product_id):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock —Ü–µ–Ω—ã
                    class MockPrice:
                        def __init__(self, price, supplier, unit):
                            self.price = price
                            self.supplier_name = supplier
                            self.unit = unit
                    
                    return [
                        MockPrice(15000, "Supplier A", "piece"),
                        MockPrice(17000, "Supplier B", "piece"),
                        MockPrice(13500, "Supplier C", "piece")
                    ]
                
                def get_system_statistics(self):
                    return {
                        'total_products': 150,
                        'total_suppliers': 5,
                        'total_prices': 750,
                        'categories_count': 8,
                        'average_price': 25000,
                        'price_range': {'min': 5000, 'max': 150000},
                        'daily_updates': 25,
                        'last_update': '2024-01-15 10:30:00'
                    }
            
            class MockIntegrationAdapter:
                def __init__(self):
                    self.db_manager = MockDBManager()
            
            mock_adapter = MockIntegrationAdapter()
            print("‚úÖ Mock Integration Adapter —Å–æ–∑–¥–∞–Ω")
            print(f"   –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {len(mock_adapter.db_manager.search_master_products(''))}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Mock Adapter: {e}")
            return False
        
        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ UnifiedTelegramBot
        print("\nü§ñ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ UnifiedTelegramBot...")
        
        try:
            bot = UnifiedTelegramBot(mock_adapter)
            print("‚úÖ UnifiedTelegramBot —Å–æ–∑–¥–∞–Ω")
            print(f"   –ö–æ–º–∞–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {len(bot.commands)}")
            print(f"   –ö–æ–º–∞–Ω–¥—ã: {list(bot.commands.keys())}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return False
        
        # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        print("\nüí¨ –¢–µ—Å—Ç 5: –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏—è
            mock_chat = TelegramChat(id=123456789, type="private", first_name="Test User")
            
            # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
            start_message = TelegramMessage(
                message_id=1,
                chat=mock_chat,
                date=1705401600,
                text="/start"
            )
            
            start_response = await bot.handle_message(start_message)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            print(f"   –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞: {start_response.get('method')}")
            print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(start_response.get('text', ''))}")
            print(f"   –ï—Å—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {'reply_markup' in start_response}")
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            search_message = TelegramMessage(
                message_id=2,
                chat=mock_chat,
                date=1705401600,
                text="coca-cola"
            )
            
            search_response = await bot.handle_search_query(search_message, "coca-cola")
            print("‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            print(f"   –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞: {search_response.get('method')}")
            print(f"   –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞' in search_response.get('text', '')}")
            
            # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats
            stats_message = TelegramMessage(
                message_id=3,
                chat=mock_chat,
                date=1705401600,
                text="/stats"
            )
            
            stats_response = await bot.handle_stats(stats_message)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /stats –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {'total_products' in stats_response.get('text', '')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return False
        
        # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç Webhook update
        print("\nüîÑ –¢–µ—Å—Ç 6: –¢–µ—Å—Ç Webhook update...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock update
            webhook_update = TelegramUpdate(
                update_id=12345,
                message=TelegramMessage(
                    message_id=10,
                    chat=mock_chat,
                    date=1705401600,
                    text="/help"
                )
            )
            
            update_response = await bot.process_update(webhook_update)
            print("‚úÖ Webhook update –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            print(f"   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {update_response.get('method')}")
            print(f"   –ü–æ–º–æ—â—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {'–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞' in update_response.get('text', '')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Webhook update: {e}")
            return False
        
        # –¢–µ—Å—Ç 7: –í–∞–ª–∏–¥–∞—Ü–∏—è Pydantic —Å—Ö–µ–º
        print("\nüìã –¢–µ—Å—Ç 7: –í–∞–ª–∏–¥–∞—Ü–∏—è Pydantic —Å—Ö–µ–º...")
        
        try:
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ TelegramUpdate
            valid_update_data = {
                "update_id": 123,
                "message": {
                    "message_id": 456,
                    "chat": {"id": 789, "type": "private"},
                    "date": 1705401600,
                    "text": "test message"
                }
            }
            
            validated_update = TelegramUpdate(**valid_update_data)
            print("‚úÖ TelegramUpdate –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞")
            print(f"   Update ID: {validated_update.update_id}")
            print(f"   Message text: {validated_update.message.text}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º: {e}")
            return False
        
        # –¢–µ—Å—Ç 8: –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        print("\nüéØ –¢–µ—Å—Ç 8: –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...")
        
        try:
            # –¢–µ—Å—Ç /catalog
            catalog_response = await bot.handle_catalog(mock_chat)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /catalog —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç /deals
            deals_response = await bot.handle_top_deals(mock_chat)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /deals —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç /recommend
            recommend_response = await bot.handle_recommendations(mock_chat)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /recommend —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
            return False
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("="*60)
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   ü§ñ UnifiedTelegramBot: –ì–æ—Ç–æ–≤")
        print(f"   üì§ TelegramSender: –ì–æ—Ç–æ–≤") 
        print(f"   üîå Integration Adapter: Mock –≥–æ—Ç–æ–≤")
        print(f"   üìã Pydantic —Å—Ö–µ–º—ã: –í–∞–ª–∏–¥–Ω—ã")
        print(f"   üí¨ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {len(bot.commands)} —à—Ç")
        print(f"   üì¶ Webhook endpoints: –ì–æ—Ç–æ–≤—ã")
        
        print(f"\nüéØ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –∫–æ–º–∞–Ω–¥—ã")
        print(f"   ‚úÖ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print(f"   ‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"   ‚úÖ –¢–æ–ø–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        print(f"   ‚úÖ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print(f"   ‚úÖ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        print(f"   ‚úÖ Webhook processing")
        
        print(f"\nüöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production:")
        print(f"   ‚úÖ Background processing –≥–æ—Ç–æ–≤")
        print(f"   ‚úÖ Error handling –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å unified API")
        print(f"   ‚úÖ Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è")
        print(f"   ‚úÖ TelegramSender –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        print(f"\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print(f"   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å .env: TELEGRAM_BOT_TOKEN=your_token")
        print(f"   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å API: python api_server.py")
        print(f"   4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook —á–µ—Ä–µ–∑ API")
        print(f"   5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = asyncio.run(test_telegram_integration())
    
    if result:
        print(f"\nüéâ –§–ê–ó–ê 3.2 TELEGRAM INTEGRATION - –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! üéâ")
        sys.exit(0)
    else:
        print(f"\nüí• –§–ê–ó–ê 3.2 TELEGRAM INTEGRATION - –û–®–ò–ë–ö–ê! üí•")
        sys.exit(1) 