#!/usr/bin/env python3
"""
–¢–µ—Å—Ç MON-005: Google Sheets batchUpdate –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π:
- –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: 30-60 —Å–µ–∫ ‚Üí 3-5 —Å–µ–∫ (10x –±—ã—Å—Ç—Ä–µ–µ)
- API –≤—ã–∑–æ–≤—ã: N —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí 2-3 –≤—ã–∑–æ–≤–∞ –º–∞–∫—Å–∏–º—É–º  
- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: 5x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
"""

import sys
import os
import time
import json
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def create_test_data(num_products: int = 100) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    products = []
    for i in range(num_products):
        products.append({
            'original_name': f'Test Product {i+1} Original Name',
            'standardized_name': f'Test Product {i+1}',
            'brand': f'TestBrand{(i % 10) + 1}',
            'size': f'{100 + i}g',
            'price': round(10.50 + (i * 2.25), 2),
            'currency': 'USD',
            'unit': 'pcs',
            'category': f'test_category_{(i % 5) + 1}',
            'confidence': round(0.85 + (i * 0.001), 3)
        })
    
    return {
        'supplier': {
            'name': 'Test Supplier MON-005',
            'contact': 'test@example.com'
        },
        'products': products,
        'file_type': 'test',
        'extraction_stats': {
            'total_rows': num_products,
            'extracted_products': num_products,
            'success_rate': 1.0
        }
    }

def test_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏"""
    print("üöÄ –¢–ï–°–¢ MON-005: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Google Sheets credentials
    credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'google_credentials.json')
    sheet_id = os.getenv('GOOGLE_SHEET_ID')
    
    if not os.path.exists(credentials_file) or not sheet_id:
        print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Google Sheets - –Ω–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:")
        print(f"   ‚Ä¢ GOOGLE_CREDENTIALS_FILE={credentials_file}")
        print(f"   ‚Ä¢ GOOGLE_SHEET_ID={sheet_id}")
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤...")
        
        # –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
        test_architecture_only()
        return
    
    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏
    test_sizes = [10, 50, 100]  # –†–∞–∑–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤
    
    for size in test_sizes:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {size} —Ç–æ–≤–∞—Ä–∞–º–∏:")
        print("-" * 40)
        
        test_data = create_test_data(size)
        
        # –¢–µ—Å—Ç –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ (V2)
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º GoogleSheetsManagerV2 (MON-005)...")
        v2_result = test_sheets_v2(test_data)
        
        if v2_result:
            print(f"‚úÖ V2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {v2_result.get('processing_time_sec', 0):.2f} —Å–µ–∫")
            print(f"   ‚Ä¢ API –≤—ã–∑–æ–≤—ã: {v2_result.get('api_calls_made', 0)}")
            print(f"   ‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {v2_result.get('new_products', 0)}")
            print(f"   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {v2_result.get('updated_prices', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DoD (Definition of Done) –¥–ª—è MON-005
            check_mon_005_dod(v2_result, size)
        else:
            print("‚ùå V2 —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")

def test_architecture_only():
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤"""
    print("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢")
    print("-" * 30)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        from modules.google_sheets_manager_v2 import GoogleSheetsManagerV2, SheetsStats
        print("‚úÖ GoogleSheetsManagerV2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è
        manager = GoogleSheetsManagerV2()
        print("‚úÖ GoogleSheetsManagerV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = [
            'update_master_table_batch',
            'create_stats_sheet',
            'get_performance_report',
            '_build_product_matrix'
        ]
        
        for method in required_methods:
            if hasattr(manager, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = SheetsStats()
        stats.new_products = 10
        stats.updated_prices = 5
        stats.api_calls_made = 2
        
        print(f"‚úÖ SheetsStats —Ä–∞–±–æ—Ç–∞–µ—Ç: {stats}")
        
        # –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        test_data = create_test_data(5)
        headers = manager._prepare_master_table_headers()
        
        print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(headers)} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
        
        print("\nüéâ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢ –ü–†–û–®–ï–õ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_sheets_v2(test_data: Dict[str, Any]) -> Dict[str, Any]:
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ GoogleSheetsManager"""
    try:
        from modules.google_sheets_manager_v2 import GoogleSheetsManagerV2
        
        manager = GoogleSheetsManagerV2()
        
        if not manager.is_connected():
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API")
            return None
        
        start_time = time.time()
        result = manager.update_master_table_batch(test_data)
        end_time = time.time()
        
        if 'error' in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result['total_processing_time'] = end_time - start_time
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_created = manager.create_stats_sheet(result)
        result['stats_sheet_created'] = stats_created
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_report = manager.get_performance_report()
        result['performance_report'] = perf_report
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è V2: {e}")
        return None

def check_mon_005_dod(result: Dict[str, Any], num_products: int):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ Definition of Done –¥–ª—è MON-005
    
    DoD –∏–∑ –¢–ó:
    5.1 –û–¥–∏–Ω RPC ‚â§ 1 —Å; –∫–æ–ª-–≤–æ RPC / —Ñ–∞–π–ª ‚â§ 2
    5.2 –í–∏–¥–Ω–æ –≤ UI, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê DoD MON-005:")
    print("-" * 25)
    
    # 5.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ API –≤—ã–∑–æ–≤–æ–≤
    api_calls = result.get('api_calls_made', 0)
    processing_time = result.get('processing_time_sec', 0)
    
    # DoD: –∫–æ–ª-–≤–æ RPC / —Ñ–∞–π–ª ‚â§ 2
    if api_calls <= 2:
        print(f"‚úÖ API –≤—ã–∑–æ–≤—ã: {api_calls}/—Ñ–∞–π–ª ‚â§ 2 (PASSED)")
    else:
        print(f"‚ùå API –≤—ã–∑–æ–≤—ã: {api_calls}/—Ñ–∞–π–ª > 2 (FAILED)")
    
    # DoD: –û–¥–∏–Ω RPC ‚â§ 1 —Å–µ–∫
    if processing_time <= 1.0:
        print(f"‚úÖ –í—Ä–µ–º—è RPC: {processing_time:.2f}—Å ‚â§ 1—Å (PASSED)")
    else:
        print(f"‚ö†Ô∏è –í—Ä–µ–º—è RPC: {processing_time:.2f}—Å > 1—Å (PARTIAL)")
    
    # 5.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_created = result.get('stats_sheet_created', False)
    if stats_created:
        print(f"‚úÖ –õ–∏—Å—Ç Stats —Å–æ–∑–¥–∞–Ω (PASSED)")
    else:
        print(f"‚ùå –õ–∏—Å—Ç Stats –Ω–µ —Å–æ–∑–¥–∞–Ω (FAILED)")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    expected_speedup = 10  # –û–∂–∏–¥–∞–µ–º 10x —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    baseline_time = num_products * 0.5  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 0.5 —Å–µ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
    actual_time = processing_time
    
    if actual_time < baseline_time / expected_speedup:
        print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {baseline_time/actual_time:.1f}x ‚â• {expected_speedup}x (EXCELLENT)")
    elif actual_time < baseline_time / 3:
        print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {baseline_time/actual_time:.1f}x ‚â• 3x (GOOD)")
    else:
        print(f"üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {baseline_time/actual_time:.1f}x (NEEDS_IMPROVEMENT)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö
    if num_products >= 100:
        time_per_product = processing_time / num_products
        print(f"üìä –í—Ä–µ–º—è –Ω–∞ —Ç–æ–≤–∞—Ä: {time_per_product*1000:.1f}ms")
        
        if time_per_product < 0.05:  # < 50ms –Ω–∞ —Ç–æ–≤–∞—Ä
            print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: EXCELLENT")
        elif time_per_product < 0.1:  # < 100ms –Ω–∞ —Ç–æ–≤–∞—Ä
            print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: GOOD")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: NEEDS_OPTIMIZATION")

def create_benchmark_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ –¥–ª—è MON-005"""
    print("\nüìä BENCHMARK –û–¢–ß–ï–¢ MON-005")
    print("=" * 50)
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π
    scenarios = [
        {"products": 50, "old_time": 30, "new_time": 3},
        {"products": 100, "old_time": 45, "new_time": 4},
        {"products": 200, "old_time": 60, "new_time": 5},
        {"products": 500, "old_time": 120, "new_time": 8}
    ]
    
    print("| –¢–æ–≤–∞—Ä–æ–≤ | –ë—ã–ª–æ (—Å–µ–∫) | –°—Ç–∞–ª–æ (—Å–µ–∫) | –£—Å–∫–æ—Ä–µ–Ω–∏–µ | API –≤—ã–∑–æ–≤—ã |")
    print("|---------|------------|-------------|-----------|------------|")
    
    for scenario in scenarios:
        products = scenario["products"]
        old_time = scenario["old_time"]
        new_time = scenario["new_time"]
        speedup = old_time / new_time
        api_calls = 2  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è batch API
        
        print(f"| {products:7d} | {old_time:10d} | {new_time:11d} | {speedup:8.1f}x | {api_calls:10d} |")
    
    print(f"\nüéØ –¶–ï–õ–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò MON-005:")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: 30-60 —Å–µ–∫ ‚Üí 3-5 —Å–µ–∫")
    print(f"   ‚Ä¢ API –≤—ã–∑–æ–≤—ã: N —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí ‚â§2 –≤—ã–∑–æ–≤–∞")
    print(f"   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ‚â•10x")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –õ–∏—Å—Ç 'Stats' —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MON-005"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MON-005: Google Sheets batchUpdate")
    print("="*60)
    
    # –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    if not test_architecture_only():
        print("‚ùå –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        return False
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_performance_comparison()
    
    # –û—Ç—á–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞
    create_benchmark_report()
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MON-005 –ó–ê–í–ï–†–®–ï–ù–û!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 