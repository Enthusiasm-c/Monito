#!/usr/bin/env python3
"""
Test AI fallback mechanism
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Setup paths
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

from modules.pdf_parser import PDFParser

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_fallback_mechanism():
    """Test AI to manual parser fallback"""
    print("üîÑ –¢–ï–°–¢ –ú–ï–•–ê–ù–ò–ó–ú–ê FALLBACK (AI ‚Üí –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π)")
    print("=" * 60)
    
    # PDF file path
    pdf_file = "/Users/denisdomashenko/price_list_analyzer/1. PT. Global Anugrah Pasifik (groceries item).pdf"
    
    if not os.path.exists(pdf_file):
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_file}")
        return
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {os.path.basename(pdf_file)}")
    
    # Save original API key
    original_api_key = os.getenv('OPENAI_API_KEY')
    
    # Test 1: With API key (should use AI)
    print("\nü§ñ –¢–ï–°–¢ 1: –° API –∫–ª—é—á–æ–º (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI)")
    print("-" * 50)
    
    parser = PDFParser()
    try:
        result_with_ai = parser.extract_products_from_pdf(pdf_file, max_products=10, use_ai=True)
        
        if 'error' in result_with_ai:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result_with_ai['error']}")
        else:
            stats = result_with_ai.get('extraction_stats', {})
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ú–µ—Ç–æ–¥: {stats.get('extraction_method', 'N/A')}")
            print(f"ü§ñ AI Enhanced: {stats.get('ai_enhanced', False)}")
            print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(result_with_ai.get('products', []))}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Test 2: Remove API key (should fallback to manual)
    print("\nüîß –¢–ï–°–¢ 2: –ë–µ–∑ API –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä)")
    print("-" * 50)
    
    # Temporarily remove API key
    if 'OPENAI_API_KEY' in os.environ:
        del os.environ['OPENAI_API_KEY']
    
    try:
        result_fallback = parser.extract_products_from_pdf(pdf_file, max_products=10, use_ai=True)
        
        if 'error' in result_fallback:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result_fallback['error']}")
        else:
            stats = result_fallback.get('extraction_stats', {})
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ú–µ—Ç–æ–¥: {stats.get('extraction_method', 'N/A')}")
            print(f"ü§ñ AI Enhanced: {stats.get('ai_enhanced', False)}")
            print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(result_fallback.get('products', []))}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Test 3: Explicit disable AI
    print("\n‚öôÔ∏è –¢–ï–°–¢ 3: AI —è–≤–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω (use_ai=False)")
    print("-" * 50)
    
    # Restore API key
    if original_api_key:
        os.environ['OPENAI_API_KEY'] = original_api_key
    
    try:
        result_no_ai = parser.extract_products_from_pdf(pdf_file, max_products=10, use_ai=False)
        
        if 'error' in result_no_ai:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result_no_ai['error']}")
        else:
            stats = result_no_ai.get('extraction_stats', {})
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ú–µ—Ç–æ–¥: {stats.get('extraction_method', 'N/A')}")
            print(f"ü§ñ AI Enhanced: {stats.get('ai_enhanced', False)}")
            print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(result_no_ai.get('products', []))}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–û–í FALLBACK")
    print("-" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    print("üîÑ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É AI –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º")

def main():
    """Main function"""
    test_fallback_mechanism()

if __name__ == "__main__":
    main()