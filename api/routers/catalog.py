"""
=============================================================================
MONITO API CATALOG ROUTER
=============================================================================
–í–µ—Ä—Å–∏—è: 3.0
–¶–µ–ª—å: –†–æ—É—Ç–µ—Ä –¥–ª—è unified –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ª—É—á—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏
=============================================================================
"""

from typing import Dict, List, Any, Optional
from fastapi import APIRouter, Request, Depends, Query, HTTPException
from pydantic import BaseModel, Field

from api.schemas.base import PaginatedResponse
from modules.adapters.legacy_integration_adapter import LegacyIntegrationAdapter
from utils.logger import get_logger

logger = get_logger(__name__)

router = APIRouter()

def get_integration_adapter(request: Request) -> LegacyIntegrationAdapter:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è integration adapter"""
    return request.app.state.integration_adapter

# ============================================================================= 
# PYDANTIC SCHEMAS –¥–ª—è Catalog API
# =============================================================================

class CatalogProductResponse(BaseModel):
    """–°—Ö–µ–º–∞ —Ç–æ–≤–∞—Ä–∞ –≤ unified –∫–∞—Ç–∞–ª–æ–≥–µ"""
    
    product_id: str = Field(description="ID —Ç–æ–≤–∞—Ä–∞ –≤ unified —Å–∏—Å—Ç–µ–º–µ")
    standard_name: str = Field(description="–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    brand: Optional[str] = Field(description="–ë—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞")
    category: str = Field(description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞")
    description: Optional[str] = Field(description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ
    best_price: float = Field(description="–õ—É—á—à–∞—è —Ü–µ–Ω–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
    best_supplier: str = Field(description="–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å –ª—É—á—à–µ–π —Ü–µ–Ω–æ–π")
    unit: str = Field(description="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
    price_count: int = Field(description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–Ω")
    price_min: float = Field(description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    price_max: float = Field(description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    price_avg: float = Field(description="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–æ–Ω–æ–º–∏–∏
    savings_amount: Optional[float] = Field(description="–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏ (–æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã)")
    savings_percentage: Optional[float] = Field(description="–ü—Ä–æ—Ü–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏")
    
    # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    supplier_reliability: Optional[float] = Field(description="–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ª—É—á—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    recommendation_score: Optional[float] = Field(description="–û—Ü–µ–Ω–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ –ø–æ–∫—É–ø–∫–µ")
    
    class Config:
        schema_extra = {
            "example": {
                "product_id": "prod_12345",
                "standard_name": "Coca-Cola 330ml Can",
                "brand": "Coca-Cola",
                "category": "beverages",
                "description": "Coca-Cola Original Taste 330ml Aluminum Can",
                "best_price": 8500.0,
                "best_supplier": "PT Global Supply Bali",
                "unit": "pcs",
                "price_count": 5,
                "price_min": 8500.0,
                "price_max": 12000.0,
                "price_avg": 9800.0,
                "savings_amount": 1300.0,
                "savings_percentage": 13.3,
                "supplier_reliability": 4.8,
                "recommendation_score": 0.92
            }
        }

class CatalogSearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
    
    query: Optional[str] = Field(None, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    category: Optional[str] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    brand: Optional[str] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É")
    supplier: Optional[str] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É")
    price_min: Optional[float] = Field(None, ge=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    price_max: Optional[float] = Field(None, ge=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    sort_by: str = Field("best_price", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    sort_order: str = Field("asc", description="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (asc/desc)")
    
    class Config:
        schema_extra = {
            "example": {
                "query": "coca cola",
                "category": "beverages",
                "price_min": 5000,
                "price_max": 15000,
                "sort_by": "best_price",
                "sort_order": "asc"
            }
        }

class TopDealResponse(BaseModel):
    """–°—Ö–µ–º–∞ —Ç–æ–ø–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    product_name: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    product_id: str = Field(description="ID —Ç–æ–≤–∞—Ä–∞")
    category: str = Field(description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    best_price: float = Field(description="–õ—É—á—à–∞—è —Ü–µ–Ω–∞")
    regular_price: float = Field(description="–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞")
    savings_amount: float = Field(description="–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏")
    savings_percentage: float = Field(description="–ü—Ä–æ—Ü–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏")
    supplier: str = Field(description="–ü–æ—Å—Ç–∞–≤—â–∏–∫")
    deal_confidence: float = Field(description="–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    
    class Config:
        schema_extra = {
            "example": {
                "product_name": "Bintang Beer 330ml",
                "product_id": "prod_67890",
                "category": "beverages",
                "best_price": 15000.0,
                "regular_price": 18000.0,
                "savings_amount": 3000.0,
                "savings_percentage": 16.7,
                "supplier": "UD Rahayu Bali",
                "deal_confidence": 0.85
            }
        }

class ProcurementRecommendationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–∞–º"""
    
    required_products: List[Dict[str, Any]] = Field(description="–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    budget_limit: Optional[float] = Field(None, description="–õ–∏–º–∏—Ç –±—é–¥–∂–µ—Ç–∞")
    preferred_suppliers: Optional[List[str]] = Field(None, description="–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏")
    optimize_for: str = Field("cost", description="–ö—Ä–∏—Ç–µ—Ä–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (cost/quality/reliability)")
    
    class Config:
        schema_extra = {
            "example": {
                "required_products": [
                    {"name": "Coca-Cola 330ml", "quantity": 100},
                    {"name": "Bintang Beer 330ml", "quantity": 50}
                ],
                "budget_limit": 2000000,
                "preferred_suppliers": ["PT Global Supply"],
                "optimize_for": "cost"
            }
        }

# =============================================================================
# CATALOG ENDPOINTS
# =============================================================================

@router.get("/search",
           response_model=PaginatedResponse[CatalogProductResponse],
           summary="üîç –ü–æ–∏—Å–∫ –ø–æ unified –∫–∞—Ç–∞–ª–æ–≥—É",
           description="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ unified –∫–∞—Ç–∞–ª–æ–≥–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω –æ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
async def search_catalog(
    request: Request,
    integration_adapter: LegacyIntegrationAdapter = Depends(get_integration_adapter),
    query: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    category: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    brand: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É"),
    supplier: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"),
    price_min: Optional[float] = Query(None, ge=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    price_max: Optional[float] = Query(None, ge=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    sort_by: str = Query("best_price", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    sort_order: str = Query("asc", description="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    limit: int = Query(50, ge=1, le=1000, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
) -> PaginatedResponse[CatalogProductResponse]:
    """
    –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ unified –∫–∞—Ç–∞–ª–æ–≥–µ
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –±—Ä–µ–Ω–¥—É, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    - –ü–æ–∫–∞–∑ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —ç–∫–æ–Ω–æ–º–∏–∏
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –ü–∞–≥–∏–Ω–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ª—É—á—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    logger.info(f"Catalog search: query='{query}', category='{category}', filters={{'price_min': {price_min}, 'price_max': {price_max}}}")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        search_query = query or ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ unified —Å–∏—Å—Ç–µ–º—ã
        if search_query:
            master_products = integration_adapter.db_manager.search_master_products(search_query, limit=limit*2)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            master_products = integration_adapter.db_manager.search_master_products("", limit=limit*2)
        
        catalog_products = []
        
        for product in master_products:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            prices = integration_adapter.db_manager.get_current_prices_for_product(str(product.product_id))
            
            if not prices:
                continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if category and product.category.lower() != category.lower():
                continue
            if brand and product.brand and product.brand.lower() != brand.lower():
                continue
            if supplier:
                supplier_prices = [p for p in prices if p.supplier_name.lower() == supplier.lower()]
                if not supplier_prices:
                    continue
                prices = supplier_prices
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–∞–º
            if price_min is not None:
                prices = [p for p in prices if p.price >= price_min]
            if price_max is not None:
                prices = [p for p in prices if p.price <= price_max]
            
            if not prices:
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–Ω
            price_values = [p.price for p in prices]
            best_price = min(price_values)
            price_max_val = max(price_values)
            price_avg = sum(price_values) / len(price_values)
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            best_price_obj = min(prices, key=lambda p: p.price)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
            savings_amount = price_avg - best_price if price_avg > best_price else 0
            savings_percentage = (savings_amount / price_avg * 100) if price_avg > 0 else 0
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_product = CatalogProductResponse(
                product_id=str(product.product_id),
                standard_name=product.standard_name,
                brand=product.brand or "Unknown",
                category=product.category,
                description=product.description,
                best_price=best_price,
                best_supplier=best_price_obj.supplier_name,
                unit=best_price_obj.unit,
                price_count=len(prices),
                price_min=best_price,
                price_max=price_max_val,
                price_avg=price_avg,
                savings_amount=savings_amount,
                savings_percentage=savings_percentage,
                supplier_reliability=4.5,  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                recommendation_score=0.8 if savings_percentage > 10 else 0.6
            )
            
            catalog_products.append(catalog_product)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        reverse_sort = sort_order.lower() == "desc"
        if sort_by == "best_price":
            catalog_products.sort(key=lambda x: x.best_price, reverse=reverse_sort)
        elif sort_by == "savings_percentage":
            catalog_products.sort(key=lambda x: x.savings_percentage or 0, reverse=reverse_sort)
        elif sort_by == "standard_name":
            catalog_products.sort(key=lambda x: x.standard_name, reverse=reverse_sort)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        offset = (page - 1) * limit
        paginated_products = catalog_products[offset:offset + limit]
        total = len(catalog_products)
        
        logger.info(f"Catalog search completed: found {total} products, page {page}/{(total + limit - 1) // limit}")
        
        return PaginatedResponse.create(
            data=paginated_products,
            page=page,
            limit=limit,
            total=total,
            message=f"Found {total} products matching your criteria"
        )
        
    except Exception as e:
        logger.error(f"Catalog search failed: {e}")
        raise HTTPException(status_code=500, detail=f"Search failed: {str(e)}")

@router.get("/top-deals",
           response_model=List[TopDealResponse],
           summary="üî• –¢–æ–ø–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
           description="–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–µ–π")
async def get_top_deals(
    request: Request,
    integration_adapter: LegacyIntegrationAdapter = Depends(get_integration_adapter),
    limit: int = Query(20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"),
    category: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
) -> List[TopDealResponse]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–µ–π
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≥–¥–µ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ª—É—á—à–µ–π –∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Ä–∞—Å—á–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏–∏
    """
    logger.info(f"Top deals requested: limit={limit}, category={category}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        master_products = integration_adapter.db_manager.search_master_products("", limit=200)
        
        top_deals = []
        
        for product in master_products:
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category and product.category.lower() != category.lower():
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            prices = integration_adapter.db_manager.get_current_prices_for_product(str(product.product_id))
            
            if len(prices) < 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ü–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                continue
            
            price_values = [p.price for p in prices]
            best_price = min(price_values)
            avg_price = sum(price_values) / len(price_values)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
            savings_amount = avg_price - best_price
            savings_percentage = (savings_amount / avg_price * 100) if avg_price > 0 else 0
            
            # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç–∫–æ–Ω–æ–º–∏–µ–π –±–æ–ª—å—à–µ 5%
            if savings_percentage < 5:
                continue
            
            best_price_obj = min(prices, key=lambda p: p.price)
            
            deal = TopDealResponse(
                product_name=product.standard_name,
                product_id=str(product.product_id),
                category=product.category,
                best_price=best_price,
                regular_price=avg_price,
                savings_amount=savings_amount,
                savings_percentage=savings_percentage,
                supplier=best_price_obj.supplier_name,
                deal_confidence=min(0.9, 0.5 + (savings_percentage / 100))  # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞
            )
            
            top_deals.append(deal)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —ç–∫–æ–Ω–æ–º–∏–∏
        top_deals.sort(key=lambda x: x.savings_percentage, reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        top_deals = top_deals[:limit]
        
        logger.info(f"Top deals found: {len(top_deals)} deals")
        
        return top_deals
        
    except Exception as e:
        logger.error(f"Top deals request failed: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get top deals: {str(e)}")

@router.get("/categories",
           response_model=Dict[str, Any],
           summary="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
           description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
async def get_categories(
    request: Request,
    integration_adapter: LegacyIntegrationAdapter = Depends(get_integration_adapter)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ü–µ–Ω
    """
    logger.info("Categories list requested")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        master_products = integration_adapter.db_manager.search_master_products("", limit=1000)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        
        for product in master_products:
            category = product.category or "uncategorized"
            
            if category not in categories:
                categories[category] = {
                    "name": category,
                    "product_count": 0,
                    "supplier_count": set(),
                    "price_range": {"min": float("inf"), "max": 0},
                    "avg_price": 0,
                    "total_prices": []
                }
            
            categories[category]["product_count"] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            prices = integration_adapter.db_manager.get_current_prices_for_product(str(product.product_id))
            
            for price in prices:
                categories[category]["supplier_count"].add(price.supplier_name)
                categories[category]["total_prices"].append(price.price)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
                if price.price < categories[category]["price_range"]["min"]:
                    categories[category]["price_range"]["min"] = price.price
                if price.price > categories[category]["price_range"]["max"]:
                    categories[category]["price_range"]["max"] = price.price
        
        # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result_categories = []
        for cat_name, cat_data in categories.items():
            if cat_data["total_prices"]:
                cat_data["avg_price"] = sum(cat_data["total_prices"]) / len(cat_data["total_prices"])
            else:
                cat_data["price_range"]["min"] = 0
            
            cat_data["supplier_count"] = len(cat_data["supplier_count"])
            del cat_data["total_prices"]  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
            result_categories.append(cat_data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
        result_categories.sort(key=lambda x: x["product_count"], reverse=True)
        
        logger.info(f"Categories retrieved: {len(result_categories)} categories")
        
        return {
            "categories": result_categories,
            "total_categories": len(result_categories),
            "total_products": sum(cat["product_count"] for cat in result_categories)
        }
        
    except Exception as e:
        logger.error(f"Categories request failed: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get categories: {str(e)}")

@router.post("/procurement-recommendations",
            response_model=Dict[str, Any],
            summary="üõí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–∞–º", 
            description="–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")
async def get_procurement_recommendations(
    request: Request,
    procurement_request: ProcurementRecommendationRequest,
    integration_adapter: LegacyIntegrationAdapter = Depends(get_integration_adapter)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∑–∞–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞–∫—É–ø–∫–∏
    —Å —É—á–µ—Ç–æ–º —Ü–µ–Ω, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    Returns:
        –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–∞–º
    """
    logger.info(f"Procurement recommendations requested for {len(procurement_request.required_products)} products")
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è unified —Å–∏—Å—Ç–µ–º—ã
        required_products = procurement_request.required_products
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ unified —Å–∏—Å—Ç–µ–º—É
        recommendations = integration_adapter.get_procurement_recommendations_report(required_products)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ API —Ñ–æ—Ä–º–∞—Ç
        result = {
            "total_products_requested": len(required_products),
            "budget_limit": procurement_request.budget_limit,
            "optimization_criteria": procurement_request.optimize_for,
            "recommendations": recommendations.get("catalog_data", {}),
            "cost_analysis": recommendations.get("analytics", {}),
            "supplier_recommendations": recommendations.get("additional_analysis", {}).get("supplier_recommendations", []),
            "total_estimated_cost": 0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
            "potential_savings": 0,     # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
            "feasible_within_budget": True
        }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        catalog_products = result["recommendations"].get("products", [])
        total_cost = 0
        total_savings = 0
        
        for product in catalog_products:
            if isinstance(product, dict):
                total_cost += product.get("best_price", 0)
                total_savings += product.get("savings", 0)
        
        result["total_estimated_cost"] = total_cost
        result["potential_savings"] = total_savings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if procurement_request.budget_limit and total_cost > procurement_request.budget_limit:
            result["feasible_within_budget"] = False
            result["budget_overrun"] = total_cost - procurement_request.budget_limit
        
        logger.info(f"Procurement recommendations generated: total_cost={total_cost}, savings={total_savings}")
        
        return result
        
    except Exception as e:
        logger.error(f"Procurement recommendations failed: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to generate recommendations: {str(e)}") 