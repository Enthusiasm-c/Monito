#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ InteligentPreProcessor 
–≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è GoogleSheetsManager
"""

import logging
from typing import Dict, List, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class DataAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
    
    def __init__(self):
        self.unit_mapping = {
            'kg': 'kg',
            'kilogram': 'kg',
            'kilo': 'kg',
            'l': 'l',
            'liter': 'l',
            'litre': 'l',
            'pcs': 'pcs',
            'piece': 'pcs',
            'pack': 'pack',
            'bottle': 'bottle',
            'can': 'can',
            'box': 'box'
        }
        
        self.category_mapping = {
            # –û–≤–æ—â–∏
            'tomato': 'vegetables',
            'potato': 'vegetables',
            'onion': 'vegetables',
            'carrot': 'vegetables',
            'cabbage': 'vegetables',
            'lettuce': 'vegetables',
            'spinach': 'vegetables',
            'capsicum': 'vegetables',
            'pepper': 'vegetables',
            'chili': 'spices',
            'cucumber': 'vegetables',
            'eggplant': 'vegetables',
            'mushroom': 'vegetables',
            'celery': 'vegetables',
            'corn': 'vegetables',
            
            # –ó–µ–ª–µ–Ω—å –∏ —Å–ø–µ—Ü–∏–∏
            'basil': 'herbs',
            'parsley': 'herbs',
            'mint': 'herbs',
            'oregano': 'herbs',
            'ginger': 'spices',
            'garlic': 'spices',
            'galangal': 'spices',
            'lemongrass': 'herbs',
            'lime': 'herbs',
            'lemon': 'fruits',
            
            # –§—Ä—É–∫—Ç—ã
            'mango': 'fruits',
            'banana': 'fruits',
            'apple': 'fruits',
            'orange': 'fruits',
            'pear': 'fruits',
            'grape': 'fruits',
            
            # –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            'cheese': 'dairy',
            'milk': 'dairy',
            'yogurt': 'dairy',
            'butter': 'dairy',
            
            # –ú—è—Å–æ
            'chicken': 'meat',
            'beef': 'meat',
            'pork': 'meat',
            'fish': 'seafood',
            
            # –ó–µ—Ä–Ω–æ–≤—ã–µ –∏ –±–æ–±–æ–≤—ã–µ
            'rice': 'grains',
            'wheat': 'grains',
            'bean': 'legumes',
            'lentil': 'legumes',
            
            # –ù–∞–ø–∏—Ç–∫–∏
            'juice': 'beverages',
            'water': 'beverages',
            'tea': 'beverages',
            'coffee': 'beverages'
        }
    
    def convert_intelligent_to_sheets_format(self, intelligent_result: Dict[str, Any], 
                                           supplier_name: str = "AI_Extracted") -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç InteligentPreProcessor –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è GoogleSheetsManager
        """
        
        logger.info(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets...")
        logger.info(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(intelligent_result.get('total_products', []))} —Ç–æ–≤–∞—Ä–æ–≤, {len(intelligent_result.get('total_prices', []))} —Ü–µ–Ω")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω
            raw_products = intelligent_result.get('total_products', [])
            raw_prices = intelligent_result.get('total_prices', [])
            linked_pairs = intelligent_result.get('product_price_pairs', [])
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–µ–Ω –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            price_by_position = {}
            for price in raw_prices:
                row = price.get('row')
                if row:
                    price_by_position[row] = price
            
            converted_products = []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if linked_pairs:
                logger.info(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(linked_pairs)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä —Ç–æ–≤–∞—Ä-—Ü–µ–Ω–∞")
                
                for pair in linked_pairs:
                    product = pair.get('product', {})
                    price_info = pair.get('price', {})
                    
                    converted_product = self._create_product_from_pair(product, price_info, supplier_name)
                    if converted_product:
                        converted_products.append(converted_product)
            
            else:
                # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                logger.info(f"üîÑ –°–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º...")
                
                for product in raw_products:
                    row = product.get('row')
                    price_info = price_by_position.get(row)
                    
                    converted_product = self._create_product_from_components(product, price_info, supplier_name)
                    if converted_product:
                        converted_products.append(converted_product)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            unique_products = self._deduplicate_products(converted_products)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            result = {
                'supplier': {
                    'name': supplier_name,
                    'type': 'ai_extracted',
                    'contact': 'auto_generated',
                    'extracted_at': datetime.now().isoformat()
                },
                'products': unique_products,
                'data_quality': {
                    'extraction_confidence': intelligent_result.get('recovery_stats', {}).get('data_completeness', 0) / 100,
                    'source_clarity': 'intelligent_preprocessor',
                    'potential_errors': []
                },
                'processing_stats': {
                    'original_products': len(raw_products),
                    'original_prices': len(raw_prices),
                    'linked_pairs': len(linked_pairs),
                    'final_products': len(unique_products),
                    'success_rate': (len(unique_products) / max(len(raw_products), 1)) * 100
                }
            }
            
            logger.info(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            logger.info(f"   üì¶ –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(raw_products)}")
            logger.info(f"   üí∞ –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ü–µ–Ω: {len(raw_prices)}")
            logger.info(f"   üîó –°–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä: {len(linked_pairs)}")
            logger.info(f"   ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(unique_products)}")
            logger.info(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['processing_stats']['success_rate']:.1f}%")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}',
                'supplier': {'name': supplier_name},
                'products': []
            }
    
    def _create_product_from_pair(self, product_info: Dict, price_info: Dict, supplier_name: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã"""
        
        try:
            product_name = product_info.get('name', '').strip()
            price_value = price_info.get('value', 0)
            
            if not product_name or price_value <= 0:
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            unit = self._extract_unit_from_name(product_name)
            category = self._determine_category(product_name)
            
            return {
                'original_name': product_name,
                'standardized_name': self._standardize_name(product_name),
                'price': float(price_value),
                'unit': unit,
                'currency': 'IDR',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏—Ö –ø—Ä–∞–π—Å–æ–≤
                'category': category,
                'brand': 'unknown',
                'size': 'unknown',
                'confidence': min(product_info.get('confidence', 0.8), price_info.get('confidence', 0.8)),
                'source_position': f"R{product_info.get('row', 0)}C{product_info.get('column', 0)}",
                'supplier': supplier_name
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–∞—Ä—ã: {e}")
            return None
    
    def _create_product_from_components(self, product_info: Dict, price_info: Dict, supplier_name: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        
        try:
            product_name = product_info.get('name', '').strip()
            
            if not product_name:
                return None
            
            # –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
            price_value = price_info.get('value', 0) if price_info else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            unit = self._extract_unit_from_name(product_name)
            category = self._determine_category(product_name)
            
            return {
                'original_name': product_name,
                'standardized_name': self._standardize_name(product_name),
                'price': float(price_value) if price_value > 0 else 0,
                'unit': unit,
                'currency': 'IDR',
                'category': category,
                'brand': 'unknown',
                'size': 'unknown',
                'confidence': product_info.get('confidence', 0.8),
                'source_position': f"R{product_info.get('row', 0)}C{product_info.get('column', 0)}",
                'supplier': supplier_name
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            return None
    
    def _extract_unit_from_name(self, name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        
        name_lower = name.lower()
        
        # –ò—â–µ–º —è–≤–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü
        for unit_key, unit_value in self.unit_mapping.items():
            if unit_key in name_lower:
                return unit_value
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        if any(veg in name_lower for veg in ['vegetable', '–æ–≤–æ—â', '–∑–µ–ª–µ–Ω—å']):
            return 'kg'
        elif any(fruit in name_lower for fruit in ['fruit', '—Ñ—Ä—É–∫—Ç']):
            return 'kg'
        elif any(liquid in name_lower for liquid in ['juice', 'milk', 'oil', 'sauce']):
            return 'l'
        elif any(grain in name_lower for grain in ['rice', 'flour', 'sugar']):
            return 'kg'
        
        return 'pcs'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _determine_category(self, name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        
        name_lower = name.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword, category in self.category_mapping.items():
            if keyword in name_lower:
                return category
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–±—â–∏–º —Å–ª–æ–≤–∞–º
        if any(word in name_lower for word in ['fresh', 'organic', 'green', 'leaf']):
            return 'vegetables'
        elif any(word in name_lower for word in ['seed', 'powder', 'dried']):
            return 'spices'
        elif any(word in name_lower for word in ['sauce', 'paste', 'vinegar']):
            return 'condiments'
        
        return 'general'
    
    def _standardize_name(self, name: str) -> str:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
        standardized = ' '.join(name.split())
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)
        standardized = standardized.title()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—â–∏–µ –æ—à–∏–±–∫–∏
        replacements = {
            'Buttom': 'Button',
            'Stringbeen': 'String Bean',
            'Pokcoy': 'Bok Choy',
            'Lolobionda': 'Lollo Bionda',
            'Lolorosso': 'Lollo Rosso'
        }
        
        for old, new in replacements.items():
            standardized = standardized.replace(old, new)
        
        return standardized
    
    def _deduplicate_products(self, products: List[Dict]) -> List[Dict]:
        """–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤"""
        
        unique_products = {}
        
        for product in products:
            name = product.get('standardized_name', '').lower()
            
            if name not in unique_products:
                unique_products[name] = product
            else:
                # –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç, –±–µ—Ä–µ–º —Ç–æ—Ç —á—Ç–æ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π confidence
                existing = unique_products[name]
                if product.get('confidence', 0) > existing.get('confidence', 0):
                    unique_products[name] = product
        
        return list(unique_products.values()) 