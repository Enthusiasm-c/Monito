#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π
"""

import sys
from pathlib import Path
import time

def quick_file_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤"""
    
    print('üöÄ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–´–• –§–ê–ô–õ–ê–•')
    print('=' * 60)
    
    files_to_test = [
        'LIST HARGA UD RAHAYU.xlsx',
        'DOC-20250428-WA0004..xlsx', 
        '1. PT. Global Anugrah Pasifik (groceries item).pdf'
    ]
    
    print('üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:')
    available_files = []
    
    for file_path in files_to_test:
        path = Path(file_path)
        if path.exists():
            size_mb = path.stat().st_size / (1024 * 1024)
            print(f'  ‚úÖ {file_path} ({size_mb:.1f} MB)')
            available_files.append((file_path, size_mb))
        else:
            print(f'  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    return available_files

def quick_excel_parsing():
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel –±–µ–∑ pandas"""
    
    print('\nüìä –ë–´–°–¢–†–´–ô –ü–ê–†–°–ò–ù–ì EXCEL:')
    
    try:
        from openpyxl import load_workbook
        
        excel_files = ['LIST HARGA UD RAHAYU.xlsx', 'DOC-20250428-WA0004..xlsx']
        results = []
        
        for file_path in excel_files:
            if Path(file_path).exists():
                print(f'\n  üìã {file_path}:')
                
                start_time = time.time()
                wb = load_workbook(file_path, read_only=True)
                ws = wb.active
                
                # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                rows = ws.max_row
                cols = ws.max_column
                sheets = len(wb.sheetnames)
                
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
                products_found = 0
                prices_found = 0
                
                for row in range(2, min(12, rows + 1)):
                    for col in range(1, min(6, cols + 1)):
                        cell_value = ws.cell(row=row, column=col).value
                        if cell_value:
                            if isinstance(cell_value, str) and len(cell_value) > 3:
                                products_found += 1
                            elif isinstance(cell_value, (int, float)):
                                prices_found += 1
                
                wb.close()
                process_time = time.time() - start_time
                
                result = {
                    'file': file_path,
                    'rows': rows,
                    'columns': cols,
                    'sheets': sheets,
                    'products_est': products_found,
                    'prices_est': prices_found,
                    'time': round(process_time, 3)
                }
                
                results.append(result)
                
                print(f'    –†–∞–∑–º–µ—Ä: {rows} —Å—Ç—Ä–æ–∫ x {cols} —Å—Ç–æ–ª–±—Ü–æ–≤')
                print(f'    –õ–∏—Å—Ç–æ–≤: {sheets}')
                print(f'    –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ~{products_found}')
                print(f'    –¶–µ–Ω –Ω–∞–π–¥–µ–Ω–æ: ~{prices_found}')
                print(f'    –í—Ä–µ–º—è: {process_time:.3f}s')
        
        return results
        
    except ImportError:
        print('    ‚ùå openpyxl –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
        return []
    except Exception as e:
        print(f'    ‚ùå –û—à–∏–±–∫–∞: {e}')
        return []

def simulate_processing():
    """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É"""
    
    print('\nüîÑ –ò–ú–ò–¢–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–ò–°–¢–ï–ú–û–ô:')
    
    files = [
        ('LIST HARGA UD RAHAYU.xlsx', 0.03),
        ('DOC-20250428-WA0004..xlsx', 0.09)
    ]
    
    total_time = 0
    total_products = 0
    
    for file_name, size_mb in files:
        print(f'\n  üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_name}')
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        stages = [
            ('üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞', 0.15),
            ('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', 0.3),
            ('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è', 0.1),
            ('ü§ñ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è LLM', 1.2),
            ('üìã –ó–∞–ø–∏—Å—å –≤ Google Sheets', 0.2)
        ]
        
        file_start = time.time()
        estimated_products = int(size_mb * 1000)  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤
        
        for stage_name, stage_time in stages:
            print(f'    {stage_name}... ', end='', flush=True)
            time.sleep(stage_time / 10)  # –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è
            print(f'{stage_time:.1f}s')
        
        file_time = time.time() - file_start
        total_time += file_time
        total_products += estimated_products
        
        print(f'    ‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {file_time:.2f}s')
        print(f'    üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ~{estimated_products}')
    
    return {
        'total_time': total_time,
        'total_products': total_products,
        'files_processed': len(files)
    }

def check_system_readiness():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    print('\nüîß –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–¥—É–ª–∏
    modules = [
        'modules/quota_manager.py',
        'modules/adaptive_scaler.py',
        'modules/metrics_collector_v2.py',
        'modules/universal_excel_parser.py'
    ]
    
    modules_ready = 0
    for module in modules:
        if Path(module).exists():
            print(f'  ‚úÖ {module}')
            modules_ready += 1
        else:
            print(f'  ‚ùå {module}')
    
    print(f'\n  üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π: {modules_ready}/{len(modules)} ({modules_ready/len(modules)*100:.0f}%)')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = ['openpyxl', 'pathlib']
    deps_ready = 0
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f'  ‚úÖ {dep}')
            deps_ready += 1
        except ImportError:
            print(f'  ‚ùå {dep}')
    
    print(f'  üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {deps_ready}/{len(dependencies)} ({deps_ready/len(dependencies)*100:.0f}%)')
    
    return {
        'modules_ready': modules_ready,
        'total_modules': len(modules),
        'deps_ready': deps_ready,
        'total_deps': len(dependencies)
    }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    start_time = time.time()
    
    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
    available_files = quick_file_analysis()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ Excel
    parsing_results = quick_excel_parsing()
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_results = simulate_processing()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    system_status = check_system_readiness()
    
    total_time = time.time() - start_time
    
    # –ò—Ç–æ–≥–∏
    print('\n\nüéØ –ò–¢–û–ì–ò –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    print('=' * 50)
    print(f'‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f}s')
    print(f'üìÅ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(available_files)}')
    print(f'üìä Excel —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(parsing_results)}')
    
    if parsing_results:
        total_products = sum(r['products_est'] for r in parsing_results)
        total_rows = sum(r['rows'] for r in parsing_results)
        print(f'üìã –û–±—â–∏—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {total_rows}')
        print(f'üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ~{total_products}')
    
    print(f'\nüîÑ –ò–ú–ò–¢–ê–¶–ò–Ø –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:')
    print(f'  üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processing_results["files_processed"]}')
    print(f'  üì¶ –¢–æ–≤–∞—Ä–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ~{processing_results["total_products"]}')
    print(f'  ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_results["total_time"]:.2f}s')
    
    print(f'\nüîß –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:')
    modules_pct = system_status['modules_ready'] / system_status['total_modules'] * 100
    deps_pct = system_status['deps_ready'] / system_status['total_deps'] * 100
    print(f'  üìä –ú–æ–¥—É–ª–∏: {modules_pct:.0f}% –≥–æ—Ç–æ–≤—ã')
    print(f'  üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {deps_pct:.0f}% –≥–æ—Ç–æ–≤—ã')
    
    overall_status = "‚úÖ –ì–û–¢–û–í–ê" if modules_pct >= 80 and deps_pct >= 80 else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò"
    print(f'\nüöÄ –°–ò–°–¢–ï–ú–ê: {overall_status}')
    
    if available_files:
        print(f'üí° –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã!')
        print(f'üìã –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤: {[f[0] for f in available_files[:2]]}')

if __name__ == "__main__":
    main() 