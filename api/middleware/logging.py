"""
=============================================================================
MONITO API REQUEST LOGGING MIDDLEWARE
=============================================================================
–í–µ—Ä—Å–∏—è: 3.0
–¶–µ–ª—å: Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
=============================================================================
"""

import time
import uuid
from typing import Callable

from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware

from utils.logger import get_logger

logger = get_logger(__name__)

class RequestLoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
    """
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å
            call_next: –°–ª–µ–¥—É—é—â–∏–π middleware/handler
            
        Returns:
            HTTP –æ—Ç–≤–µ—Ç
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
        request_id = str(uuid.uuid4())
        request.state.request_id = request_id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        
        client_ip = self._get_client_ip(request)
        user_agent = request.headers.get("user-agent", "unknown")
        
        logger.info(
            f"üîµ [{request_id}] {request.method} {request.url.path} - "
            f"IP: {client_ip}, Agent: {user_agent[:50]}..."
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è GET)
        if request.method == "GET" and request.query_params:
            logger.debug(f"üìã [{request_id}] Query params: {dict(request.query_params)}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await call_next(request)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            status_emoji = self._get_status_emoji(response.status_code)
            logger.info(
                f"{status_emoji} [{request_id}] {response.status_code} - "
                f"{process_time:.3f}s"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            response.headers["X-Request-ID"] = request_id
            response.headers["X-Process-Time"] = str(process_time)
            
            return response
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            process_time = time.time() - start_time
            logger.error(
                f"‚ùå [{request_id}] Error processing request: {e} - "
                f"{process_time:.3f}s"
            )
            raise
    
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        forwarded_for = request.headers.get("x-forwarded-for")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("x-real-ip")
        if real_ip:
            return real_ip
        
        return request.client.host if request.client else "unknown"
    
    def _get_status_emoji(self, status_code: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞"""
        if 200 <= status_code < 300:
            return "‚úÖ"  # –£—Å–ø–µ—Ö
        elif 300 <= status_code < 400:
            return "üîÑ"  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        elif 400 <= status_code < 500:
            return "‚ö†Ô∏è"   # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞
        elif 500 <= status_code < 600:
            return "‚ùå"  # –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞
        else:
            return "‚ùì"  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å 