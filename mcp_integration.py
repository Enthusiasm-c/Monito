#!/usr/bin/env python3
"""
MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è Price List Analyzer
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import json
import asyncio
from datetime import datetime
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class SimplifiedPriceListAnalyzer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è MCP"""
    
    def __init__(self):
        self.data_dir = "data"
        self.temp_dir = "data/temp"
        self.master_table_path = "data/master_table.xlsx"
        self._ensure_directories()
    
    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        os.makedirs(self.data_dir, exist_ok=True)
        os.makedirs(self.temp_dir, exist_ok=True)
    
    async def process_excel_file(self, file_path: str) -> Dict[str, Any]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤"""
        try:
            import pandas as pd
            
            # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
            df = pd.read_excel(file_path)
            
            # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
            product_col = None
            price_col = None
            
            for col in df.columns:
                col_lower = str(col).lower()
                if any(keyword in col_lower for keyword in ['product', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'item']):
                    product_col = col
                if any(keyword in col_lower for keyword in ['price', '—Ü–µ–Ω–∞', 'cost', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                    price_col = col
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            products = []
            for idx, row in df.iterrows():
                try:
                    product_name = str(row[product_col] if product_col else row.iloc[0])
                    price = float(row[price_col] if price_col else 0)
                    
                    if len(product_name) > 3 and price > 0:
                        products.append({
                            'name': product_name,
                            'price': price,
                            'unit': 'pcs'
                        })
                except:
                    continue
            
            return {
                'status': 'success',
                'file_type': 'excel',
                'products_found': len(products),
                'products': products[:10],  # –ü–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
                'processed_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'processed_at': datetime.now().isoformat()
            }
    
    async def create_summary_table(self, products: List[Dict]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            import pandas as pd
            
            if not products:
                return "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
            df = pd.DataFrame(products)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
            output_path = f"{self.data_dir}/summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            df.to_excel(output_path, index=False)
            
            return f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}"
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}"
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            temp_files = len([f for f in os.listdir(self.temp_dir) if f.endswith(('.xlsx', '.xls', '.pdf'))])
            data_files = len([f for f in os.listdir(self.data_dir) if f.endswith('.xlsx')])
            
            return {
                'temp_files': temp_files,
                'processed_files': data_files,
                'last_check': datetime.now().isoformat(),
                'status': 'running'
            }
        except Exception as e:
            return {
                'error': str(e),
                'status': 'error'
            }

# MCP —Ñ—É–Ω–∫—Ü–∏–∏
analyzer = SimplifiedPriceListAnalyzer()

async def mcp_process_file(file_path: str) -> Dict[str, Any]:
    """MCP —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(file_path):
        return {'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}
    
    return await analyzer.process_excel_file(file_path)

async def mcp_create_table(products_json: str) -> str:
    """MCP —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        products = json.loads(products_json)
        return await analyzer.create_summary_table(products)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def mcp_get_stats() -> Dict[str, Any]:
    """MCP —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return analyzer.get_stats()

# –î–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def demo_test():
    """–î–µ–º–æ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    print("üîç MCP –î–ï–ú–û-–¢–ï–°–¢ PRICE LIST ANALYZER")
    print("="*50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–∞
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–∞...")
    try:
        import pandas as pd
        
        demo_data = {
            'Product Name': ['Apple iPhone 13', 'Samsung Galaxy S21', 'MacBook Pro'],
            'Price': [699.99, 599.99, 1299.99],
            'Unit': ['pcs', 'pcs', 'pcs']
        }
        
        df = pd.DataFrame(demo_data)
        demo_file = f"{analyzer.temp_dir}/demo_mcp.xlsx"
        df.to_excel(demo_file, index=False)
        print(f"‚úÖ –î–µ–º–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {demo_file}")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\nüìä –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...")
        result = await mcp_process_file(demo_file)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.get('products_found', 0)}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        if result.get('products'):
            print("\nüìã –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...")
            table_result = await mcp_create_table(json.dumps(result['products']))
            print(f"‚úÖ {table_result}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìà –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = mcp_get_stats()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(demo_test())