#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ BatchChatGPTProcessor
"""

import os
import sys
import asyncio
import time
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

from modules.batch_chatgpt_processor import BatchChatGPTProcessor
from modules.universal_excel_parser import UniversalExcelParser

def create_test_products(count: int = 50):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    test_products = [
        {'original_name': '–ú–æ–ª–æ–∫–æ –∫–æ—Ä–æ–≤—å–µ 3.2% –∂–∏—Ä–Ω–æ—Å—Ç–∏ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ', 'price': 89.50, 'unit': '–ª'},
        {'original_name': '–•–ª–µ–± –ø—à–µ–Ω–∏—á–Ω—ã–π –±–µ–ª—ã–π —Ñ–æ—Ä–º–æ–≤–æ–π', 'price': 45.00, 'unit': '—à—Ç'},
        {'original_name': '–ú—è—Å–æ –≥–æ–≤—è–¥–∏–Ω–∞ –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç –æ—Ö–ª–∞–∂–¥–µ–Ω–Ω–æ–µ', 'price': 750.00, 'unit': '–∫–≥'},
        {'original_name': '–†—ã–±–∞ —Å–µ–º–≥–∞ —Å–≤–µ–∂–∞—è —Ñ–∏–ª–µ', 'price': 1200.00, 'unit': '–∫–≥'},
        {'original_name': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –º–æ–ª–æ–¥–æ–π –º—ã—Ç—ã–π', 'price': 25.00, 'unit': '–∫–≥'},
        {'original_name': '–ê–ø–µ–ª—å—Å–∏–Ω—ã –∏–º–ø–æ—Ä—Ç–Ω—ã–µ —Å–ª–∞–¥–∫–∏–µ', 'price': 120.00, 'unit': '–∫–≥'},
        {'original_name': '–ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ —Ä–∞—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–∑–æ–¥–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', 'price': 95.00, 'unit': '–ª'},
        {'original_name': '–°—ã—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ç–≤–µ—Ä–¥—ã–π 45%', 'price': 380.00, 'unit': '–∫–≥'},
        {'original_name': '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ —Å—Ç–æ–ª–æ–≤—ã–µ C1', 'price': 85.00, 'unit': '–¥–µ—Å—è—Ç–æ–∫'},
        {'original_name': '–ö—Ä—É–ø–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è —è–¥—Ä–∏—Ü–∞ –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç', 'price': 110.00, 'unit': '–∫–≥'},
        {'original_name': '–°–∞—Ö–∞—Ä-–ø–µ—Å–æ–∫ –±–µ–ª—ã–π –ì–û–°–¢', 'price': 55.00, 'unit': '–∫–≥'},
        {'original_name': '–ß–∞–π —á–µ—Ä–Ω—ã–π –±–∞–π—Ö–æ–≤—ã–π –ª–∏—Å—Ç–æ–≤–æ–π', 'price': 250.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–ö–æ—Ñ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π —Å—É–±–ª–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', 'price': 890.00, 'unit': '–±–∞–Ω–∫–∞'},
        {'original_name': '–ú–∞–∫–∞—Ä–æ–Ω—ã —Å–ø–∞–≥–µ—Ç—Ç–∏ —Ç–≤–µ—Ä–¥—ã–µ —Å–æ—Ä—Ç–∞ –ø—à–µ–Ω–∏—Ü—ã', 'price': 75.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–†–∏—Å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π —à–ª–∏—Ñ–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º', 'price': 120.00, 'unit': '–∫–≥'},
        {'original_name': '–°–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è –π–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', 'price': 15.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–ü–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π –º–æ–ª–æ—Ç—ã–π –æ—Å—Ç—Ä—ã–π', 'price': 180.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π –∂–µ–ª—Ç—ã–π —Å–≤–µ–∂–∏–π', 'price': 30.00, 'unit': '–∫–≥'},
        {'original_name': '–ú–æ—Ä–∫–æ–≤—å —Å—Ç–æ–ª–æ–≤–∞—è –º—ã—Ç–∞—è', 'price': 35.00, 'unit': '–∫–≥'},
        {'original_name': '–ö–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è —Å–≤–µ–∂–∞—è', 'price': 20.00, 'unit': '–∫–≥'},
        {'original_name': '–¢–æ–º–∞—Ç—ã –∫—Ä–∞—Å–Ω—ã–µ —Å–≤–µ–∂–∏–µ –ø–∞—Ä–Ω–∏–∫–æ–≤—ã–µ', 'price': 180.00, 'unit': '–∫–≥'},
        {'original_name': '–û–≥—É—Ä—Ü—ã —Å–≤–µ–∂–∏–µ —Ç–µ–ø–ª–∏—á–Ω—ã–µ –¥–ª–∏–Ω–Ω–æ–ø–ª–æ–¥–Ω—ã–µ', 'price': 120.00, 'unit': '–∫–≥'},
        {'original_name': '–ë–∞–Ω–∞–Ω—ã –∂–µ–ª—Ç—ã–µ —Å–ø–µ–ª—ã–µ –∏–º–ø–æ—Ä—Ç–Ω—ã–µ', 'price': 95.00, 'unit': '–∫–≥'},
        {'original_name': '–Ø–±–ª–æ–∫–∏ –∫—Ä–∞—Å–Ω—ã–µ —Å–ª–∞–¥–∫–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ', 'price': 80.00, 'unit': '–∫–≥'},
        {'original_name': '–¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π 0% –ø–∞—Å—Ç–æ–æ–±—Ä–∞–∑–Ω—ã–π', 'price': 140.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–°–º–µ—Ç–∞–Ω–∞ 20% –∂–∏—Ä–Ω–æ—Å—Ç–∏ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è', 'price': 120.00, 'unit': '–±–∞–Ω–∫–∞'},
        {'original_name': '–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –±–µ–∑ –¥–æ–±–∞–≤–æ–∫', 'price': 65.00, 'unit': '—Å—Ç–∞–∫–∞–Ω'},
        {'original_name': '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ –∫—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ 72.5%', 'price': 180.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è –¥–æ–∫—Ç–æ—Ä—Å–∫–∞—è –ì–û–°–¢', 'price': 320.00, 'unit': '–∫–≥'},
        {'original_name': '–°–æ—Å–∏—Å–∫–∏ –º–æ–ª–æ—á–Ω—ã–µ –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç', 'price': 280.00, 'unit': '–∫–≥'},
        {'original_name': '–ö—É—Ä–∏—Ü–∞ —Ü–µ–ª–∞—è –æ—Ö–ª–∞–∂–¥–µ–Ω–Ω–∞—è 1 –∫–∞—Ç–µ–≥–æ—Ä–∏—è', 'price': 160.00, 'unit': '–∫–≥'},
        {'original_name': '–°–≤–∏–Ω–∏–Ω–∞ –∫–æ—Ä–µ–π–∫–∞ –±–µ–∑ –∫–æ—Å—Ç–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–Ω–∞—è', 'price': 420.00, 'unit': '–∫–≥'},
        {'original_name': '–§–∞—Ä—à –≥–æ–≤—è–∂–∏–π —Å–≤–µ–∂–µ–º–æ—Ä–æ–∂–µ–Ω—ã–π', 'price': 380.00, 'unit': '–∫–≥'},
        {'original_name': '–ü–µ—á–µ–Ω—å–µ –æ–≤—Å—è–Ω–æ–µ —Å –∏–∑—é–º–æ–º —Å–ª–∞–¥–∫–æ–µ', 'price': 150.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–ö–æ–Ω—Ñ–µ—Ç—ã —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ –∞—Å—Å–æ—Ä—Ç–∏ –ø—Ä–µ–º–∏—É–º', 'price': 450.00, 'unit': '–∫–æ—Ä–æ–±–∫–∞'},
        {'original_name': '–í–æ–¥–∞ –ø–∏—Ç—å–µ–≤–∞—è –Ω–µ–≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—â–µ–Ω–Ω–∞—è', 'price': 25.00, 'unit': '–±—É—Ç—ã–ª–∫–∞'},
        {'original_name': '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π 100%', 'price': 85.00, 'unit': '–ø–∞–∫–µ—Ç'},
        {'original_name': '–õ–∏–º–æ–Ω–∞–¥ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–π', 'price': 45.00, 'unit': '–±—É—Ç—ã–ª–∫–∞'},
        {'original_name': '–ü–∏–≤–æ —Å–≤–µ—Ç–ª–æ–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ 4.5%', 'price': 120.00, 'unit': '–±—É—Ç—ã–ª–∫–∞'},
        {'original_name': '–í–∏–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ —Å—É—Ö–æ–µ —Å—Ç–æ–ª–æ–≤–æ–µ', 'price': 380.00, 'unit': '–±—É—Ç—ã–ª–∫–∞'},
        {'original_name': '–ú–æ—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç', 'price': 85.00, 'unit': '–±—É—Ç—ã–ª–∫–∞'},
        {'original_name': '–°—Ç–∏—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫ –∞–≤—Ç–æ–º–∞—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', 'price': 320.00, 'unit': '–ø–∞—á–∫–∞'},
        {'original_name': '–¢—É–∞–ª–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞ 2-—Å–ª–æ–π–Ω–∞—è –±–µ–ª–∞—è', 'price': 180.00, 'unit': '—É–ø–∞–∫–æ–≤–∫–∞'},
        {'original_name': '–®–∞–º–ø—É–Ω—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ª–æ—Å', 'price': 250.00, 'unit': '–±—É—Ç—ã–ª–∫–∞'},
        {'original_name': '–ó—É–±–Ω–∞—è –ø–∞—Å—Ç–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞', 'price': 120.00, 'unit': '—Ç—é–±–∏–∫'},
        {'original_name': '–ö—Ä–µ–º –¥–ª—è —Ä—É–∫ —É–≤–ª–∞–∂–Ω—è—é—â–∏–π', 'price': 180.00, 'unit': '—Ç—é–±–∏–∫'},
        {'original_name': '–ú—ã–ª–æ —Ç—É–∞–ª–µ—Ç–Ω–æ–µ –∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ', 'price': 45.00, 'unit': '–∫—É—Å–æ–∫'},
        {'original_name': '–î–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç —Å–ø—Ä–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞', 'price': 220.00, 'unit': '–±–∞–ª–ª–æ–Ω'},
        {'original_name': '–ü—Ä–æ–∫–ª–∞–¥–∫–∏ –∂–µ–Ω—Å–∫–∏–µ —É–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–∏–µ', 'price': 180.00, 'unit': '—É–ø–∞–∫–æ–≤–∫–∞'},
        {'original_name': '–ü–æ–¥–≥—É–∑–Ω–∏–∫–∏ –¥–µ—Ç—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä 3', 'price': 890.00, 'unit': '—É–ø–∞–∫–æ–≤–∫–∞'}
    ]
    
    # –î—É–±–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤
    result = []
    for i in range(count):
        product = test_products[i % len(test_products)].copy()
        if i >= len(test_products):
            product['original_name'] = f"{product['original_name']} #{i+1}"
        result.append(product)
    
    return result

async def test_batch_processing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    print("üöÄ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ü–ê–ö–ï–¢–ù–û–ì–û –†–ï–ñ–ò–ú–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = BatchChatGPTProcessor(api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {'name': '–ú–∞–ª—ã–π –ø–∞–∫–µ—Ç', 'count': 15},
        {'name': '–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç', 'count': 30}, 
        {'name': '–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç', 'count': 50}
    ]
    
    for test_case in test_cases:
        print(f"\nüì¶ –¢–ï–°–¢: {test_case['name']} ({test_case['count']} —Ç–æ–≤–∞—Ä–æ–≤)")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        products = create_test_products(test_case['count'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        optimal_batch_size = processor.optimize_batch_size(products)
        batches = processor.split_products_into_batches(products, optimal_batch_size)
        
        print(f"üìä –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"üîß –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {optimal_batch_size}")
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {len(batches)}")
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        try:
            result = await processor.process_all_products(products, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
            
            processing_time = time.time() - start_time
            
            if 'error' in result:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            stats = result.get('processing_stats', {})
            processed_products = result.get('products', [])
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(processed_products)}/{len(products)}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1%}")
            print(f"üî• –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {stats.get('successful_batches', 0)}/{stats.get('total_batches', 0)}")
            print(f"ü™ô –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('estimated_tokens', 0)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            print(f"\nüéØ –ü–†–ò–ú–ï–†–´ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –¢–û–í–ê–†–û–í:")
            for i, product in enumerate(processed_products[:3]):
                print(f"{i+1}. {product.get('original_name', 'N/A')[:50]}...")
                print(f"   ‚Üí {product.get('standardized_name', 'N/A')}")
                print(f"   üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product.get('brand', 'N/A')}")
                print(f"   üì¶ –†–∞–∑–º–µ—Ä: {product.get('size', 'N/A')} {product.get('unit', 'N/A')}")
                print(f"   üè™ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', 'N/A')}")
                print(f"   üí∞ –¶–µ–Ω–∞: {product.get('price', 0)} {product.get('currency', 'IDR')}")
                print()
            
            # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            products_per_second = len(processed_products) / processing_time if processing_time > 0 else 0
            tokens_per_second = stats.get('estimated_tokens', 0) / processing_time if processing_time > 0 else 0
            
            print(f"‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
            print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤/—Å–µ–∫: {products_per_second:.1f}")
            print(f"   ü™ô –¢–æ–∫–µ–Ω–æ–≤/—Å–µ–∫: {tokens_per_second:.1f}")
            
        except Exception as e:
            processing_time = time.time() - start_time
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {processing_time:.2f}—Å")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    asyncio.run(test_batch_processing())

if __name__ == "__main__":
    main()