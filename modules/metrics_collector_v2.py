#!/usr/bin/env python3
"""
Metrics Collector V2 –¥–ª—è MON-006 - –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- Prometheus –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- Structured logging —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
- Performance tracing –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
- Real-time monitoring –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import time
import json
import logging
import threading
from typing import Dict, List, Any, Optional, Union, Callable
from dataclasses import dataclass, field
from contextlib import contextmanager
from functools import wraps
import traceback
from datetime import datetime, timezone

logger = logging.getLogger(__name__)

@dataclass
class MetricsStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è MON-006"""
    total_operations: int = 0
    successful_operations: int = 0
    failed_operations: int = 0
    total_processing_time_ms: int = 0
    average_processing_time_ms: float = 0.0
    peak_memory_mb: float = 0.0
    errors: List[str] = field(default_factory=list)
    custom_metrics: Dict[str, Any] = field(default_factory=dict)

@dataclass
class OperationTrace:
    """–¢—Ä–µ–π—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    operation_id: str
    operation_name: str
    start_time: float
    end_time: float = 0.0
    duration_ms: int = 0
    status: str = "running"  # running, success, failed
    metadata: Dict[str, Any] = field(default_factory=dict)
    error_message: str = ""
    memory_delta_mb: float = 0.0

class MetricsCollectorV2:
    """
    Metrics Collector V2 –¥–ª—è MON-006 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - üìä Prometheus –º–µ—Ç—Ä–∏–∫–∏
    - üìù Structured logging 
    - üîç Performance tracing
    - üìà Real-time monitoring
    """
    
    def __init__(self, enable_prometheus: bool = True, enable_tracing: bool = True,
                 metrics_port: int = 8000):
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = MetricsStats()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enable_prometheus = enable_prometheus
        self.enable_tracing = enable_tracing
        self.metrics_port = metrics_port
        
        # –¢—Ä–µ–π—Å–∏–Ω–≥
        self.active_traces: Dict[str, OperationTrace] = {}
        self.completed_traces: List[OperationTrace] = []
        self.trace_lock = threading.Lock()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Å—á–µ—Ç—á–∏–∫–∏
        self._operation_counter = 0
        self._memory_tracker = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self._check_dependencies()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prometheus –º–µ—Ç—Ä–∏–∫–∏
        self._init_prometheus_metrics()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º structured logging
        self._init_structured_logging()
        
        logger.info("‚úÖ MetricsCollectorV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å MON-006 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
    
    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π MON-006"""
        self.prometheus_available = False
        self.structlog_available = False
        self.psutil_available = False
        
        try:
            import prometheus_client
            self.prometheus_available = True
            logger.info("‚úÖ Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–µ—Ç—Ä–∏–∫")
        except ImportError:
            logger.warning("‚ö†Ô∏è Prometheus –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–µ—Ç—Ä–∏–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
        
        try:
            import structlog
            self.structlog_available = True
            logger.info("‚úÖ Structlog –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è structured logging")
        except ImportError:
            logger.warning("‚ö†Ô∏è Structlog –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π logging")
        
        try:
            import psutil
            self.psutil_available = True
            logger.info("‚úÖ psutil –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
        except ImportError:
            logger.warning("‚ö†Ô∏è psutil –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
    
    def _init_prometheus_metrics(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prometheus –º–µ—Ç—Ä–∏–∫"""
        if not self.prometheus_available or not self.enable_prometheus:
            logger.info("üìù Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
            self.prometheus_metrics = None
            return
        
        try:
            from prometheus_client import Counter, Histogram, Gauge, Info, start_http_server
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            self.operation_counter = Counter(
                'monito_operations_total',
                'Total number of operations',
                ['operation_type', 'status', 'component']
            )
            
            self.operation_duration = Histogram(
                'monito_operation_duration_seconds',
                'Duration of operations in seconds',
                ['operation_type', 'component'],
                buckets=[0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 30.0, 60.0]
            )
            
            self.memory_usage = Gauge(
                'monito_memory_usage_mb',
                'Memory usage in MB',
                ['component']
            )
            
            self.data_processed = Counter(
                'monito_data_processed_total',
                'Total amount of data processed',
                ['data_type', 'component']
            )
            
            self.quality_score = Gauge(
                'monito_data_quality_score',
                'Data quality score (0.0-1.0)',
                ['component']
            )
            
            self.cache_operations = Counter(
                'monito_cache_operations_total',
                'Cache operations',
                ['operation', 'result', 'component']
            )
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.system_info = Info(
                'monito_system_info',
                'System information'
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫
            if self.metrics_port:
                start_http_server(self.metrics_port)
                logger.info(f"‚úÖ Prometheus –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É {self.metrics_port}")
            
            self.prometheus_metrics = {
                'operation_counter': self.operation_counter,
                'operation_duration': self.operation_duration,
                'memory_usage': self.memory_usage,
                'data_processed': self.data_processed,
                'quality_score': self.quality_score,
                'cache_operations': self.cache_operations,
                'system_info': self.system_info
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Prometheus –º–µ—Ç—Ä–∏–∫: {e}")
            self.prometheus_metrics = None
    
    def _init_structured_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ structured logging"""
        if not self.structlog_available:
            logger.info("üìù Structlog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π logging")
            self.structured_logger = None
            return
        
        try:
            import structlog
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structured logging
            structlog.configure(
                processors=[
                    structlog.stdlib.filter_by_level,
                    structlog.stdlib.add_logger_name,
                    structlog.stdlib.add_log_level,
                    structlog.stdlib.PositionalArgumentsFormatter(),
                    structlog.processors.TimeStamper(fmt="iso"),
                    structlog.processors.StackInfoRenderer(),
                    structlog.processors.format_exc_info,
                    structlog.processors.UnicodeDecoder(),
                    structlog.processors.JSONRenderer()
                ],
                context_class=dict,
                logger_factory=structlog.stdlib.LoggerFactory(),
                wrapper_class=structlog.stdlib.BoundLogger,
                cache_logger_on_first_use=True,
            )
            
            self.structured_logger = structlog.get_logger("monito")
            logger.info("‚úÖ Structured logging –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ structured logging: {e}")
            self.structured_logger = None
    
    def start_operation_trace(self, operation_name: str, component: str = "unknown", 
                            metadata: Dict[str, Any] = None) -> str:
        """
        MON-006.1: –ù–∞—á–∞–ª–æ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            component: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        
        Returns:
            str: ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–π—Å–∞
        """
        if not self.enable_tracing:
            return f"trace_{int(time.time() * 1000)}"
        
        try:
            with self.trace_lock:
                self._operation_counter += 1
                operation_id = f"op_{self._operation_counter}_{int(time.time() * 1000)}"
                
                # –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –≤ –Ω–∞—á–∞–ª–µ
                initial_memory = self._get_memory_usage()
                
                trace = OperationTrace(
                    operation_id=operation_id,
                    operation_name=operation_name,
                    start_time=time.time(),
                    metadata=metadata or {},
                    memory_delta_mb=0.0
                )
                
                trace.metadata.update({
                    'component': component,
                    'initial_memory_mb': initial_memory,
                    'pid': os.getpid(),
                    'thread_id': threading.get_ident()
                })
                
                self.active_traces[operation_id] = trace
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
                self._log_structured(
                    "operation_started",
                    operation_id=operation_id,
                    operation_name=operation_name,
                    component=component,
                    initial_memory_mb=initial_memory,
                    metadata=metadata
                )
                
                # Prometheus –º–µ—Ç—Ä–∏–∫–∞
                if self.prometheus_metrics:
                    self.operation_counter.labels(
                        operation_type=operation_name,
                        status='started',
                        component=component
                    ).inc()
                
                logger.debug(f"üîç –ù–∞—á–∞—Ç —Ç—Ä–µ–π—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_name} ({operation_id})")
                return operation_id
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞: {e}")
            return f"error_trace_{int(time.time() * 1000)}"
    
    def end_operation_trace(self, operation_id: str, status: str = "success", 
                          result_metadata: Dict[str, Any] = None, error: str = ""):
        """
        MON-006.2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            operation_id: ID –æ–ø–µ—Ä–∞—Ü–∏–∏
            status: –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (success/failed)
            result_metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        if not self.enable_tracing or operation_id not in self.active_traces:
            return
        
        try:
            with self.trace_lock:
                trace = self.active_traces[operation_id]
                trace.end_time = time.time()
                trace.duration_ms = int((trace.end_time - trace.start_time) * 1000)
                trace.status = status
                trace.error_message = error
                
                # –ò–∑–º–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                final_memory = self._get_memory_usage()
                initial_memory = trace.metadata.get('initial_memory_mb', 0)
                trace.memory_delta_mb = final_memory - initial_memory
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if result_metadata:
                    trace.metadata.update(result_metadata)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats.total_operations += 1
                self.stats.total_processing_time_ms += trace.duration_ms
                
                if status == "success":
                    self.stats.successful_operations += 1
                else:
                    self.stats.failed_operations += 1
                    if error:
                        self.stats.errors.append(f"{trace.operation_name}: {error}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
                if self.stats.total_operations > 0:
                    self.stats.average_processing_time_ms = (
                        self.stats.total_processing_time_ms / self.stats.total_operations
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—É—é –ø–∞–º—è—Ç—å
                if final_memory > self.stats.peak_memory_mb:
                    self.stats.peak_memory_mb = final_memory
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self._log_structured(
                    "operation_completed",
                    operation_id=operation_id,
                    operation_name=trace.operation_name,
                    component=trace.metadata.get('component', 'unknown'),
                    duration_ms=trace.duration_ms,
                    status=status,
                    memory_delta_mb=trace.memory_delta_mb,
                    final_memory_mb=final_memory,
                    error_message=error,
                    result_metadata=result_metadata
                )
                
                # Prometheus –º–µ—Ç—Ä–∏–∫–∏
                if self.prometheus_metrics:
                    # –°—á–µ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
                    self.operation_counter.labels(
                        operation_type=trace.operation_name,
                        status=status,
                        component=trace.metadata.get('component', 'unknown')
                    ).inc()
                    
                    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
                    self.operation_duration.labels(
                        operation_type=trace.operation_name,
                        component=trace.metadata.get('component', 'unknown')
                    ).observe(trace.duration_ms / 1000.0)
                    
                    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                    self.memory_usage.labels(
                        component=trace.metadata.get('component', 'unknown')
                    ).set(final_memory)
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π—Å—ã
                self.completed_traces.append(trace)
                del self.active_traces[operation_id]
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π—Å–æ–≤
                if len(self.completed_traces) > 1000:
                    self.completed_traces = self.completed_traces[-500:]
                
                logger.debug(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ç—Ä–µ–π—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: {trace.operation_name} "
                           f"({trace.duration_ms}ms, {status})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞: {e}")
    
    @contextmanager
    def trace_operation(self, operation_name: str, component: str = "unknown", 
                       metadata: Dict[str, Any] = None):
        """
        MON-006.3: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        
        Usage:
            with metrics.trace_operation("excel_parsing", "pre_processor"):
                # –∫–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏
                pass
        """
        operation_id = self.start_operation_trace(operation_name, component, metadata)
        
        try:
            yield operation_id
            self.end_operation_trace(operation_id, "success")
        except Exception as e:
            self.end_operation_trace(operation_id, "failed", error=str(e))
            raise
    
    def measure_performance(self, func: Callable = None, operation_name: str = None, 
                          component: str = "unknown"):
        """
        MON-006.4: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
        
        Usage:
            @metrics.measure_performance(operation_name="parse_excel", component="pre_processor")
            def parse_excel_file(file_path):
                # –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
                pass
        """
        def decorator(f):
            @wraps(f)
            def wrapper(*args, **kwargs):
                op_name = operation_name or f.__name__
                
                with self.trace_operation(op_name, component):
                    result = f(*args, **kwargs)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    result_metadata = {}
                    if hasattr(result, '__len__'):
                        try:
                            result_metadata['result_size'] = len(result)
                        except:
                            pass
                    
                    return result
            
            return wrapper
        
        if func is None:
            return decorator
        else:
            return decorator(func)
    
    def record_data_quality(self, component: str, quality_score: float, 
                          data_info: Dict[str, Any] = None):
        """
        MON-006.5: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            component: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
            quality_score: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (0.0-1.0)
            data_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if 'quality_scores' not in self.stats.custom_metrics:
                self.stats.custom_metrics['quality_scores'] = {}
            
            self.stats.custom_metrics['quality_scores'][component] = {
                'score': quality_score,
                'timestamp': time.time(),
                'data_info': data_info or {}
            }
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_structured(
                "data_quality_recorded",
                component=component,
                quality_score=quality_score,
                data_info=data_info
            )
            
            # Prometheus –º–µ—Ç—Ä–∏–∫–∞
            if self.prometheus_metrics:
                self.quality_score.labels(component=component).set(quality_score)
            
            logger.debug(f"üìä –ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {component} = {quality_score:.3f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
    
    def record_cache_operation(self, component: str, operation: str, result: str,
                             details: Dict[str, Any] = None):
        """
        MON-006.6: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            component: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (get, set, delete, clear)
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç (hit, miss, success, failed)
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_structured(
                "cache_operation",
                component=component,
                operation=operation,
                result=result,
                details=details
            )
            
            # Prometheus –º–µ—Ç—Ä–∏–∫–∞
            if self.prometheus_metrics:
                self.cache_operations.labels(
                    operation=operation,
                    result=result,
                    component=component
                ).inc()
            
            logger.debug(f"üíæ –ó–∞–ø–∏—Å–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞: {component}/{operation} = {result}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞: {e}")
    
    def record_data_processed(self, component: str, data_type: str, count: int,
                            size_bytes: int = 0):
        """
        MON-006.7: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            component: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö (rows, files, products, etc.)
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            size_bytes: –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
        """
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_structured(
                "data_processed",
                component=component,
                data_type=data_type,
                count=count,
                size_bytes=size_bytes
            )
            
            # Prometheus –º–µ—Ç—Ä–∏–∫–∞
            if self.prometheus_metrics:
                self.data_processed.labels(
                    data_type=data_type,
                    component=component
                ).inc(count)
            
            logger.debug(f"üìà –ó–∞–ø–∏—Å–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {component}/{data_type} = {count}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _log_structured(self, event: str, **kwargs):
        """Structured logging —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            if self.structured_logger:
                self.structured_logger.info(event, **kwargs)
            else:
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π logging
                logger.info(f"[{event}] {json.dumps(kwargs, default=str)}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ structured logging: {e}")
    
    def _get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ MB"""
        try:
            if self.psutil_available:
                import psutil
                process = psutil.Process()
                return process.memory_info().rss / 1024 / 1024
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ sys
                import sys
                return sys.getsizeof(self) / 1024 / 1024
                
        except Exception:
            return 0.0
    
    def get_metrics_summary(self) -> Dict[str, Any]:
        """
        MON-006.8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        
        Returns:
            Dict —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        try:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π—Å—ã
            active_operations = []
            with self.trace_lock:
                for trace in self.active_traces.values():
                    active_operations.append({
                        'operation_id': trace.operation_id,
                        'operation_name': trace.operation_name,
                        'component': trace.metadata.get('component', 'unknown'),
                        'duration_ms': int((time.time() - trace.start_time) * 1000),
                        'status': trace.status
                    })
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            recent_operations = []
            for trace in self.completed_traces[-10:]:
                recent_operations.append({
                    'operation_name': trace.operation_name,
                    'component': trace.metadata.get('component', 'unknown'),
                    'duration_ms': trace.duration_ms,
                    'status': trace.status,
                    'memory_delta_mb': trace.memory_delta_mb
                })
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            system_info = {
                'current_memory_mb': self._get_memory_usage(),
                'pid': os.getpid(),
                'active_threads': threading.active_count()
            }
            
            return {
                'mon_006_metrics': {
                    'prometheus_enabled': self.prometheus_available and self.enable_prometheus,
                    'tracing_enabled': self.enable_tracing,
                    'structured_logging_enabled': self.structured_logger is not None,
                    'metrics_port': self.metrics_port if self.prometheus_metrics else None
                },
                'performance_stats': {
                    'total_operations': self.stats.total_operations,
                    'successful_operations': self.stats.successful_operations,
                    'failed_operations': self.stats.failed_operations,
                    'success_rate': (
                        self.stats.successful_operations / max(self.stats.total_operations, 1)
                    ),
                    'average_processing_time_ms': self.stats.average_processing_time_ms,
                    'peak_memory_mb': self.stats.peak_memory_mb,
                    'errors_count': len(self.stats.errors)
                },
                'active_operations': active_operations,
                'recent_operations': recent_operations,
                'system_info': system_info,
                'custom_metrics': self.stats.custom_metrics,
                'version': 'MetricsCollectorV2_MON006'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {'error': str(e), 'version': 'MetricsCollectorV2_MON006'}
    
    def export_traces_to_file(self, file_path: str, format: str = "json") -> bool:
        """
        MON-006.9: –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π—Å–æ–≤ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json, csv)
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            with self.trace_lock:
                traces_data = []
                
                for trace in self.completed_traces:
                    trace_dict = {
                        'operation_id': trace.operation_id,
                        'operation_name': trace.operation_name,
                        'component': trace.metadata.get('component', 'unknown'),
                        'start_time': datetime.fromtimestamp(trace.start_time, timezone.utc).isoformat(),
                        'end_time': datetime.fromtimestamp(trace.end_time, timezone.utc).isoformat(),
                        'duration_ms': trace.duration_ms,
                        'status': trace.status,
                        'memory_delta_mb': trace.memory_delta_mb,
                        'error_message': trace.error_message,
                        'metadata': trace.metadata
                    }
                    traces_data.append(trace_dict)
                
                if format.lower() == "json":
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(traces_data, f, indent=2, ensure_ascii=False)
                elif format.lower() == "csv":
                    import csv
                    with open(file_path, 'w', newline='', encoding='utf-8') as f:
                        if traces_data:
                            fieldnames = traces_data[0].keys()
                            writer = csv.DictWriter(f, fieldnames=fieldnames)
                            writer.writeheader()
                            for trace in traces_data:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∏
                                trace_csv = trace.copy()
                                trace_csv['metadata'] = json.dumps(trace['metadata'])
                                writer.writerow(trace_csv)
                
                logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(traces_data)} —Ç—Ä–µ–π—Å–æ–≤ –≤ {file_path}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–π—Å–æ–≤: {e}")
            return False
    
    def clear_metrics(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏ —Ç—Ä–µ–π—Å–æ–≤"""
        try:
            with self.trace_lock:
                self.completed_traces.clear()
                self.stats = MetricsStats()
                self._operation_counter = 0
                
            logger.info("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Ç—Ä–µ–π—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_global_metrics_collector = None

def get_global_metrics_collector() -> MetricsCollectorV2:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MetricsCollector"""
    global _global_metrics_collector
    
    if _global_metrics_collector is None:
        _global_metrics_collector = MetricsCollectorV2()
    
    return _global_metrics_collector

def init_global_metrics(enable_prometheus: bool = True, enable_tracing: bool = True,
                       metrics_port: int = 8000) -> MetricsCollectorV2:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ MetricsCollector —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    global _global_metrics_collector
    
    _global_metrics_collector = MetricsCollectorV2(
        enable_prometheus=enable_prometheus,
        enable_tracing=enable_tracing,
        metrics_port=metrics_port
    )
    
    return _global_metrics_collector

# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def trace_operation(operation_name: str, component: str = "unknown", 
                   metadata: Dict[str, Any] = None):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–π—Å–∏–Ω–≥—É –æ–ø–µ—Ä–∞—Ü–∏–π"""
    return get_global_metrics_collector().trace_operation(operation_name, component, metadata)

def measure_performance(operation_name: str = None, component: str = "unknown"):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return get_global_metrics_collector().measure_performance(
        operation_name=operation_name, component=component
    ) 