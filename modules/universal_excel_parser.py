#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª—é–±—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π
"""

import pandas as pd
import re
import logging
import os
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from .base_parser import BaseParser

logger = logging.getLogger(__name__)

class UniversalExcelParser(BaseParser):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel –¥–ª—è –ª—é–±—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –æ–±—â–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        super().__init__()
        
        self.common_units = [
            'kg', 'g', 'ml', 'l', 'pcs', 'pack', 'box', 'can', 'btl', 
            'ikat', 'gln', 'gram', 'liter', 'piece', '–∫–≥', '–≥', '–º–ª', '–ª', '—à—Ç'
        ]
    
    def extract_products_universal(self, file_path: str, max_products: int = 1000, use_ai: bool = True) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª—é–±–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            
            # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
            logger.debug(f"üìã –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –ª–∏—Å—Ç–æ–≤ Excel —Ñ–∞–π–ª–∞...")
            sheets_data = self._analyze_all_sheets(file_path)
            
            if not sheets_data:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –ª–∏—Å—Ç —Ñ–∞–π–ª–∞")
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –ª–∏—Å—Ç —Ñ–∞–π–ª–∞'}
            
            logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheets_data)}")
            for sheet in sheets_data:
                logger.debug(f"  ‚Ä¢ {sheet['name']}: {sheet['rows']} —Å—Ç—Ä–æ–∫, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {sheet['potential_score']:.3f}")
            
            # 2. –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            logger.debug(f"üìã –®–∞–≥ 2: –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞...")
            best_sheet_data = self._select_best_sheet(sheets_data)
            
            if not best_sheet_data:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Å—Ä–µ–¥–∏ {len(sheets_data)} –ª–∏—Å—Ç–æ–≤")
                return {'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏'}
            
            logger.info(f"üìÑ –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: {best_sheet_data['name']} (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {best_sheet_data['potential_score']:.3f})")
            
            # 3. –ù–û–í–´–ô AI-–ü–û–î–•–û–î: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º AI –∞–Ω–∞–ª–∏–∑
            if use_ai:
                logger.info(f"ü§ñ –®–∞–≥ 3: –ü–æ–ø—ã—Ç–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã...")
                ai_result = self._try_ai_extraction(best_sheet_data['dataframe'], file_path)
                if ai_result and not ai_result.get('error'):
                    # AI —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    ai_products = ai_result.get('products', [])
                    ai_result['extraction_stats']['used_sheet'] = best_sheet_data['name']
                    ai_result['extraction_stats']['ai_enhanced'] = True
                    ai_result['extraction_stats']['total_rows'] = len(best_sheet_data['dataframe'])
                    ai_result['extraction_stats']['extracted_products'] = len(ai_products)
                    logger.info(f"‚úÖ AI —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫ {len(ai_products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(best_sheet_data['dataframe'])} —Å—Ç—Ä–æ–∫ Excel")
                    return ai_result
                else:
                    logger.warning(f"‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É –ø–∞—Ä—Å–µ—Ä—É")
            else:
                logger.info(f"üîß –®–∞–≥ 3: AI –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä")
            
            # 4. FALLBACK: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            logger.debug(f"üìã –®–∞–≥ 4: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
            structure = self._analyze_data_structure(best_sheet_data['dataframe'])
            
            logger.info(f"üèóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure['type']}")
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤: —Ç–æ–≤–∞—Ä—ã={len(structure['product_columns'])}, —Ü–µ–Ω—ã={len(structure['price_columns'])}, –µ–¥–∏–Ω–∏—Ü—ã={len(structure['unit_columns'])}")
            
            # 5. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            logger.debug(f"üìã –®–∞–≥ 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ {structure['type']}...")
            products = self._extract_products_by_structure(best_sheet_data['dataframe'], structure, max_products)
            
            logger.info(f"üì¶ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –∏–∑–≤–ª–µ–∫ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(best_sheet_data['dataframe'])} —Å—Ç—Ä–æ–∫")
            
            # 6. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            supplier_name = Path(file_path).stem
            
            result = {
                'file_type': 'excel',
                'supplier': {'name': supplier_name},
                'products': products,
                'extraction_stats': {
                    'total_rows': len(best_sheet_data['dataframe']),
                    'extracted_products': len(products),
                    'success_rate': len(products) / len(best_sheet_data['dataframe']) if len(best_sheet_data['dataframe']) > 0 else 0,
                    'used_sheet': best_sheet_data['name'],
                    'detected_structure': structure['type'],
                    'extraction_method': 'manual_parser',
                    'ai_enhanced': False
                }
            }
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(best_sheet_data['dataframe'])} —Å—Ç—Ä–æ–∫")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'}
    
    def _analyze_all_sheets(self, file_path: str) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ —Ñ–∞–π–ª–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        sheets_data = []
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ExcelFile –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏—Å—Ç–æ–≤
            with pd.ExcelFile(file_path, engine='openpyxl') as xls:
                for sheet_name in xls.sheet_names:
                    try:
                        # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
                        df_sample = pd.read_excel(xls, sheet_name=sheet_name, nrows=100)
                        
                        if df_sample.empty or len(df_sample) < 2:
                            continue
                        
                        # –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ª–∏—Å—Ç–∞
                        potential_score = self._calculate_sheet_potential_optimized(df_sample)
                        
                        # –ß–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π –ª–∏—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤—ã—Å–æ–∫–∏–π
                        if potential_score > 0.1:
                            df_full = pd.read_excel(xls, sheet_name=sheet_name)
                            
                            sheets_data.append({
                                'name': sheet_name,
                                'dataframe': df_full,
                                'potential_score': potential_score,
                                'rows': len(df_full),
                                'cols': len(df_full.columns)
                            })
                            
                            logger.debug(f"üìã –õ–∏—Å—Ç '{sheet_name}': {len(df_full)} —Å—Ç—Ä–æ–∫, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential_score:.3f}")
                        else:
                            logger.debug(f"üìã –õ–∏—Å—Ç '{sheet_name}' –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–∏–∑–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential_score:.3f})")
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
                        continue
            
            return sheets_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def _calculate_sheet_potential_optimized(self, df: pd.DataFrame) -> float:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ª–∏—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Pandas"""
        if df.empty:
            return 0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º NaN
        df_str = df.astype(str).replace('nan', '')
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ü–µ–Ω –∏ –µ–¥–∏–Ω–∏—Ü
        product_mask = df_str.map(self._looks_like_product)
        price_mask = df_str.map(self._looks_like_price) 
        unit_mask = df_str.map(self._looks_like_unit)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã
        product_score = product_mask.sum().sum() * 2
        price_score = price_mask.sum().sum() * 1
        unit_score = unit_mask.sum().sum() * 0.5
        
        total_score = product_score + price_score + unit_score
        total_cells = (df_str != '').sum().sum()
        
        return total_score / max(total_cells, 1)
    
    def _select_best_sheet(self, sheets_data: List[Dict]) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not sheets_data:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É
        sheets_data.sort(key=lambda x: x['potential_score'], reverse=True)
        
        return sheets_data[0]
    
    def _analyze_data_structure(self, df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ"""
        structure = {
            'type': 'unknown',
            'product_columns': [],
            'price_columns': [],
            'unit_columns': [],
            'data_rows': [],
            'header_rows': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        column_analyses = {}
        for col in df.columns:
            col_analysis = self._analyze_column(df[col])
            column_analyses[col] = col_analysis
            
            if col_analysis['type'] == 'product':
                structure['product_columns'].append(col)
            elif col_analysis['type'] == 'price':
                structure['price_columns'].append(col)
            elif col_analysis['type'] == 'unit':
                structure['unit_columns'].append(col)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        if structure['product_columns']:
            structure['product_columns'].sort(
                key=lambda col: column_analyses[col].get('quality_score', 0), 
                reverse=True
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for col in structure['product_columns']:
                analysis = column_analyses[col]
                logger.debug(f"–°—Ç–æ–ª–±–µ—Ü —Ç–æ–≤–∞—Ä–æ–≤ '{col}': –∫–∞—á–µ—Å—Ç–≤–æ={analysis.get('quality_score', 0):.2f}, "
                           f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={analysis.get('confidence', 0):.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        structure['column_analyses'] = column_analyses
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
        structure['data_rows'] = self._find_data_rows(df)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if len(structure['product_columns']) > 1:
            structure['type'] = 'multi_column'  # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        elif len(structure['product_columns']) == 1 and len(structure['price_columns']) >= 1:
            structure['type'] = 'standard'  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        else:
            structure['type'] = 'mixed'  # –°–º–µ—à–∞–Ω–Ω–∞—è/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ: —Ç–æ–≤–∞—Ä—ã={len(structure['product_columns'])}, —Ü–µ–Ω—ã={len(structure['price_columns'])}")
        
        return structure
    
    def _analyze_column(self, series: pd.Series) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        sample_values = series.dropna().head(20)
        
        if len(sample_values) == 0:
            return {'type': 'empty', 'confidence': 0}
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        sample_str = sample_values.astype(str).str.strip()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Pandas
        product_mask = sample_str.apply(self._looks_like_product)
        price_mask = sample_str.apply(self._looks_like_price)
        unit_mask = sample_str.apply(self._looks_like_unit)
        
        product_score = product_mask.sum()
        price_score = price_mask.sum() 
        unit_score = unit_mask.sum()
        
        total = len(sample_values)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        product_quality_score = 0
        if product_score > 0:
            for value in sample_str[product_mask]:
                # –ü—Ä–µ–º–∏—è –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
                if len(value) > 15:
                    product_quality_score += 2
                elif len(value) > 8:
                    product_quality_score += 1
                # –ü—Ä–µ–º–∏—è –∑–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ (—Å–æ—Å—Ç–∞–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
                if ' ' in value:
                    product_quality_score += 1
                # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–±—Ä–µ–Ω–¥—ã)
                if len(value) < 8 and sample_str.str.contains(value, regex=False).sum() > 3:
                    product_quality_score -= 2
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        product_quality = product_quality_score / max(product_score, 1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
        product_confidence = product_score / total
        price_confidence = price_score / total
        unit_confidence = unit_score / total
        
        if product_confidence > 0.6:
            return {
                'type': 'product', 
                'confidence': product_confidence,
                'quality_score': product_quality
            }
        elif price_confidence > 0.7:
            return {'type': 'price', 'confidence': price_confidence, 'quality_score': 0}
        elif unit_confidence > 0.5:
            return {'type': 'unit', 'confidence': unit_confidence, 'quality_score': 0}
        else:
            return {'type': 'mixed', 'confidence': 0.3, 'quality_score': 0}
    
    def _find_data_rows(self, df: pd.DataFrame) -> List[int]:
        """–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        if df.empty:
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df_str = df.astype(str).replace('nan', '')
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —è—á–µ–µ–∫
        product_mask = df_str.map(self._looks_like_product)
        price_mask = df_str.map(self._looks_like_price)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        product_counts = product_mask.sum(axis=1)
        price_counts = price_mask.sum(axis=1)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –µ—Å—Ç—å –∏ —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã
        valid_rows_mask = (product_counts >= 1) & (price_counts >= 1)
        
        return valid_rows_mask[valid_rows_mask].index.tolist()
    
    def _extract_products_by_structure(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        
        if structure['type'] == 'multi_column':
            products = self._extract_multi_column(df, structure, max_products)
        elif structure['type'] == 'standard':
            products = self._extract_standard(df, structure, max_products)
        else:
            products = self._extract_mixed(df, structure, max_products)
        
        return products
    
    def _extract_multi_column(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–≥–æ–∫–æ–ª–æ–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        product_cols = structure['product_columns']
        price_cols = structure['price_columns']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        data_rows = structure['data_rows'] if structure['data_rows'] else range(len(df))
        
        for row_idx in data_rows:
            if len(products) >= max_products:
                break
                
            row = df.iloc[row_idx]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É —Ç–æ–≤–∞—Ä-—Ü–µ–Ω–∞
            for prod_col in product_cols:
                for price_col in price_cols:
                    try:
                        product_name = self._clean_product_name(row.get(prod_col))
                        price = self._clean_price(row.get(price_col))
                        
                        if product_name and price > 0:
                            unit = self._find_unit_in_row(row, structure['unit_columns'])
                            
                            products.append({
                                'original_name': product_name,
                                'price': price,
                                'unit': unit or 'pcs',
                                'category': 'general',
                                'row_index': row_idx,
                                'confidence': 0.8
                            })
                            
                            if len(products) >= max_products:
                                return products
                                
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                        continue
        
        return products
    
    def _extract_standard(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        
        if not structure['product_columns'] or not structure['price_columns']:
            return products
        
        product_col = structure['product_columns'][0]
        price_col = structure['price_columns'][0]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        data_rows = structure['data_rows'] if structure['data_rows'] else range(len(df))
        
        for row_idx in data_rows:
            if len(products) >= max_products:
                break
                
            try:
                row = df.iloc[row_idx]
                
                product_name = self._clean_product_name(row.get(product_col))
                price = self._clean_price(row.get(price_col))
                
                if product_name and price > 0:
                    unit = self._find_unit_in_row(row, structure['unit_columns'])
                    
                    products.append({
                        'original_name': product_name,
                        'price': price,
                        'unit': unit or 'pcs',
                        'category': 'general',
                        'row_index': row_idx,
                        'confidence': 0.9
                    })
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                continue
        
        return products
    
    def _extract_mixed(self, df: pd.DataFrame, structure: Dict, max_products: int) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–π/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        products = []
        
        # –ü—Ä–æ—Å—Ç–æ –∏—â–µ–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã
        for row_idx, row in df.iterrows():
            if len(products) >= max_products:
                break
            
            potential_products = []
            potential_prices = []
            potential_units = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
            for value in row:
                if pd.notna(value):
                    value_str = str(value).strip()
                    
                    if self._looks_like_product(value_str):
                        potential_products.append(value_str)
                    elif self._looks_like_price(value_str):
                        try:
                            price = self._clean_price(value)
                            if price > 0:
                                potential_prices.append(price)
                        except:
                            pass
                    elif self._looks_like_unit(value_str):
                        potential_units.append(value_str)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω—É –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            if potential_products and potential_prices:
                for product_name in potential_products:
                    for price in potential_prices:
                        unit = potential_units[0] if potential_units else 'pcs'
                        
                        products.append({
                            'original_name': product_name,
                            'price': price,
                            'unit': unit,
                            'category': 'general',
                            'row_index': row_idx,
                            'confidence': 0.7
                        })
                        
                        if len(products) >= max_products:
                            return products
        
        return products
    
    def _find_unit_in_row(self, row, unit_columns: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –µ–¥–∏–Ω–∏—Ü
        for col in unit_columns:
            if col in row and pd.notna(row[col]):
                unit = str(row[col]).strip().lower()
                if unit in self.common_units:
                    return unit
        
        # –ü–æ—Ç–æ–º –∏—â–µ–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
        for value in row:
            if pd.notna(value):
                value_str = str(value).strip().lower()
                if value_str in self.common_units:
                    return value_str
        
        return None
    
    def _try_ai_extraction(self, df: pd.DataFrame, file_path: str) -> Optional[Dict]:
        """–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –ø–∞—Ä—Å–µ—Ä
            from .ai_table_parser import AITableParser
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                logger.debug("OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑")
                return None
            
            # –°–æ–∑–¥–∞–µ–º AI –ø–∞—Ä—Å–µ—Ä
            ai_parser = AITableParser(api_key)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = f"Excel –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {Path(file_path).name}"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI
            result = ai_parser.extract_products_with_ai(df, context)
            
            return result
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return None