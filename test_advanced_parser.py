#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Excel —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import pandas as pd
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.advanced_excel_parser import AdvancedExcelParser
from modules.batch_chatgpt_processor import BatchChatGPTProcessor
from modules.google_sheets_manager import GoogleSheetsManager
from dotenv import load_dotenv

load_dotenv()

def create_large_test_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞ —Å —Å–æ—Ç–Ω—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 200 —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    products_data = []
    
    # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
    electronics = [
        ("Apple iPhone 14 Pro 128GB", 999.99, "pcs", "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã"),
        ("Samsung Galaxy S23 Ultra", 1199.99, "pcs", "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã"),
        ("MacBook Pro 14 M2", 1999.99, "pcs", "–ù–æ—É—Ç–±—É–∫–∏"),
        ("iPad Air 5th Gen", 599.99, "pcs", "–ü–ª–∞–Ω—à–µ—Ç—ã"),
        ("AirPods Pro 2nd Gen", 249.99, "pcs", "–ù–∞—É—à–Ω–∏–∫–∏"),
        ("Apple Watch Series 8", 399.99, "pcs", "–ß–∞—Å—ã"),
        ("Dell XPS 13", 1299.99, "pcs", "–ù–æ—É—Ç–±—É–∫–∏"),
        ("Sony WH-1000XM5", 379.99, "pcs", "–ù–∞—É—à–Ω–∏–∫–∏"),
        ("Nintendo Switch OLED", 349.99, "pcs", "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏"),
        ("Steam Deck 512GB", 649.99, "pcs", "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏"),
    ]
    
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tools = [
        ("–î—Ä–µ–ª—å Bosch PSB 1800", 8999.99, "pcs", "–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
        ("–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç Makita DF331D", 5499.99, "pcs", "–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
        ("–ë–æ–ª–≥–∞—Ä–∫–∞ DeWalt DWE4157", 7899.99, "pcs", "–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
        ("–û—Ç–≤–µ—Ä—Ç–∫–∞ Phillips PH2", 129.99, "pcs", "–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
        ("–ú–æ–ª–æ—Ç–æ–∫ —Å–ª–µ—Å–∞—Ä–Ω—ã–π 500–≥", 299.99, "pcs", "–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
        ("–†—É–ª–µ—Ç–∫–∞ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è 5–º", 459.99, "pcs", "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
        ("–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π 60—Å–º", 899.99, "pcs", "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
        ("–ü–∏–ª–∞ –ø–æ –¥–µ—Ä–µ–≤—É 400–º–º", 549.99, "pcs", "–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
    ]
    
    # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
    materials = [
        ("–°–∞–º–æ—Ä–µ–∑—ã 3.5x25–º–º", 0.89, "pcs", "–ö—Ä–µ–ø–µ–∂"),
        ("–ë–æ–ª—Ç –ú8x20", 2.45, "pcs", "–ö—Ä–µ–ø–µ–∂"),
        ("–ì–∞–π–∫–∞ –ú8", 1.20, "pcs", "–ö—Ä–µ–ø–µ–∂"),
        ("–®–∞–π–±–∞ 8–º–º", 0.55, "pcs", "–ö—Ä–µ–ø–µ–∂"),
        ("–ü—Ä–æ–≤–æ–¥ –ü–í–° 2x1.5", 45.99, "m", "–≠–ª–µ–∫—Ç—Ä–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        ("–ö–∞–±–µ–ª—å –í–í–ì 3x2.5", 67.89, "m", "–≠–ª–µ–∫—Ç—Ä–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        ("–†–æ–∑–µ—Ç–∫–∞ –¥–≤–æ–π–Ω–∞—è", 289.99, "pcs", "–≠–ª–µ–∫—Ç—Ä–æ—É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"),
        ("–í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –æ–¥–Ω–æ–∫–ª–∞–≤–∏—à–Ω—ã–π", 159.99, "pcs", "–≠–ª–µ–∫—Ç—Ä–æ—É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"),
    ]
    
    # –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–æ 200+ —Ç–æ–≤–∞—Ä–æ–≤
    all_categories = [electronics, tools, materials]
    counter = 0
    
    for category_list in all_categories:
        for base_item in category_list:
            for i in range(7):  # –°–æ–∑–¥–∞–µ–º 7 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                counter += 1
                if counter > 200:
                    break
                
                name = f"{base_item[0]} - –í–∞—Ä–∏–∞–Ω—Ç {i+1}" if i > 0 else base_item[0]
                price = base_item[1] * (0.9 + i * 0.05)  # –í–∞—Ä—å–∏—Ä—É–µ–º —Ü–µ–Ω—É
                unit = base_item[2]
                category = base_item[3]
                
                products_data.append({
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': name,
                    '–¶–µ–Ω–∞ (—Ä—É–±)': price,
                    '–ï–¥–∏–Ω–∏—Ü–∞': unit,
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
                    '–ê—Ä—Ç–∏–∫—É–ª': f'ART-{counter:04d}',
                    '–û–ø–∏—Å–∞–Ω–∏–µ': f'–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä {name[:30]}...'
                })
        
        if counter > 200:
            break
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(products_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    os.makedirs('data/temp', exist_ok=True)
    test_file = 'data/temp/large_price_list_test.xlsx'
    df.to_excel(test_file, index=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_file}")
    print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(df)}")
    print(f"üìã –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
    print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique())}")
    
    return test_file

async def test_advanced_parsing():
    """–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüîç –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ü–ê–†–°–ò–ù–ì–ê EXCEL")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = create_large_test_file()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = AdvancedExcelParser()
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
    structure = parser.analyze_file_structure(test_file)
    
    print(f"üìÑ –õ–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {structure.get('total_sheets', 0)}")
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ª–∏—Å—Ç: {structure.get('recommended_sheet', 'N/A')}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    start_time = datetime.now()
    
    extracted_data = parser.extract_products_smart(test_file, max_products=500)
    
    extraction_time = (datetime.now() - start_time).total_seconds()
    
    if 'error' in extracted_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extracted_data['error']}")
        return False
    
    products = extracted_data.get('products', [])
    stats = extracted_data.get('extraction_stats', {})
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extraction_time:.2f} —Å–µ–∫")
    print(f"üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.get('total_rows', 0)}")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {stats.get('extracted_products', 0)}")
    print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: {stats.get('skipped_rows', 0)}")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1%}")
    print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {stats.get('found_columns', {})}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    print(f"\nüìÑ –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 5):")
    for i, product in enumerate(products[:5]):
        print(f"{i+1}. {product['original_name'][:50]}... | {product['price']} {product['unit']} | {product.get('category', 'N/A')}")
    
    return extracted_data

async def test_batch_chatgpt_processing(extracted_data):
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT"""
    print("\nü§ñ –¢–ï–°–¢ –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò CHATGPT")
    print("=" * 50)
    
    openai_key = os.getenv('OPENAI_API_KEY')
    if not openai_key:
        print("‚ùå OpenAI –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç ChatGPT")
        return extracted_data
    
    processor = BatchChatGPTProcessor(openai_key)
    products = extracted_data.get('products', [])
    supplier_name = extracted_data.get('supplier', {}).get('name', 'Test Supplier')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–æ 100 —Ç–æ–≤–∞—Ä–æ–≤
    test_products = products[:100]
    
    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(test_products)} —Ç–æ–≤–∞—Ä–æ–≤...")
    print(f"üì¶ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {processor.optimize_batch_size(test_products)}")
    
    start_time = datetime.now()
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    result = await processor.process_all_products(test_products, supplier_name)
    
    processing_time = (datetime.now() - start_time).total_seconds()
    
    if 'error' in result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
        return extracted_data
    
    processing_stats = result.get('processing_stats', {})
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"  ‚Ä¢ –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {processing_stats.get('total_input_products', 0)}")
    print(f"  ‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {processing_stats.get('total_output_products', 0)}")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {processing_stats.get('successful_batches', 0)}/{processing_stats.get('total_batches', 0)}")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {processing_stats.get('success_rate', 0):.1%}")
    print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {processing_stats.get('estimated_tokens', 0)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    processed_products = result.get('products', [])
    print(f"\nüéØ –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 3):")
    for i, product in enumerate(processed_products[:3]):
        print(f"{i+1}. {product.get('original_name', '')[:30]}...")
        print(f"   ‚Üí {product.get('standardized_name', '')[:30]}...")
        print(f"   ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', 'N/A')}")
        print(f"   ‚Üí –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {product.get('confidence', 0):.2f}")
    
    return result

async def test_google_sheets_integration(processed_data):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets"""
    print("\nüíæ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° GOOGLE SHEETS")
    print("=" * 50)
    
    gm = GoogleSheetsManager()
    if not gm.is_connected():
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
        return False
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets –∞–∫—Ç–∏–≤–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    start_time = datetime.now()
    
    sheets_result = gm.update_master_table(processed_data)
    
    save_time = (datetime.now() - start_time).total_seconds()
    
    if 'error' in sheets_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {sheets_result['error']}")
        return False
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_time:.2f} —Å–µ–∫")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    print(f"  ‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {sheets_result.get('new_products', 0)}")
    print(f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {sheets_result.get('updated_prices', 0)}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sheets_result.get('processed_products', 0)}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    supplier_name = processed_data.get('supplier', {}).get('name', 'Test Supplier')
    products = processed_data.get('products', [])
    
    supplier_result = gm.create_supplier_summary(supplier_name, products)
    print(f"üìã –õ–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {'‚úÖ –°–æ–∑–¥–∞–Ω' if supplier_result else '‚ùå –û—à–∏–±–∫–∞'}")
    
    print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {gm.get_sheet_url()}")
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    try:
        # 1. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
        extracted_data = await test_advanced_parsing()
        if not extracted_data or 'error' in extracted_data:
            print("‚ùå –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            return
        
        # 2. –¢–µ—Å—Ç ChatGPT
        processed_data = await test_batch_chatgpt_processing(extracted_data)
        
        # 3. –¢–µ—Å—Ç Google Sheets
        sheets_success = await test_google_sheets_integration(processed_data)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä Excel: –†–ê–ë–û–¢–ê–ï–¢")
        print("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ChatGPT: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"{'‚úÖ' if sheets_success else '‚ùå'} –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Google Sheets: {'–†–ê–ë–û–¢–ê–ï–¢' if sheets_success else '–û–®–ò–ë–ö–ê'}")
        
        if all([extracted_data, processed_data, sheets_success]):
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –û–ë–†–ê–ë–û–¢–ö–ï –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í!")
            print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å telegram_bot_advanced.py –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())