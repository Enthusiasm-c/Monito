#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ChatGPT —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import os
import sys
import json
import asyncio
import pandas as pd
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from dotenv import load_dotenv
load_dotenv()

from modules.google_sheets_manager import GoogleSheetsManager
from modules.system_monitor_simple import monitor

def clean_chatgpt_response(content: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ChatGPT"""
    content = content.strip()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ markdown –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    if content.startswith('```json'):
        content = content[7:]
    elif content.startswith('```'):
        content = content[3:]
        
    if content.endswith('```'):
        content = content[:-3]
    
    content = content.strip()
    
    # –ü–æ–∏—Å–∫ JSON –±–ª–æ–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    import re
    json_match = re.search(r'\{.*\}', content, re.DOTALL)
    if json_match:
        content = json_match.group(0)
    
    return content

async def test_chatgpt_processing():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ ChatGPT"""
    print("üîç –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° CHATGPT")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –∫–ª—é—á–∞...")
    openai_key = os.getenv('OPENAI_API_KEY')
    if not openai_key:
        print("‚ùå OpenAI –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    print("‚úÖ OpenAI –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞...")
    test_data = {
        'Product Name': [
            'Apple iPhone 14 Pro 128GB',
            'Samsung Galaxy S23 Ultra',
            'MacBook Pro 14" M2',
            'AirPods Pro 2nd Gen',
            'iPad Air 5th Gen'
        ],
        'Price': [999.99, 1199.99, 1999.99, 249.99, 599.99],
        'Unit': ['pcs', 'pcs', 'pcs', 'pcs', 'pcs']
    }
    
    df = pd.DataFrame(test_data)
    test_file = 'data/temp/test_chatgpt_integration.xlsx'
    os.makedirs('data/temp', exist_ok=True)
    df.to_excel(test_file, index=False)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
    print("\nüìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel...")
    supplier_name = "ChatGPT_Test_Store"
    
    products = []
    for idx, row in df.iterrows():
        products.append({
            'original_name': row['Product Name'],
            'price': row['Price'],
            'unit': row['Unit']
        })
    
    extracted_data = {
        'file_type': 'excel',
        'supplier': {'name': supplier_name},
        'products': products
    }
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    monitor.record_file_processing('excel', True)
    
    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT
    print("\nü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ChatGPT...")
    try:
        import requests
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ChatGPT
        products_text = ""
        for i, product in enumerate(products, 1):
            products_text += f"{i}. {product['original_name']} | {product['price']} | {product['unit']}\n"
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ "{supplier_name}" –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ.

–¢–û–í–ê–†–´:
{products_text}

–í–µ—Ä–Ω–∏ JSON –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "supplier": {{
    "name": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
    "contact": "",
    "confidence": 0.9
  }},
  "products": [
    {{
      "original_name": "–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
      "standardized_name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
      "price": —Ü–µ–Ω–∞_—á–∏—Å–ª–æ,
      "unit": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è_–µ–¥–∏–Ω–∏—Ü–∞(pcs/kg/l/m/box)",
      "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è_—Ç–æ–≤–∞—Ä–∞",
      "confidence": 0.95
    }}
  ],
  "data_quality": {{
    "extraction_confidence": 0.9,
    "source_clarity": "high",
    "potential_errors": []
  }}
}}

–ü–†–ê–í–ò–õ–ê:
- –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–π –µ–¥–∏–Ω–∏—Ü—ã: —à—Ç‚Üípcs, –∫–≥‚Üíkg, –ª‚Üíl, –º‚Üím
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: electronics, food, materials, etc.
- –£–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
- –°–æ—Ö—Ä–∞–Ω—è–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ original_name"""
        
        headers = {
            'Authorization': f'Bearer {openai_key}',
            'Content-Type': 'application/json'
        }
        
        data_payload = {
            'model': 'gpt-3.5-turbo',
            'messages': [
                {'role': 'system', 'content': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.'},
                {'role': 'user', 'content': prompt}
            ],
            'max_tokens': 2000,
            'temperature': 0.1
        }
        
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=data_payload,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            content = clean_chatgpt_response(content)
            
            print("‚úÖ ChatGPT –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
            print("üìÑ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(content[:300] + "..." if len(content) > 300 else content)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                standardized_data = json.loads(content)
                products_count = len(standardized_data.get('products', []))
                tokens_used = result.get('usage', {}).get('total_tokens', 0)
                
                print(f"‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π")
                print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}")
                print(f"üéØ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tokens_used}")
                
                monitor.record_chatgpt_request(True, tokens_used)
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
                print("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                print(content)
                monitor.record_chatgpt_request(False, 0, f"JSON Error: {e}")
                return False
                
        else:
            error_msg = f"HTTP {response.status_code}: {response.text}"
            print(f"‚ùå –û—à–∏–±–∫–∞ ChatGPT API: {error_msg}")
            monitor.record_chatgpt_request(False, 0, error_msg)
            return False
    
    except Exception as e:
        error_msg = f"Request Error: {e}"
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {error_msg}")
        monitor.record_chatgpt_request(False, 0, error_msg)
        return False
    
    # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets...")
    try:
        gm = GoogleSheetsManager()
        if not gm.is_connected():
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            monitor.record_sheets_update(False, 0, "No connection")
            return False
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        sheets_result = gm.update_master_table(standardized_data)
        
        if 'error' in sheets_result:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {sheets_result['error']}")
            monitor.record_sheets_update(False, 0, sheets_result['error'])
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_name = standardized_data.get('supplier', {}).get('name', 'Unknown')
        gm.create_supplier_summary(supplier_name, standardized_data.get('products', []))
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets")
        print(f"üìä –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {sheets_result.get('new_products', 0)}")
        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {sheets_result.get('updated_prices', 0)}")
        print(f"üîó –¢–∞–±–ª–∏—Ü–∞: {gm.get_sheet_url()}")
        
        monitor.record_sheets_update(True, len(standardized_data.get('products', [])))
        
    except Exception as e:
        error_msg = f"Sheets Error: {e}"
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {error_msg}")
        monitor.record_sheets_update(False, 0, error_msg)
        return False
    
    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê")
    print("=" * 50)
    print(monitor.get_formatted_report())
    
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("‚úÖ ChatGPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    print("‚úÖ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await test_chatgpt_processing()
        
        if success:
            print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ!")
        else:
            print("\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())