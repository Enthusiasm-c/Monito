import { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Grid,
  Paper,
  Card,
  CardContent,
  Button,
  Tabs,
  Tab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Switch,
  FormControlLabel,
  Alert,
  CircularProgress,
  Fab,
  Tooltip
} from '@mui/material'
import {
  Download as DownloadIcon,
  Email as EmailIcon,
  Schedule as ScheduleIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Send as SendIcon,
  Settings as SettingsIcon,
  GetApp as GetAppIcon,
  Assignment as AssignmentIcon,
  BarChart as BarChartIcon,
  PieChart as PieChartIcon,
  PlayArrow as PlayArrowIcon,
  Stop as StopIcon
} from '@mui/icons-material'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'

interface ReportTemplate {
  id: string
  name: string
  description: string
  formats: string[]
  sections: string[]
}

interface Subscription {
  id: string
  report_type: string
  frequency: string
  recipients: string[]
  format: string
  enabled: boolean
  last_sent: string | null
  created_at: string
}

interface SchedulerStatus {
  is_running: boolean
  active_subscriptions: number
  total_subscriptions: number
  next_check: string | null
  last_activity: string
}

export default function Reports() {
  const [activeTab, setActiveTab] = useState(0)
  const [templates, setTemplates] = useState<ReportTemplate[]>([])
  const [subscriptions, setSubscriptions] = useState<Subscription[]>([])
  const [schedulerStatus, setSchedulerStatus] = useState<SchedulerStatus | null>(null)
  const [loading, setLoading] = useState(false)
  const [generating, setGenerating] = useState(false)

  // Dialogs
  const [createSubDialog, setCreateSubDialog] = useState(false)
  const [emailSettingsDialog, setEmailSettingsDialog] = useState(false)

  // Form states
  const [selectedTemplate, setSelectedTemplate] = useState('')
  const [selectedFormat, setSelectedFormat] = useState('pdf')
  const [newSubscription, setNewSubscription] = useState({
    report_type: '',
    frequency: 'weekly',
    recipients: [''],
    format: 'pdf',
    enabled: true
  })
  
  const [emailSettings, setEmailSettings] = useState({
    smtp_server: '',
    smtp_port: 587,
    username: '',
    password: '',
    use_tls: true,
    sender_name: 'Monito System'
  })

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞
  useEffect(() => {
    loadTemplates()
    loadSubscriptions()
    loadSchedulerStatus()
  }, [])

  const loadTemplates = async () => {
    try {
      const response = await fetch('/api/v1/reports/templates')
      const data = await response.json()
      setTemplates(data.templates || [])
    } catch (error) {
      console.error('Error loading templates:', error)
      // Mock –¥–∞–Ω–Ω—ã–µ
      setTemplates([
        {
          id: 'price_analysis',
          name: '–ê–Ω–∞–ª–∏–∑ –¶–µ–Ω',
          description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω, —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —ç–∫–æ–Ω–æ–º–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
          formats: ['pdf', 'excel'],
          sections: ['–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', '–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–¢—Ä–µ–Ω–¥—ã —Ü–µ–Ω', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']
        },
        {
          id: 'supplier_performance',
          name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤',
          description: '–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∏',
          formats: ['pdf', 'excel'],
          sections: ['–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏']
        }
      ])
    }
  }

  const loadSubscriptions = async () => {
    try {
      const response = await fetch('/api/v1/reports/subscriptions')
      if (response.ok) {
        const data = await response.json()
        setSubscriptions(data)
      }
    } catch (error) {
      console.error('Error loading subscriptions:', error)
    }
  }

  const loadSchedulerStatus = async () => {
    try {
      const response = await fetch('/api/v1/reports/scheduler/status')
      if (response.ok) {
        const data = await response.json()
        setSchedulerStatus(data)
      }
    } catch (error) {
      console.error('Error loading scheduler status:', error)
    }
  }

  const generateReport = async (templateId: string, format: string) => {
    setGenerating(true)
    try {
      const response = await fetch('/api/v1/reports/download', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          report_type: templateId,
          format: format,
          include_charts: true
        })
      })

      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `monito_${templateId}_${new Date().toISOString().slice(0, 10)}.${format}`
        document.body.appendChild(a)
        a.click()
        a.remove()
        window.URL.revokeObjectURL(url)
      } else {
        alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
      }
    } catch (error) {
      console.error('Error generating report:', error)
      alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
    } finally {
      setGenerating(false)
    }
  }

  const createSubscription = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/v1/reports/subscriptions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newSubscription)
      })

      if (response.ok) {
        setCreateSubDialog(false)
        loadSubscriptions()
        setNewSubscription({
          report_type: '',
          frequency: 'weekly',
          recipients: [''],
          format: 'pdf',
          enabled: true
        })
      } else {
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏')
      }
    } catch (error) {
      console.error('Error creating subscription:', error)
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏')
    } finally {
      setLoading(false)
    }
  }

  const deleteSubscription = async (id: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?')) return

    try {
      const response = await fetch(`/api/v1/reports/subscriptions/${id}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        loadSubscriptions()
      } else {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏')
      }
    } catch (error) {
      console.error('Error deleting subscription:', error)
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏')
    }
  }

  const sendReportNow = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/reports/subscriptions/${id}/send`, {
        method: 'POST'
      })

      if (response.ok) {
        alert('–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...')
      } else {
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞')
      }
    } catch (error) {
      console.error('Error sending report:', error)
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞')
    }
  }

  const configureEmail = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/v1/reports/email/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(emailSettings)
      })

      if (response.ok) {
        setEmailSettingsDialog(false)
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ email —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
      } else {
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
      }
    } catch (error) {
      console.error('Error configuring email:', error)
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
    } finally {
      setLoading(false)
    }
  }

  const toggleScheduler = async () => {
    try {
      const endpoint = schedulerStatus?.is_running ? 'stop' : 'start'
      const response = await fetch(`/api/v1/reports/scheduler/${endpoint}`, {
        method: 'POST'
      })

      if (response.ok) {
        loadSchedulerStatus()
      }
    } catch (error) {
      console.error('Error toggling scheduler:', error)
    }
  }

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" component="h1" gutterBottom>
            üìä –û—Ç—á–µ—Ç—ã –∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
          </Typography>
          <Typography variant="body1" color="text.secondary">
            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
          </Typography>
        </Box>

        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<SettingsIcon />}
            onClick={() => setEmailSettingsDialog(true)}
          >
            Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
          
          <Button
            variant={schedulerStatus?.is_running ? "outlined" : "contained"}
            startIcon={schedulerStatus?.is_running ? <StopIcon /> : <PlayArrowIcon />}
            onClick={toggleScheduler}
            color={schedulerStatus?.is_running ? "error" : "success"}
          >
            {schedulerStatus?.is_running ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'} –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
          </Button>
        </Box>
      </Box>

      {/* –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ */}
      {schedulerStatus && (
        <Alert 
          severity={schedulerStatus.is_running ? "success" : "warning"} 
          sx={{ mb: 3 }}
        >
          –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {schedulerStatus.is_running ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} ‚Ä¢ 
          –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {schedulerStatus.active_subscriptions} ‚Ä¢ 
          –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {schedulerStatus.total_subscriptions}
        </Alert>
      )}

      {/* –¢–∞–±—ã */}
      <Paper sx={{ mb: 3 }}>
        <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>
          <Tab label="üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤" />
          <Tab label="üìß –ü–æ–¥–ø–∏—Å–∫–∏" />
          <Tab label="üìà –ò—Å—Ç–æ—Ä–∏—è" />
        </Tabs>
      </Paper>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
      {activeTab === 0 && (
        <Grid container spacing={3}>
          {templates.map((template) => (
            <Grid item xs={12} md={6} key={template.id}>
              <Card>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    {template.id === 'price_analysis' ? (
                      <BarChartIcon sx={{ mr: 1, color: 'primary.main' }} />
                    ) : (
                      <PieChartIcon sx={{ mr: 1, color: 'secondary.main' }} />
                    )}
                    <Typography variant="h6">
                      {template.name}
                    </Typography>
                  </Box>

                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    {template.description}
                  </Typography>

                  <Box sx={{ mb: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                      –†–∞–∑–¥–µ–ª—ã –æ—Ç—á–µ—Ç–∞:
                    </Typography>
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                      {template.sections.map((section) => (
                        <Chip key={section} label={section} size="small" />
                      ))}
                    </Box>
                  </Box>

                  <Box sx={{ display: 'flex', gap: 1 }}>
                    {template.formats.map((format) => (
                      <Button
                        key={format}
                        variant="outlined"
                        size="small"
                        startIcon={<DownloadIcon />}
                        onClick={() => generateReport(template.id, format)}
                        disabled={generating}
                      >
                        {format.toUpperCase()}
                      </Button>
                    ))}
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {activeTab === 1 && (
        <Box>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
            <Typography variant="h6">
              –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
            </Typography>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => setCreateSubDialog(true)}
            >
              –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            </Button>
          </Box>

          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>–¢–∏–ø –æ—Ç—á–µ—Ç–∞</TableCell>
                  <TableCell>–ß–∞—Å—Ç–æ—Ç–∞</TableCell>
                  <TableCell>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏</TableCell>
                  <TableCell>–§–æ—Ä–º–∞—Ç</TableCell>
                  <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                  <TableCell>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞</TableCell>
                  <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {subscriptions.map((sub) => (
                  <TableRow key={sub.id}>
                    <TableCell>{sub.report_type}</TableCell>
                    <TableCell>{sub.frequency}</TableCell>
                    <TableCell>{sub.recipients.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π</TableCell>
                    <TableCell>{sub.format.toUpperCase()}</TableCell>
                    <TableCell>
                      <Chip
                        label={sub.enabled ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
                        color={sub.enabled ? 'success' : 'default'}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      {sub.last_sent 
                        ? format(new Date(sub.last_sent), 'dd.MM.yyyy HH:mm', { locale: ru })
                        : '–ù–∏–∫–æ–≥–¥–∞'
                      }
                    </TableCell>
                    <TableCell>
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <Tooltip title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å">
                          <IconButton
                            size="small"
                            onClick={() => sendReportNow(sub.id)}
                            disabled={!sub.enabled}
                          >
                            <SendIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                          <IconButton size="small">
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                          <IconButton
                            size="small"
                            onClick={() => deleteSubscription(sub.id)}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </Box>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Box>
      )}

      {activeTab === 2 && (
        <Paper sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom>
            üìà –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤
          </Typography>
          <Typography variant="body2" color="text.secondary">
            –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
          </Typography>
        </Paper>
      )}

      {/* FAB –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ */}
      <Tooltip title="–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è">
        <Fab
          color="primary"
          sx={{ position: 'fixed', bottom: 16, right: 16 }}
          onClick={() => generateReport('price_analysis', 'pdf')}
          disabled={generating}
        >
          {generating ? <CircularProgress size={24} /> : <GetAppIcon />}
        </Fab>
      </Tooltip>

      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ */}
      <Dialog open={createSubDialog} onClose={() => setCreateSubDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>üìß –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Ç—á–µ—Ç</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
            <FormControl fullWidth>
              <InputLabel>–¢–∏–ø –æ—Ç—á–µ—Ç–∞</InputLabel>
              <Select
                value={newSubscription.report_type}
                onChange={(e) => setNewSubscription({
                  ...newSubscription,
                  report_type: e.target.value
                })}
              >
                {templates.map((template) => (
                  <MenuItem key={template.id} value={template.id}>
                    {template.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth>
              <InputLabel>–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</InputLabel>
              <Select
                value={newSubscription.frequency}
                onChange={(e) => setNewSubscription({
                  ...newSubscription,
                  frequency: e.target.value
                })}
              >
                <MenuItem value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</MenuItem>
                <MenuItem value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</MenuItem>
                <MenuItem value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</MenuItem>
              </Select>
            </FormControl>

            <FormControl fullWidth>
              <InputLabel>–§–æ—Ä–º–∞—Ç</InputLabel>
              <Select
                value={newSubscription.format}
                onChange={(e) => setNewSubscription({
                  ...newSubscription,
                  format: e.target.value
                })}
              >
                <MenuItem value="pdf">PDF</MenuItem>
                <MenuItem value="excel">Excel</MenuItem>
              </Select>
            </FormControl>

            <TextField
              fullWidth
              label="Email –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
              value={newSubscription.recipients.join(', ')}
              onChange={(e) => setNewSubscription({
                ...newSubscription,
                recipients: e.target.value.split(', ').filter(email => email.trim())
              })}
              placeholder="user1@example.com, user2@example.com"
              helperText="–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
            />

            <FormControlLabel
              control={
                <Switch
                  checked={newSubscription.enabled}
                  onChange={(e) => setNewSubscription({
                    ...newSubscription,
                    enabled: e.target.checked
                  })}
                />
              }
              label="–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCreateSubDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={createSubscription}
            variant="contained"
            disabled={loading || !newSubscription.report_type || !newSubscription.recipients.length}
          >
            {loading ? <CircularProgress size={20} /> : '–°–æ–∑–¥–∞—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email */}
      <Dialog open={emailSettingsDialog} onClose={() => setEmailSettingsDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
            <TextField
              fullWidth
              label="SMTP Server"
              value={emailSettings.smtp_server}
              onChange={(e) => setEmailSettings({
                ...emailSettings,
                smtp_server: e.target.value
              })}
              placeholder="smtp.gmail.com"
            />

            <TextField
              fullWidth
              label="SMTP Port"
              type="number"
              value={emailSettings.smtp_port}
              onChange={(e) => setEmailSettings({
                ...emailSettings,
                smtp_port: parseInt(e.target.value)
              })}
            />

            <TextField
              fullWidth
              label="Username"
              value={emailSettings.username}
              onChange={(e) => setEmailSettings({
                ...emailSettings,
                username: e.target.value
              })}
            />

            <TextField
              fullWidth
              label="Password"
              type="password"
              value={emailSettings.password}
              onChange={(e) => setEmailSettings({
                ...emailSettings,
                password: e.target.value
              })}
            />

            <TextField
              fullWidth
              label="Sender Name"
              value={emailSettings.sender_name}
              onChange={(e) => setEmailSettings({
                ...emailSettings,
                sender_name: e.target.value
              })}
            />

            <FormControlLabel
              control={
                <Switch
                  checked={emailSettings.use_tls}
                  onChange={(e) => setEmailSettings({
                    ...emailSettings,
                    use_tls: e.target.checked
                  })}
                />
              }
              label="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TLS"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEmailSettingsDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={configureEmail}
            variant="contained"
            disabled={loading}
          >
            {loading ? <CircularProgress size={20} /> : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
} 