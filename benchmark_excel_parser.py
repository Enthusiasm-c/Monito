#!/usr/bin/env python3
"""
–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Excel
"""

import time
import pandas as pd
import logging
from pathlib import Path
from typing import Dict, Any
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from modules.universal_excel_parser import UniversalExcelParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)  # –ú–∏–Ω–∏–º—É–º –ª–æ–≥–æ–≤ –¥–ª—è —á–∏—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
logger = logging.getLogger(__name__)

class ExcelParserBenchmark:
    """–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self):
        self.parser = UniversalExcelParser()
        self.test_files = []
        self.results = []
    
    def find_test_files(self, test_dir: str = "data/temp") -> None:
        """–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö Excel —Ñ–∞–π–ª–æ–≤"""
        test_path = Path(test_dir)
        if not test_path.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {test_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã
        patterns = ['*.xlsx', '*.xls']
        for pattern in patterns:
            self.test_files.extend(test_path.glob(pattern))
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(self.test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        for file in self.test_files:
            print(f"   üìÑ {file.name} ({file.stat().st_size / 1024:.1f} KB)")
    
    def benchmark_file(self, file_path: Path) -> Dict[str, Any]:
        """–ë–µ–Ω—á–º–∞—Ä–∫ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_size_kb = file_path.stat().st_size / 1024
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {file_path.name} ({file_size_kb:.1f} KB)")
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = time.time()
        
        try:
            result = self.parser.extract_products_universal(str(file_path), max_products=1000)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if 'error' in result:
                return {
                    'file': file_path.name,
                    'file_size_kb': file_size_kb,
                    'status': 'error',
                    'error': result['error'],
                    'processing_time': processing_time
                }
            
            stats = result.get('extraction_stats', {})
            products_count = len(result.get('products', []))
            
            benchmark_result = {
                'file': file_path.name,
                'file_size_kb': file_size_kb,
                'status': 'success',
                'processing_time': processing_time,
                'products_extracted': products_count,
                'total_rows': stats.get('total_rows', 0),
                'success_rate': stats.get('success_rate', 0),
                'used_sheet': stats.get('used_sheet', ''),
                'detected_structure': stats.get('detected_structure', ''),
                'kb_per_second': file_size_kb / processing_time if processing_time > 0 else 0,
                'rows_per_second': stats.get('total_rows', 0) / processing_time if processing_time > 0 else 0
            }
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.2f}—Å")
            print(f"   üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {products_count} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {stats.get('total_rows', 0)} —Å—Ç—Ä–æ–∫")
            print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {benchmark_result['kb_per_second']:.1f} KB/—Å, {benchmark_result['rows_per_second']:.1f} —Å—Ç—Ä–æ–∫/—Å")
            
            return benchmark_result
            
        except Exception as e:
            end_time = time.time()
            processing_time = end_time - start_time
            
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            return {
                'file': file_path.name,
                'file_size_kb': file_size_kb,
                'status': 'exception',
                'error': str(e),
                'processing_time': processing_time
            }
    
    def run_benchmark(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ë–ï–ù–ß–ú–ê–†–ö–ê EXCEL –ü–ê–†–°–ï–†–ê")
        print("=" * 50)
        
        if not self.test_files:
            print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_path in self.test_files:
            result = self.benchmark_file(file_path)
            self.results.append(result)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results()
    
    def analyze_results(self) -> None:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê")
        print("=" * 50)
        
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –£—Å–ø–µ—à–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        successful = [r for r in self.results if r['status'] == 'success']
        failed = [r for r in self.results if r['status'] != 'success']
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(successful)}/{len(self.results)}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {len(failed)}")
        
        if successful:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            times = [r['processing_time'] for r in successful]
            avg_time = sum(times) / len(times)
            min_time = min(times)
            max_time = max(times)
            
            print(f"\n‚è±Ô∏è –í–†–ï–ú–Ø –û–ë–†–ê–ë–û–¢–ö–ò:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_time:.2f}—Å")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min_time:.2f}—Å")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_time:.2f}—Å")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
            speeds_kb = [r['kb_per_second'] for r in successful if r['kb_per_second'] > 0]
            speeds_rows = [r['rows_per_second'] for r in successful if r['rows_per_second'] > 0]
            
            if speeds_kb:
                avg_speed_kb = sum(speeds_kb) / len(speeds_kb)
                print(f"\n‚ö° –°–ö–û–†–û–°–¢–¨ –û–ë–†–ê–ë–û–¢–ö–ò:")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_speed_kb:.1f} KB/—Å")
                print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(speeds_kb):.1f} KB/—Å")
            
            if speeds_rows:
                avg_speed_rows = sum(speeds_rows) / len(speeds_rows)
                print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_speed_rows:.1f} —Å—Ç—Ä–æ–∫/—Å")
                print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(speeds_rows):.1f} —Å—Ç—Ä–æ–∫/—Å")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é
            products = [r['products_extracted'] for r in successful]
            total_products = sum(products)
            avg_products = total_products / len(successful) if successful else 0
            
            print(f"\nüìà –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
            print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Ñ–∞–π–ª: {avg_products:.1f}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(products) if products else 0}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 100)
        print(f"{'–§–∞–π–ª':<25} {'–†–∞–∑–º–µ—Ä':<10} {'–í—Ä–µ–º—è':<8} {'–¢–æ–≤–∞—Ä—ã':<8} {'–°–∫–æ—Ä–æ—Å—Ç—å':<12} {'–°—Ç–∞—Ç—É—Å'}")
        print("-" * 100)
        
        for r in self.results:
            status_icon = "‚úÖ" if r['status'] == 'success' else "‚ùå"
            speed_str = f"{r.get('kb_per_second', 0):.1f} KB/—Å" if r['status'] == 'success' else "-"
            
            print(f"{r['file']:<25} {r['file_size_kb']:<9.1f} {r['processing_time']:<7.2f} "
                  f"{r.get('products_extracted', 0):<8} {speed_str:<12} {status_icon}")
        
        print("-" * 100)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results()
    
    def save_results(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        results_file = f"benchmark_results_{timestamp}.json"
        
        import json
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    benchmark = ExcelParserBenchmark()
    
    # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    benchmark.find_test_files()
    
    if not benchmark.test_files:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/temp/")
        print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ Excel —Ñ–∞–π–ª—ã –≤ data/temp/ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
    benchmark.run_benchmark()

if __name__ == "__main__":
    main()