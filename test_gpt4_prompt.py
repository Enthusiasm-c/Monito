#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ GPT-4.1 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
"""

import os
import sys
import asyncio
import pandas as pd

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.batch_chatgpt_processor import BatchChatGPTProcessor
from modules.google_sheets_manager import GoogleSheetsManager
from dotenv import load_dotenv

load_dotenv()

def create_complex_test_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    test_data = {
        'Brand': [
            'SAPORITO', 'BARILLA', 'MAGGI', 'INDOMIE', '', 'HEINZ', 'DEL MONTE',
            'BLUE BAND', 'TROPICANA', 'COCA COLA', 'PEPSI', 'AQUA', 'BIMOLI'
        ],
        'Product Description': [
            'Baked Bean in tomato sauce 2.65 Kg',
            'Spaghetti No.5 500gr',
            'Seasoning Powder Ayam 1kg',
            'Mi Goreng Rasa Ayam 85g',
            'Minyak Goreng Kelapa Sawit 1L',
            'Tomato Ketchup 340ml',
            'Pineapple Chunks in Syrup 567g',
            'Margarine 200g',
            'Orange Juice 1L',
            'Coca Cola 330ml Can',
            'Pepsi 600ml Bottle',
            'Mineral Water 600ml',
            'Cooking Oil 2L'
        ],
        'Size/Weight': [
            '2.65 kg', '500 gr', '1 kg', '85 gr', '1 L',
            '340 ml', '567 g', '200 g', '1 L', '330 ml',
            '600 ml', '600 ml', '2 L'
        ],
        'Price (Rp)': [
            '90.000', '25.500', '15.750', '3.200', '18.900',
            '12.400', '28.600', '8.500', '35.000', '4.500',
            '7.200', '3.000', '35.800'
        ],
        'Unit': [
            'per piece', 'per piece', 'per piece', 'per piece', 'per piece',
            'per piece', 'per piece', 'per piece', 'per piece', 'per piece',
            'per piece', 'per piece', 'per piece'
        ]
    }
    
    df = pd.DataFrame(test_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    os.makedirs('data/temp', exist_ok=True)
    test_file = 'data/temp/indonesia_price_list_test.xlsx'
    df.to_excel(test_file, index=False, sheet_name='Product List')
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_file}")
    print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(df)}")
    print("üìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö:")
    print(df.head())
    
    return test_file

async def test_gpt4_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º GPT-4.1"""
    print("\nü§ñ –¢–ï–°–¢ –ù–û–í–û–ì–û –ü–†–û–ú–ü–¢–ê GPT-4.1")
    print("=" * 50)
    
    openai_key = os.getenv('OPENAI_API_KEY')
    if not openai_key:
        print("‚ùå OpenAI –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_file = create_complex_test_file()
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    df = pd.read_excel(test_file)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    products = []
    for idx, row in df.iterrows():
        product_name = f"{row.get('Brand', '')} {row.get('Product Description', '')}".strip()
        price_str = str(row.get('Price (Rp)', '0')).replace('.', '').replace(',', '')
        
        try:
            price = float(price_str)
        except:
            price = 0
        
        products.append({
            'original_name': product_name,
            'price': price,
            'unit': 'pcs'
        })
    
    print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    processor = BatchChatGPTProcessor(openai_key)
    supplier_name = "PT. GLOBAL ANUGRAH PASIFIK"
    
    print(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ GPT-4.1 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        result = await processor.process_products_batch(products, supplier_name, 0)
        
        if result and 'products' in result:
            processed_products = result.get('products', [])
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_products)} —Ç–æ–≤–∞—Ä–æ–≤")
            print("\nüìÑ –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
            
            for i, product in enumerate(processed_products[:5]):
                print(f"\n{i+1}. –ò–°–•–û–î–ù–´–ô: {product.get('original_name', 'N/A')}")
                print(f"   –°–¢–ê–ù–î–ê–†–¢: {product.get('standardized_name', 'N/A')}")
                print(f"   –ë–†–ï–ù–î: {product.get('brand', 'N/A')}")
                print(f"   –†–ê–ó–ú–ï–†: {product.get('size', 'N/A')}")
                print(f"   –¶–ï–ù–ê: {product.get('price', 0)} {product.get('currency', 'N/A')}")
                print(f"   –ö–ê–¢–ï–ì–û–†–ò–Ø: {product.get('category', 'N/A')}")
                print(f"   –£–í–ï–†–ï–ù–ù–û–°–¢–¨: {product.get('confidence', 0):.2f}")
            
            return result
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

async def test_google_sheets_integration(processed_data):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ Google Sheets"""
    print("\nüíæ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò GOOGLE SHEETS")
    print("=" * 50)
    
    if not processed_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return False
    
    gm = GoogleSheetsManager()
    if not gm.is_connected():
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
        return False
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets –∞–∫—Ç–∏–≤–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...")
    
    try:
        sheets_result = gm.update_master_table(processed_data)
        
        if 'error' in sheets_result:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {sheets_result['error']}")
            return False
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
        print(f"  ‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {sheets_result.get('new_products', 0)}")
        print(f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {sheets_result.get('updated_prices', 0)}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sheets_result.get('processed_products', 0)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_name = processed_data.get('supplier', {}).get('name', 'Test Supplier')
        products = processed_data.get('products', [])
        
        supplier_result = gm.create_supplier_summary(supplier_name, products)
        print(f"üìã –õ–∏—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {'‚úÖ –°–æ–∑–¥–∞–Ω' if supplier_result else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {gm.get_sheet_url()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –° –ù–û–í–´–ú –ü–†–û–ú–ü–¢–û–ú GPT-4.1")
    print("=" * 60)
    
    try:
        # 1. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPT-4.1
        processed_data = await test_gpt4_processing()
        
        if not processed_data:
            print("‚ùå –¢–µ—Å—Ç GPT-4.1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            return
        
        # 2. –¢–µ—Å—Ç Google Sheets
        sheets_success = await test_google_sheets_integration(processed_data)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        print("‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç GPT-4.1: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"{'‚úÖ' if sheets_success else '‚ùå'} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Google Sheets: {'–†–ê–ë–û–¢–ê–ï–¢' if sheets_success else '–û–®–ò–ë–ö–ê'}")
        
        if processed_data and sheets_success:
            print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï –° –£–õ–£–ß–®–ï–ù–ù–´–ú –ü–†–û–ú–ü–¢–û–ú!")
            print("üîó –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
            print("  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
            print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω –∏ –≤–∞–ª—é—Ç")
            print("  ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∑–∏–∞—Ç—Å–∫–∏—Ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤")
            print("  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets")
        else:
            print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())