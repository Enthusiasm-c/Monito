#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
"""

import os
import sys
import json
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from telegram import Update, Document
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.google_sheets_manager import GoogleSheetsManager
from modules.universal_excel_parser import UniversalExcelParser
from modules.batch_chatgpt_processor import BatchChatGPTProcessor
from modules.system_monitor_simple import monitor
from modules.pdf_parser import PDFParser

# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot_detailed.log', mode='w', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class AdvancedTelegramBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.openai_key = os.getenv('OPENAI_API_KEY')
        self.google_sheets = GoogleSheetsManager()
        self.excel_parser = UniversalExcelParser()
        self.pdf_parser = PDFParser()
        self.chatgpt_processor = BatchChatGPTProcessor(self.openai_key) if self.openai_key else None
        self.temp_dir = "data/temp"
        os.makedirs(self.temp_dir, exist_ok=True)
        
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.openai_key:
            logger.warning("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - ChatGPT –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Advanced Price List Analyzer!*

–Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ ChatGPT.

*üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–û–¢–ï–ù —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑
‚Ä¢ –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–æ–≤ –ª—é–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏

*üìä –ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Excel (.xlsx, .xls) –∏ PDF —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é Camelot/Tabula
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ChatGPT-4 –ø–∞–∫–µ—Ç–∞–º–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Google Sheets —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

*üîß –ö–æ–º–∞–Ω–¥—ã:*
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞  
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/sheet - —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets
/test - —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

*üìÅ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!*

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Å–æ—Ç–Ω—è–º–∏ –ø–æ–∑–∏—Ü–∏–π! üéØ
        """
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ Advanced Price List Analyzer*

*üîç –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö)
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ç–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑

*ü§ñ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ChatGPT:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ 1000 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Å–µ–∞–Ω—Å
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

*üíæ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:*
‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
‚Ä¢ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

*üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ

*üöÄ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:*
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª (–¥–æ 20 –ú–ë)
2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
3. –ò–∑–≤–ª–µ—á–µ—Ç –º–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤
4. –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ ChatGPT –ø–∞–∫–µ—Ç–∞–º–∏
5. –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ Google Sheets —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
6. –ü–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

*üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ –õ—é–±—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
‚Ä¢ –¶–µ–Ω—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
‚Ä¢ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤

*‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å:*
        """
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        sheets_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if self.google_sheets.is_connected() else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
        chatgpt_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.chatgpt_processor else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        help_text += f"‚Ä¢ Google Sheets: {sheets_status}\n"
        help_text += f"‚Ä¢ ChatGPT API: {chatgpt_status}\n"
        help_text += f"‚Ä¢ Excel Parser: ‚úÖ –ì–æ—Ç–æ–≤\n"
        help_text += f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            system_stats = monitor.get_formatted_report()
            rates = monitor.get_success_rates()
            
            stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Advanced Price List Analyzer*

{system_stats}

*üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:*
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: {rates.get('file_processing', 0):.1%}
‚Ä¢ ChatGPT –∑–∞–ø—Ä–æ—Å—ã: {rates.get('chatgpt_requests', 0):.1%}
‚Ä¢ Google Sheets: {rates.get('sheets_updates', 0):.1%}
            """
            
            # Google Sheets —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if self.google_sheets.is_connected():
                sheets_stats = self.google_sheets.get_stats()
                stats_text += f"""

*üíæ Google Sheets –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {sheets_stats.get('total_products', 0)}
‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {sheets_stats.get('total_suppliers', 0)}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(sheets_stats.get('categories', []))}

üîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheets_stats.get('sheet_url', '')})
                """
            
            await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def sheet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /sheet"""
        if self.google_sheets.is_connected():
            url = self.google_sheets.get_sheet_url()
            await update.message.reply_text(
                f"üìä [–û—Ç–∫—Ä—ã—Ç—å Google Sheets —Ç–∞–±–ª–∏—Ü—É]({url})", 
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /test"""
        test_message = await update.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            results = {}
            
            # –¢–µ—Å—Ç Google Sheets
            results['sheets'] = self.google_sheets.is_connected()
            
            # –¢–µ—Å—Ç ChatGPT (–±—ã—Å—Ç—Ä—ã–π)
            if self.chatgpt_processor:
                try:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
                    results['chatgpt'] = bool(self.openai_key)
                except:
                    results['chatgpt'] = False
            else:
                results['chatgpt'] = False
            
            # –¢–µ—Å—Ç Excel Parser
            results['parser'] = True  # –í—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            
            # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                monitor.get_stats()
                results['monitoring'] = True
            except:
                results['monitoring'] = False
            
            result_text = f"""
üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã*

üìä *–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*
‚Ä¢ Google Sheets: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if results['sheets'] else '‚ùå –û—à–∏–±–∫–∞'}
‚Ä¢ ChatGPT API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if results['chatgpt'] else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚Ä¢ Excel Parser: {'‚úÖ –ì–æ—Ç–æ–≤' if results['parser'] else '‚ùå –û—à–∏–±–∫–∞'}
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if results['monitoring'] else '‚ùå –û—à–∏–±–∫–∞'}

*üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:* {'üü¢ –ü–æ–ª–Ω–∞—è' if all(results.values()) else 'üü° –ß–∞—Å—Ç–∏—á–Ω–∞—è' if any(results.values()) else 'üî¥ –ù–µ –≥–æ—Ç–æ–≤'}

*üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ Excel —Ñ–∞–π–ª—ã
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å —Å–æ—Ç–Ω—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google Sheets —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            """
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=test_message.message_id,
                text=result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=test_message.message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
        document: Document = update.message.document
        
        logger.info(f"üî• –ù–ê–ß–ê–õ–ê–°–¨ –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê")
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
        logger.info(f"üìé –§–∞–π–ª: {document.file_name}")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä: {document.file_size / 1024 / 1024:.2f} –ú–ë")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        logger.debug(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
        validation_result = self._validate_file(document)
        if not validation_result['valid']:
            logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {validation_result['error']}")
            await update.message.reply_text(f"‚ùå {validation_result['error']}")
            return
        
        logger.info(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        if not self.google_sheets.is_connected():
            logger.error(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            return
        
        logger.info(f"‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        processing_message = await update.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        
        try:
            start_time = datetime.now()
            logger.info(f"‚è∞ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {start_time}")
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            logger.debug(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            file = await context.bot.get_file(document.file_id)
            file_path = os.path.join(self.temp_dir, document.file_name)
            await file.download_to_drive(file_path)
            
            download_time = datetime.now()
            logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –∑–∞ {(download_time - start_time).total_seconds():.1f}—Å: {document.file_name}")
            logger.debug(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
            file_extension = document.file_name.lower().split('.')[-1]
            logger.info(f"üìã –¢–∏–ø —Ñ–∞–π–ª–∞: {file_extension.upper()}")
            
            parsing_start = datetime.now()
            if file_extension == 'pdf':
                logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú PDF –ü–ê–†–°–ò–ù–ì...")
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É PDF —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ–∫–∞—é —Ç–∞–±–ª–∏—Ü—ã —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π..."
                )
                
                extracted_data = self.pdf_parser.extract_products_from_pdf(file_path, max_products=1000, use_ai=True)
            else:
                logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú EXCEL –ü–ê–†–°–ò–ù–ì...")
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞ —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π..."
                )
                
                extracted_data = self.excel_parser.extract_products_universal(file_path, max_products=1000, use_ai=True)
            
            parsing_time = datetime.now()
            logger.info(f"‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –∑–∞ {(parsing_time - parsing_start).total_seconds():.1f}—Å")
            
            if 'error' in extracted_data:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞: {extracted_data['error']}")
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {extracted_data['error']}"
                )
                return
            
            products = extracted_data.get('products', [])
            stats = extracted_data.get('extraction_stats', {})
            
            logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê:")
            logger.info(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(products)}")
            logger.info(f"   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.get('total_rows', 0)}")
            logger.info(f"   üîß –ú–µ—Ç–æ–¥: {stats.get('extraction_method', 'N/A')}")
            logger.info(f"   ü§ñ AI Enhanced: {stats.get('ai_enhanced', False)}")
            logger.info(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1%}")
            
            if not products:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ")
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text=f"‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:\n‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫: {stats.get('total_rows', 0)}\n‚Ä¢ –ú–µ—Ç–æ–¥: {stats.get('extraction_method', 'N/A')}\n‚Ä¢ AI Enhanced: {stats.get('ai_enhanced', False)}"
                )
                monitor.record_file_processing(file_extension, False, 'No products found')
                return
            
            logger.info(f"‚úÖ –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ï–ù: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text=f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤!\n\nü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ ChatGPT –ø–∞–∫–µ—Ç–∞–º–∏..."
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT
            if self.chatgpt_processor and len(products) > 0:
                supplier_name = extracted_data.get('supplier', {}).get('name', 'Unknown')
                standardized_data = await self.chatgpt_processor.process_all_products(products, supplier_name)
                
                if 'error' in standardized_data:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=processing_message.message_id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT: {standardized_data['error']}"
                    )
                    monitor.record_chatgpt_request(False, 0, standardized_data['error'])
                    return
                
                processing_stats = standardized_data.get('processing_stats', {})
                monitor.record_chatgpt_request(True, processing_stats.get('estimated_tokens', 0))
            else:
                # Fallback –±–µ–∑ ChatGPT
                standardized_data = self._create_fallback_data(extracted_data)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text="üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π..."
            )
            
            sheets_result = self.google_sheets.update_master_table(standardized_data)
            
            if 'error' in sheets_result:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=processing_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {sheets_result['error']}"
                )
                monitor.record_sheets_update(False, 0, sheets_result['error'])
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier_name = standardized_data.get('supplier', {}).get('name', 'Unknown')
            self.google_sheets.create_supplier_summary(supplier_name, standardized_data.get('products', []))
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            processing_time = (datetime.now() - start_time).total_seconds()
            report = self._generate_advanced_report(extracted_data, standardized_data, sheets_result, processing_time)
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text=report,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            monitor.record_file_processing('excel', True)
            monitor.record_sheets_update(True, len(standardized_data.get('products', [])))
            
            logger.info(f"–§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            
            error_text = f"""‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:
`{str(e)}`

*üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=processing_message.message_id,
                text=error_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            monitor.record_file_processing('excel', False, str(e))
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except:
                pass
    
    def _validate_file(self, document: Document) -> dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞"""
        supported_extensions = ('.xlsx', '.xls', '.pdf')
        if not document.file_name.lower().endswith(supported_extensions):
            return {'valid': False, 'error': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel (.xlsx, .xls) –∏ PDF —Ñ–∞–π–ª—ã'}
        
        max_size = 20 * 1024 * 1024  # 20 MB
        if document.file_size > max_size:
            return {'valid': False, 'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë'}
        
        return {'valid': True}
    
    def _create_fallback_data(self, extracted_data: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ ChatGPT"""
        products = []
        for product in extracted_data.get('products', []):
            products.append({
                'original_name': product.get('original_name', ''),
                'standardized_name': product.get('original_name', ''),
                'price': product.get('price', 0),
                'unit': product.get('unit', 'pcs'),
                'category': product.get('category', 'general'),
                'confidence': 0.7
            })
        
        return {
            'supplier': extracted_data.get('supplier', {}),
            'products': products,
            'data_quality': {
                'extraction_confidence': 0.7,
                'source_clarity': 'medium',
                'potential_errors': ['–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–µ–∑ ChatGPT']
            }
        }
    
    def _generate_advanced_report(self, extracted_data: Dict, standardized_data: Dict, sheets_result: Dict, processing_time: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        supplier_name = standardized_data.get('supplier', {}).get('name', 'Unknown')
        extraction_stats = extracted_data.get('extraction_stats', {})
        processing_stats = standardized_data.get('processing_stats', {})
        
        report = f"""
‚úÖ *–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*

üè™ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {supplier_name}
‚è± *–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* {processing_time:.1f} —Å–µ–∫

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:*
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫: {extraction_stats.get('total_rows', 0)}
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {extraction_stats.get('extracted_products', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extraction_stats.get('success_rate', 0):.1%}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏—Å—Ç: {extraction_stats.get('used_sheet', 'N/A')}

ü§ñ *ChatGPT –æ–±—Ä–∞–±–æ—Ç–∫–∞:*
"""
        
        if processing_stats and not processing_stats.get('fallback_used', False):
            report += f"""‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processing_stats.get('total_output_products', 0)}/{processing_stats.get('total_input_products', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {processing_stats.get('successful_batches', 0)}/{processing_stats.get('total_batches', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {processing_stats.get('success_rate', 0):.1%}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {processing_stats.get('estimated_tokens', 0)}
"""
        else:
            # Fallback mode or no ChatGPT processing
            total_products = len(standardized_data.get('products', []))
            report += f"""‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}/{total_products} (fallback —Ä–µ–∂–∏–º)
‚Ä¢ ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ AI
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: 0
"""
        
        report += f"""
üíæ *Google Sheets —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*
‚Ä¢ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {sheets_result.get('new_products', 0)}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {sheets_result.get('updated_prices', 0)}
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sheets_result.get('processed_products', 0)}

üîó [–û—Ç–∫—Ä—ã—Ç—å Google Sheets —Ç–∞–±–ª–∏—Ü—É]({self.google_sheets.get_sheet_url()})

üéØ *–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞!*
        """
        
        return report
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: {update.message.text}")
        await update.message.reply_text(
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º\n\n"
            "üöÄ *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ç–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ\n"
            "‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏",
            parse_mode=ParseMode.MARKDOWN
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Advanced Telegram –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        sheets_connected = self.google_sheets.is_connected()
        chatgpt_available = bool(self.chatgpt_processor)
        
        print("\n" + "="*70)
        print("üöÄ ADVANCED TELEGRAM BOT –° –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –ó–ê–ü–£–©–ï–ù!")
        print("="*70)
        print(f"üìä Google Sheets: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' if sheets_connected else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}")
        print(f"ü§ñ ChatGPT API: {'‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ' if chatgpt_available else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"üîç Excel Parser: ‚úÖ –ì–æ—Ç–æ–≤ –∫ —É–º–Ω–æ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É")
        print(f"üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω")
        
        if sheets_connected:
            print(f"üîó –¢–∞–±–ª–∏—Ü–∞: {self.google_sheets.get_sheet_url()}")
        
        print("\nüì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        print("üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ –ò–ò")
        print("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Å–æ—Ç–Ω—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤!")
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("="*70)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("sheet", self.sheet_command))
        application.add_handler(CommandHandler("test", self.test_command))
        application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫
        application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        bot = AdvancedTelegramBot()
        bot.run()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("‚Ä¢ TELEGRAM_BOT_TOKEN –≤ .env")
        print("‚Ä¢ OPENAI_API_KEY –≤ .env")  
        print("‚Ä¢ Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")