#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ç–∏–≤ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import asyncio
import json
from pathlib import Path

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from modules.training_data_manager import TrainingDataManager
from modules.advanced_excel_parser import AdvancedExcelParser
from modules.batch_chatgpt_processor import BatchChatGPTProcessor
from dotenv import load_dotenv

load_dotenv()

async def test_single_example(example_name: str, trainer: TrainingDataManager):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {example_name}")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    reference_data = trainer.load_reference_data(example_name)
    if not reference_data:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {example_name}")
        return None
    
    # –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    original_file = None
    for ext in ['.xlsx', '.xls']:
        file_path = trainer.original_files_dir / f"{example_name}{ext}"
        if file_path.exists():
            original_file = str(file_path)
            break
    
    if not original_file:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è {example_name}")
        return None
    
    print(f"üìÅ –§–∞–π–ª: {original_file}")
    print(f"üéØ –≠—Ç–∞–ª–æ–Ω: {len(reference_data.get('products', []))} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä Excel
    print("\nüìä –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Excel...")
    parser = AdvancedExcelParser()
    extracted_data = parser.extract_products_smart(original_file, max_products=1000)
    
    if 'error' in extracted_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {extracted_data['error']}")
        return None
    
    extracted_products = extracted_data.get('products', [])
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(extracted_products)}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º ChatGPT –æ–±—Ä–∞–±–æ—Ç–∫—É
    print("\nü§ñ –¢–µ—Å—Ç ChatGPT –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    openai_key = os.getenv('OPENAI_API_KEY')
    if not openai_key:
        print("‚ùå OpenAI –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    processor = BatchChatGPTProcessor(openai_key)
    supplier_name = reference_data.get('supplier', {}).get('name', 'Test Supplier')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
    test_products = extracted_products[:50] if len(extracted_products) > 50 else extracted_products
    
    try:
        chatgpt_result = await processor.process_all_products(test_products, supplier_name)
        
        if 'error' in chatgpt_result:
            print(f"‚ùå –û—à–∏–±–∫–∞ ChatGPT: {chatgpt_result['error']}")
            return None
        
        processed_products = chatgpt_result.get('products', [])
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(processed_products)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ChatGPT –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return None
    
    # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º
    print("\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º...")
    comparison = trainer.compare_results(chatgpt_result, reference_data, example_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_comparison_results(comparison)
    
    return comparison

def print_comparison_results(comparison: dict):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    overall = comparison.get('overall_metrics', {})
    print(f"üìà –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
    print(f"  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {overall.get('supplier_accuracy', 0):.1%}")
    print(f"  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤: {overall.get('products_field_accuracy', 0):.1%}")
    print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {overall.get('products_detection_rate', 0):.1%}")
    
    # –ü–æ—Å—Ç–∞–≤—â–∏–∫
    supplier_comp = comparison.get('supplier_comparison', {})
    print(f"\nüè™ –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    for field, data in supplier_comp.items():
        score = data.get('match_score', 0)
        status = "‚úÖ" if score >= 0.8 else "‚ö†Ô∏è" if score >= 0.5 else "‚ùå"
        print(f"  {status} {field}: {score:.1%}")
        if data.get('reference') and data.get('actual') != data.get('reference'):
            print(f"      –≠—Ç–∞–ª–æ–Ω: {data.get('reference')}")
            print(f"      –§–∞–∫—Ç: {data.get('actual')}")
    
    # –¢–æ–≤–∞—Ä—ã
    products_comp = comparison.get('products_comparison', {})
    print(f"\nüì¶ –¢–æ–≤–∞—Ä—ã:")
    print(f"  ‚Ä¢ –≠—Ç–∞–ª–æ–Ω–Ω—ã—Ö: {products_comp.get('total_reference', 0)}")
    print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö: {products_comp.get('total_actual', 0)}")
    print(f"  ‚Ä¢ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö: {len(products_comp.get('matched_products', []))}")
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
    field_accuracy = products_comp.get('field_accuracy', {})
    print(f"\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤:")
    for field, data in field_accuracy.items():
        score = data.get('average_score', 0)
        count = data.get('total_comparisons', 0)
        status = "‚úÖ" if score >= 0.8 else "‚ö†Ô∏è" if score >= 0.5 else "‚ùå"
        print(f"  {status} {field}: {score:.1%} ({count} —Å—Ä–∞–≤–Ω–µ–Ω–∏–π)")
    
    # –ü—Ä–æ–±–ª–µ–º—ã
    missing = products_comp.get('missing_products', [])
    extra = products_comp.get('extra_products', [])
    
    if missing:
        print(f"\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({len(missing)}):")
        for product in missing[:5]:
            print(f"  ‚Ä¢ {product}")
        if len(missing) > 5:
            print(f"  ‚Ä¢ ... –∏ –µ—â–µ {len(missing) - 5}")
    
    if extra:
        print(f"\n‚ûï –õ–∏—à–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã ({len(extra)}):")
        for product in extra[:5]:
            print(f"  ‚Ä¢ {product}")
        if len(extra) > 5:
            print(f"  ‚Ä¢ ... –∏ –µ—â–µ {len(extra) - 5}")

async def test_all_examples():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –≠–¢–ê–õ–û–ù–ù–´–• –ü–†–ò–ú–ï–†–û–í")
    print("=" * 60)
    
    trainer = TrainingDataManager()
    examples = trainer.get_training_examples_list()
    
    if not examples:
        print("üì≠ –ù–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    results = []
    
    for example in examples:
        try:
            result = await test_single_example(example, trainer)
            if result:
                results.append({
                    'name': example,
                    'metrics': result.get('overall_metrics', {})
                })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {example}: {e}")
            continue
    
    # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    if results:
        print(f"\nüìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û {len(results)} –ü–†–ò–ú–ï–†–ê–ú")
        print("=" * 60)
        
        # –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        avg_supplier = sum(r['metrics'].get('supplier_accuracy', 0) for r in results) / len(results)
        avg_products = sum(r['metrics'].get('products_field_accuracy', 0) for r in results) / len(results)
        avg_detection = sum(r['metrics'].get('products_detection_rate', 0) for r in results) / len(results)
        
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        print(f"  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {avg_supplier:.1%}")
        print(f"  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤: {avg_products:.1%}")
        print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {avg_detection:.1%}")
        
        print(f"\nüìã –ü–æ –ø—Ä–∏–º–µ—Ä–∞–º:")
        for result in results:
            metrics = result['metrics']
            overall_score = (
                metrics.get('supplier_accuracy', 0) + 
                metrics.get('products_field_accuracy', 0) + 
                metrics.get('products_detection_rate', 0)
            ) / 3
            
            status = "üü¢" if overall_score >= 0.8 else "üü°" if overall_score >= 0.6 else "üî¥"
            print(f"  {status} {result['name']}: {overall_score:.1%}")

def create_sample_reference():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìù –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ú–ï–†–ê –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    trainer = TrainingDataManager()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    sample_reference = {
        "supplier": {
            "name": "PT GLOBAL ANUGRAH PASIFIK",
            "phone": "(0361) 9075914",
            "whatsapp": "+856 755 3319",
            "email": "sales@gap-indo.com",
            "address": "Bali, Indonesia"
        },
        "products": [
            {
                "original_name": "SAPORITO Baked Bean in tomato sauce 2.65 Kg",
                "brand": "SAPORITO",
                "standardized_name": "SAPORITO Baked Beans in Tomato Sauce",
                "size": "2.65",
                "unit": "kg",
                "price": 90000,
                "currency": "IDR",
                "category": "canned_food",
                "confidence": 0.95
            },
            {
                "original_name": "BARILLA Spaghetti No.5 500gr",
                "brand": "BARILLA", 
                "standardized_name": "BARILLA Spaghetti No.5",
                "size": "500",
                "unit": "g",
                "price": 25500,
                "currency": "IDR",
                "category": "pasta_noodles",
                "confidence": 0.95
            },
            {
                "original_name": "INDOMIE Mi Goreng Rasa Ayam 85g",
                "brand": "INDOMIE",
                "standardized_name": "INDOMIE Mi Goreng Chicken Flavor",
                "size": "85",
                "unit": "g", 
                "price": 3200,
                "currency": "IDR",
                "category": "pasta_noodles",
                "confidence": 0.95
            }
        ],
        "metadata": {
            "document_type": "price_list",
            "language": "indonesian/english",
            "total_pages": 4,
            "notes": "–û–±—Ä–∞–∑–µ—Ü –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    sample_file = "sample_reference.json"
    with open(sample_file, 'w', encoding='utf-8') as f:
        json.dump(sample_reference, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {sample_file}")
    print("\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
    print(json.dumps(sample_reference, indent=2, ensure_ascii=False))
    
    print(f"\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print(f"1. –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Excel —Ñ–∞–π–ª")
    print(f"2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 create_training_example.py")
    print(f"3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç 2 –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JSON")

async def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    trainer = TrainingDataManager()
    
    while True:
        print("\nüß™ –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–ê –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•")
        print("=" * 50)
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
        print("3. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
        print("4. –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == '1':
            examples = trainer.get_training_examples_list()
            if not examples:
                print("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
                continue
            
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
            for i, example in enumerate(examples, 1):
                print(f"{i}. {example}")
            
            try:
                idx = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä (1-{len(examples)}): ")) - 1
                if 0 <= idx < len(examples):
                    await test_single_example(examples[idx], trainer)
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                
        elif choice == '2':
            await test_all_examples()
            
        elif choice == '3':
            examples = trainer.get_training_examples_list()
            if examples:
                print(f"\nüìö –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {len(examples)}")
                for i, example in enumerate(examples, 1):
                    print(f"{i}. {example}")
            else:
                print("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
                
        elif choice == '4':
            create_sample_reference()
            
        elif choice == '5':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    asyncio.run(main())