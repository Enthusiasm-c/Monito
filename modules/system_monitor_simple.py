#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–°–æ–≤–º–µ—Å—Ç–∏–º —Å ARM64 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π macOS
"""

import os
import json
import time
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path

logger = logging.getLogger(__name__)

class SimpleSystemMonitor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ psutil"""
    
    def __init__(self, stats_file: str = "data/system_stats.json"):
        self.stats_file = Path(stats_file)
        self.stats_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = self._load_stats()
        
    def _load_stats(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.stats_file.exists():
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return {
            'processing': {
                'total_files': 0,
                'successful_files': 0,
                'failed_files': 0,
                'excel_files': 0,
                'pdf_files': 0,
                'last_processed': None
            },
            'chatgpt': {
                'total_requests': 0,
                'successful_requests': 0,
                'failed_requests': 0,
                'total_tokens_used': 0,
                'last_request': None
            },
            'google_sheets': {
                'total_updates': 0,
                'successful_updates': 0,
                'failed_updates': 0,
                'products_added': 0,
                'last_update': None
            },
            'system': {
                'start_time': datetime.now().isoformat(),
                'uptime_seconds': 0,
                'last_restart': datetime.now().isoformat()
            }
        }
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def record_file_processing(self, file_type: str, success: bool, error: str = None):
        """–ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
        try:
            self.stats['processing']['total_files'] += 1
            
            if success:
                self.stats['processing']['successful_files'] += 1
            else:
                self.stats['processing']['failed_files'] += 1
            
            if file_type.lower() == 'excel':
                self.stats['processing']['excel_files'] += 1
            elif file_type.lower() == 'pdf':
                self.stats['processing']['pdf_files'] += 1
            
            self.stats['processing']['last_processed'] = datetime.now().isoformat()
            
            if error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_type}: {error}")
            
            self._save_stats()
            logger.info(f"üìä –ó–∞–ø–∏—Å–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_type} ({'—É—Å–ø–µ—Ö' if success else '–æ—à–∏–±–∫–∞'})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def record_chatgpt_request(self, success: bool, tokens_used: int = 0, error: str = None):
        """–ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT"""
        try:
            self.stats['chatgpt']['total_requests'] += 1
            
            if success:
                self.stats['chatgpt']['successful_requests'] += 1
                self.stats['chatgpt']['total_tokens_used'] += tokens_used
            else:
                self.stats['chatgpt']['failed_requests'] += 1
            
            self.stats['chatgpt']['last_request'] = datetime.now().isoformat()
            
            if error:
                logger.warning(f"–û—à–∏–±–∫–∞ ChatGPT –∑–∞–ø—Ä–æ—Å–∞: {error}")
            
            self._save_stats()
            logger.info(f"ü§ñ –ó–∞–ø–∏—Å–∞–Ω ChatGPT –∑–∞–ø—Ä–æ—Å: ({'—É—Å–ø–µ—Ö' if success else '–æ—à–∏–±–∫–∞'}), —Ç–æ–∫–µ–Ω–æ–≤: {tokens_used}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ChatGPT: {e}")
    
    def record_sheets_update(self, success: bool, products_count: int = 0, error: str = None):
        """–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets"""
        try:
            self.stats['google_sheets']['total_updates'] += 1
            
            if success:
                self.stats['google_sheets']['successful_updates'] += 1
                self.stats['google_sheets']['products_added'] += products_count
            else:
                self.stats['google_sheets']['failed_updates'] += 1
            
            self.stats['google_sheets']['last_update'] = datetime.now().isoformat()
            
            if error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {error}")
            
            self._save_stats()
            logger.info(f"üíæ –ó–∞–ø–∏—Å–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Sheets: ({'—É—Å–ø–µ—Ö' if success else '–æ—à–∏–±–∫–∞'}), —Ç–æ–≤–∞—Ä–æ–≤: {products_count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Sheets: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            if 'start_time' in self.stats['system']:
                start_time = datetime.fromisoformat(self.stats['system']['start_time'])
                uptime = (datetime.now() - start_time).total_seconds()
                self.stats['system']['uptime_seconds'] = int(uptime)
            
            return self.stats.copy()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def get_success_rates(self) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"""
        try:
            rates = {}
            
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
            total_files = self.stats['processing']['total_files']
            if total_files > 0:
                rates['file_processing'] = self.stats['processing']['successful_files'] / total_files
            else:
                rates['file_processing'] = 0.0
            
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å ChatGPT –∑–∞–ø—Ä–æ—Å–æ–≤
            total_chatgpt = self.stats['chatgpt']['total_requests']
            if total_chatgpt > 0:
                rates['chatgpt_requests'] = self.stats['chatgpt']['successful_requests'] / total_chatgpt
            else:
                rates['chatgpt_requests'] = 0.0
            
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Sheets
            total_sheets = self.stats['google_sheets']['total_updates']
            if total_sheets > 0:
                rates['sheets_updates'] = self.stats['google_sheets']['successful_updates'] / total_sheets
            else:
                rates['sheets_updates'] = 0.0
            
            return rates
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    
    def get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            import platform
            import sys
            
            return {
                'platform': platform.system(),
                'platform_version': platform.version(),
                'architecture': platform.machine(),
                'python_version': sys.version,
                'working_directory': os.getcwd(),
                'timestamp': datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
            return {}
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            self.stats = self._load_stats()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
            self.stats['system']['last_restart'] = datetime.now().isoformat()
            self._save_stats()
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_formatted_report(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            stats = self.get_stats()
            rates = self.get_success_rates()
            
            uptime_hours = stats['system']['uptime_seconds'] / 3600
            
            report = f"""
üìä –û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–ï –°–ò–°–¢–ï–ú–´
========================

üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:
‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['processing']['total_files']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats['processing']['successful_files']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['processing']['failed_files']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {rates.get('file_processing', 0):.1%}
‚Ä¢ Excel —Ñ–∞–π–ª–æ–≤: {stats['processing']['excel_files']}
‚Ä¢ PDF —Ñ–∞–π–ª–æ–≤: {stats['processing']['pdf_files']}

ü§ñ ChatGPT –∑–∞–ø—Ä–æ—Å—ã:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['chatgpt']['total_requests']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats['chatgpt']['successful_requests']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['chatgpt']['failed_requests']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {rates.get('chatgpt_requests', 0):.1%}
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['chatgpt']['total_tokens_used']}

üíæ Google Sheets:
‚Ä¢ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stats['google_sheets']['total_updates']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats['google_sheets']['successful_updates']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['google_sheets']['failed_updates']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {rates.get('sheets_updates', 0):.1%}
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stats['google_sheets']['products_added']}

‚è± –°–∏—Å—Ç–µ–º–∞:
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f} —á–∞—Å–æ–≤
‚Ä¢ –ó–∞–ø—É—â–µ–Ω–∞: {stats['system']['start_time'][:19]}
"""
            return report
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = SimpleSystemMonitor()

def record_file_processing(file_type: str, success: bool, error: str = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    monitor.record_file_processing(file_type, success, error)

def record_chatgpt_request(success: bool, tokens_used: int = 0, error: str = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ ChatGPT –∑–∞–ø—Ä–æ—Å–∞"""
    monitor.record_chatgpt_request(success, tokens_used, error)

def record_sheets_update(success: bool, products_count: int = 0, error: str = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Sheets"""
    monitor.record_sheets_update(success, products_count, error)

def get_stats():
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return monitor.get_stats()

def get_formatted_report():
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    return monitor.get_formatted_report()