#!/usr/bin/env python3
"""
MON-S03: Quota-Aware Concurrency Tests
–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–æ—Ç–∞–º–∏ –∏ –ª–∏–º–∏—Ç–∞–º–∏
"""

import time
import threading
import tempfile
from pathlib import Path
from typing import Dict, Any
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from modules.quota_manager import (
        QuotaManager, QuotaLimits, UserQuotaUsage, QuotaCheckResult,
        check_user_quota, reserve_user_quota, complete_user_task
    )
    from modules.adaptive_scaler import (
        AdaptiveScaler, SystemMonitor, SystemMetrics, ScalingRules,
        create_adaptive_quota_system
    )
    MODULES_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}")
    MODULES_AVAILABLE = False

def test_quota_limits_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–≤–æ—Ç"""
    
    print("üìã –¢–µ—Å—Ç basic quota limits...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã
    limits = QuotaLimits(
        max_files_per_hour=10,
        max_concurrent_tasks=2,
        max_file_size_mb=5.0
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
    limits_dict = limits.to_dict()
    limits_restored = QuotaLimits.from_dict(limits_dict)
    
    assert limits_restored.max_files_per_hour == 10
    assert limits_restored.max_concurrent_tasks == 2
    assert limits_restored.max_file_size_mb == 5.0
    
    print("  ‚úÖ QuotaLimits —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_user_quota_usage():
    """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–≤–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    print("üìã –¢–µ—Å—Ç user quota usage...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º usage
    usage = UserQuotaUsage(user_id="test_user")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    assert usage.files_processed_hour == 0
    assert usage.active_tasks == 0
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    usage.files_processed_hour = 5
    usage.active_tasks = 2
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å –æ–∫–æ–Ω
    usage.reset_hour_window()
    assert usage.files_processed_hour == 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
    usage_dict = usage.to_dict()
    usage_restored = UserQuotaUsage.from_dict(usage_dict)
    
    assert usage_restored.user_id == "test_user"
    assert usage_restored.active_tasks == 2
    
    print("  ‚úÖ UserQuotaUsage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_quota_manager_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ QuotaManager"""
    
    print("üìã –¢–µ—Å—Ç QuotaManager basic functionality...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    test_limits = QuotaLimits(
        max_files_per_hour=5,
        max_concurrent_tasks=2,
        max_file_size_mb=1.0,
        requests_per_minute=10
    )
    
    manager = QuotaManager(default_limits=test_limits)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    result = manager.check_quota("user1", file_size_mb=0.5)
    assert result.allowed == True
    assert result.user_id == "user1"
    
    # –¢–µ—Å—Ç 2: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    result = manager.check_quota("user1", file_size_mb=2.0)
    assert result.allowed == False
    assert "File size" in result.violation_reason
    
    # –¢–µ—Å—Ç 3: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç—ã
    assert manager.reserve_quota("user1", file_size_mb=0.5) == True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    usage = manager.get_user_usage("user1")
    assert usage.active_tasks == 1
    assert usage.requests_this_minute == 1
    
    # –¢–µ—Å—Ç 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    assert manager.complete_task("user1", success=True) == True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
    usage = manager.get_user_usage("user1")
    assert usage.active_tasks == 0
    assert usage.files_processed_hour == 1
    
    print("  ‚úÖ QuotaManager basic functionality —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_quota_manager_limits():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ QuotaManager"""
    
    print("üìã –¢–µ—Å—Ç QuotaManager limits enforcement...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∂–µ—Å—Ç–∫–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    strict_limits = QuotaLimits(
        max_files_per_hour=3,
        max_concurrent_tasks=1,
        requests_per_minute=5
    )
    
    manager = QuotaManager(default_limits=strict_limits)
    
    # –¢–µ—Å—Ç 1: –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏–º–∏—Ç concurrent tasks
    manager.reserve_quota("user1")
    result = manager.check_quota("user1")
    assert result.allowed == False
    assert "Concurrent tasks limit" in result.violation_reason
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–¥–∞—á—É
    manager.complete_task("user1", success=True)
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø–æ–ª–Ω—è–µ–º hourly limit
    for i in range(3):
        manager.reserve_quota("user1")
        manager.complete_task("user1", success=True)
    
    result = manager.check_quota("user1")
    assert result.allowed == False
    assert "Hourly limit exceeded" in result.violation_reason
    
    # –¢–µ—Å—Ç 3: Rate limiting
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º usage –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    manager.local_usage["user1"].files_processed_hour = 0
    
    for i in range(5):
        manager.reserve_quota("user1")
        manager.complete_task("user1", success=False)  # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º file count
    
    result = manager.check_quota("user1")
    assert result.allowed == False
    assert "Rate limit exceeded" in result.violation_reason
    
    print("  ‚úÖ QuotaManager limits enforcement —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_quota_manager_stats():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ QuotaManager"""
    
    print("üìã –¢–µ—Å—Ç QuotaManager statistics...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    manager = QuotaManager()
    
    # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in ["user1", "user2", "user3"]:
        manager.reserve_quota(user_id)
        manager.complete_task(user_id, success=True)
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = manager.get_quota_stats("user1")
    assert user_stats["user_id"] == "user1"
    assert "usage" in user_stats
    assert "limits" in user_stats
    assert "utilization" in user_stats
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º utilization —Ä–∞—Å—á–µ—Ç—ã
    utilization = user_stats["utilization"]
    assert "hourly_percent" in utilization
    assert "daily_percent" in utilization
    assert "concurrent_percent" in utilization
    
    # –¢–µ—Å—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    system_stats = manager.get_quota_stats()
    assert "system_stats" in system_stats
    assert "user_stats" in system_stats
    
    system_info = system_stats["system_stats"]
    assert system_info["total_users"] == 3
    assert system_info["total_active_tasks"] == 0  # –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    
    print("  ‚úÖ QuotaManager statistics —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_quota_manager_cleanup():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    
    print("üìã –¢–µ—Å—Ç QuotaManager cleanup...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    manager = QuotaManager()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    for user_id in ["old_user1", "old_user2"]:
        usage = manager.get_user_usage(user_id)
        usage.last_request_time = time.time() - 86400 * 2  # 2 –¥–Ω—è –Ω–∞–∑–∞–¥
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    manager.reserve_quota("new_user")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å
    assert len(manager.local_usage) == 3
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º cleanup
    cleaned = manager.cleanup_expired_usage(max_age_hours=24)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert cleaned == 2  # –£–¥–∞–ª–µ–Ω—ã 2 —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    assert len(manager.local_usage) == 1  # –û—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è
    assert "new_user" in manager.local_usage
    
    print("  ‚úÖ QuotaManager cleanup —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_system_metrics():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    
    print("üìã –¢–µ—Å—Ç SystemMetrics...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = SystemMetrics(
        cpu_percent=45.5,
        memory_percent=62.3,
        active_tasks=5,
        queue_size=10
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
    metrics_dict = metrics.to_dict()
    assert metrics_dict["cpu_percent"] == 45.5
    assert metrics_dict["memory_percent"] == 62.3
    assert metrics_dict["active_tasks"] == 5
    assert "timestamp" in metrics_dict
    
    print("  ‚úÖ SystemMetrics —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_system_monitor():
    """–¢–µ—Å—Ç SystemMonitor"""
    
    print("üìã –¢–µ—Å—Ç SystemMonitor...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    monitor = SystemMonitor(collection_interval=0.5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.start()
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
    time.sleep(1.5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è
    latest = monitor.get_latest_metrics()
    assert latest is not None
    assert latest.cpu_percent >= 0
    assert latest.memory_percent >= 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    average = monitor.get_average_metrics(window_minutes=1)
    assert average is not None
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.stop()
    
    print("  ‚úÖ SystemMonitor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_scaling_rules():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª —Å–∫–µ–π–ª–∏–Ω–≥–∞"""
    
    print("üìã –¢–µ—Å—Ç ScalingRules...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    rules = ScalingRules(
        cpu_scale_up_threshold=80.0,
        cpu_scale_down_threshold=20.0,
        scale_up_factor=2.0,
        scale_down_factor=0.5
    )
    
    assert rules.cpu_scale_up_threshold == 80.0
    assert rules.scale_up_factor == 2.0
    
    print("  ‚úÖ ScalingRules —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_adaptive_scaler_decision():
    """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π AdaptiveScaler"""
    
    print("üìã –¢–µ—Å—Ç AdaptiveScaler decision making...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    quota_manager = QuotaManager()
    monitor = SystemMonitor()
    scaler = AdaptiveScaler(quota_manager, monitor)
    
    # –¢–µ—Å—Ç 1: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU
    high_cpu_metrics = SystemMetrics(
        cpu_percent=85.0,  # –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
        memory_percent=60.0,
        queue_size=20,
        active_tasks=15
    )
    
    decision = scaler._make_scaling_decision(high_cpu_metrics)
    assert decision["action"] == "scale_up"
    assert "High CPU usage" in " ".join(decision["reasons"])
    
    # –¢–µ—Å—Ç 2: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    low_load_metrics = SystemMetrics(
        cpu_percent=15.0,   # –ù–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
        memory_percent=25.0, # –ù–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        queue_size=2,       # –ú–∞–ª–µ–Ω—å–∫–∞—è –æ—á–µ—Ä–µ–¥—å
        active_tasks=1
    )
    
    decision = scaler._make_scaling_decision(low_load_metrics)
    assert decision["action"] == "scale_down"
    
    # –¢–µ—Å—Ç 3: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    normal_metrics = SystemMetrics(
        cpu_percent=50.0,
        memory_percent=55.0,
        queue_size=10,
        active_tasks=5
    )
    
    decision = scaler._make_scaling_decision(normal_metrics)
    assert decision["action"] == "none"
    
    print("  ‚úÖ AdaptiveScaler decision making —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_convenience_functions():
    """–¢–µ—Å—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    print("üìã –¢–µ—Å—Ç convenience functions...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –¢–µ—Å—Ç check_user_quota
    result = check_user_quota("test_user", file_size_mb=1.0)
    assert isinstance(result, QuotaCheckResult)
    assert result.user_id == "test_user"
    
    # –¢–µ—Å—Ç reserve_user_quota
    success = reserve_user_quota("test_user", file_size_mb=1.0)
    assert success == True
    
    # –¢–µ—Å—Ç complete_user_task
    success = complete_user_task("test_user", success=True)
    assert success == True
    
    print("  ‚úÖ Convenience functions —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_integration_scenario():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    
    print("üìã –¢–µ—Å—Ç integration scenario...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    quota_manager, adaptive_scaler = create_adaptive_quota_system()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å
    assert quota_manager is not None
    assert adaptive_scaler is not None
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
    users = ["user1", "user2", "user3"]
    
    for user_id in users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É
        result = quota_manager.check_quota(user_id, file_size_mb=1.0)
        if result.allowed:
            # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º
            quota_manager.reserve_quota(user_id, file_size_mb=1.0)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            time.sleep(0.1)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º
            quota_manager.complete_task(user_id, success=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = quota_manager.get_quota_stats()
    assert stats["system_stats"]["total_users"] == 3
    
    print("  ‚úÖ Integration scenario —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_concurrent_access():
    """–¢–µ—Å—Ç concurrent –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–≤–æ—Ç–∞–º"""
    
    print("üìã –¢–µ—Å—Ç concurrent access...")
    
    if not MODULES_AVAILABLE:
        print("  ‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    limits = QuotaLimits(max_concurrent_tasks=2)
    manager = QuotaManager(default_limits=limits)
    
    results = []
    errors = []
    
    def worker(user_id, worker_id):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –∫–≤–æ—Ç—É
            result = manager.check_quota(user_id)
            if result.allowed:
                manager.reserve_quota(user_id)
                time.sleep(0.1)  # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
                manager.complete_task(user_id, success=True)
                results.append(f"worker_{worker_id}_success")
            else:
                results.append(f"worker_{worker_id}_blocked")
        except Exception as e:
            errors.append(str(e))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    threads = []
    for i in range(5):
        thread = threading.Thread(target=worker, args=("user1", i))
        threads.append(thread)
        thread.start()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        thread.join()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert len(errors) == 0, f"–û—à–∏–±–∫–∏ –≤ concurrent access: {errors}"
    assert len(results) == 5
    
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    # (—ç—Ç–æ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ –∏–∑-–∑–∞ timing, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)
    
    print("  ‚úÖ Concurrent access —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def run_mon_s03_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ MON-S03"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ MON-S03 Quota-Aware Concurrency Tests")
    print("=" * 60)
    
    tests = [
        test_quota_limits_basic,
        test_user_quota_usage,
        test_quota_manager_basic,
        test_quota_manager_limits,
        test_quota_manager_stats,
        test_quota_manager_cleanup,
        test_system_metrics,
        test_system_monitor,
        test_scaling_rules,
        test_adaptive_scaler_decision,
        test_convenience_functions,
        test_integration_scenario,
        test_concurrent_access
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}")
            failed += 1
    
    total = len(tests)
    success_rate = (passed / total) * 100
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ MON-S03 QUOTA-AWARE TESTS")
    print("=" * 50)
    print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DoD –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    print(f"\nüìã Definition of Done –¥–ª—è MON-S03:")
    
    dod_criteria = [
        ("User quota limits", success_rate >= 85),
        ("Rate limiting", success_rate >= 85),
        ("Concurrent task management", success_rate >= 85),
        ("Adaptive scaling", success_rate >= 85),
        ("System monitoring", success_rate >= 85),
        ("Thread safety", success_rate >= 85)
    ]
    
    dod_passed = 0
    for criterion, status in dod_criteria:
        if status:
            print(f"  ‚úÖ {criterion}")
            dod_passed += 1
        else:
            print(f"  ‚ùå {criterion}")
    
    dod_success_rate = (dod_passed / len(dod_criteria)) * 100
    print(f"\nüéØ DoD Success Rate: {dod_success_rate:.1f}%")
    
    if success_rate >= 85 and dod_success_rate >= 83:
        print(f"\nüéâ MON-S03 –≥–æ—Ç–æ–≤ –∫ production!")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ quota-aware concurrency –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        print(f"üöÄ –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è - –î–û–°–¢–ò–ì–ù–£–¢–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è MON-S03 —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

if __name__ == "__main__":
    success = run_mon_s03_tests()
    exit(0 if success else 1) 