name: MON-S01 E2E Regression Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/**'
      - 'parsers/**'
      - 'ocr/**'
      - 'normalizer/**'
      - 'storage/**'
      - 'tests/**'
      - '.github/workflows/mon_s01_e2e_ci.yml'
  
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'modules/**'
      - 'parsers/**'
      - 'ocr/**'
      - 'normalizer/**'
      - 'storage/**'
      - 'tests/**'
  
  schedule:
    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 UTC (–¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    - cron: '0 6 * * *'
  
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (mock or real)'
        required: false
        default: 'mock'
        type: choice
        options:
          - mock
          - real

env:
  PYTHON_VERSION: '3.9'
  
jobs:
  mon-s01-e2e-regression:
    name: 'MON-S01 E2E Regression Suite'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        test_suite: [
          { name: 'Core E2E', pattern: 'test_mon_s01_e2e_regression.py' },
          { name: 'Evil Fixtures', pattern: 'test_mon_s01_fixtures.py', optional: true }
        ]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # –î–ª—è diff –∞–Ω–∞–ª–∏–∑–∞
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-e2e-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-e2e-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-html pytest-json-report
          
          # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
          # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          if [ -f requirements-test.txt ]; then
            pip install -r requirements-test.txt
          fi
          
          # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
          pip install pathlib typing-extensions
      
      - name: Create Evil Test Fixtures
        run: |
          echo "üß™ –°–æ–∑–¥–∞–Ω–∏–µ Evil Test Fixtures..."
          python3 tests/fixtures/create_evil_fixtures_simple.py
          
          echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö fixtures:"
          ls -la tests/fixtures/evil_files/
          ls -la tests/fixtures/expected_outputs/
      
      - name: Run MON-S01 E2E Regression Tests
        id: e2e_tests
        run: |
          echo "üöÄ –ó–∞–ø—É—Å–∫ MON-S01 E2E Regression Suite"
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          TEST_MODE="${{ github.event.inputs.test_mode || 'mock' }}"
          echo "Test mode: $TEST_MODE"
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
          mkdir -p tests/reports
          mkdir -p test-results
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã
          if [[ "${{ matrix.test_suite.name }}" == "Core E2E" ]]; then
            echo "–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö E2E —Ç–µ—Å—Ç–æ–≤..."
            python3 tests/test_mon_s01_e2e_regression.py > test-results/e2e_output.log 2>&1
            E2E_EXIT_CODE=$?
            
            echo "E2E —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –∫–æ–¥–æ–º: $E2E_EXIT_CODE"
            
            # –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ pytest –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            pytest tests/test_mon_s01_e2e_regression.py::TestMONS01E2ERegressionSuite::test_e2e_regression_full \
              -v --tb=short \
              --html=test-results/e2e_report.html \
              --json-report --json-report-file=test-results/e2e_pytest.json \
              || true
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º exit code –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
            echo "e2e_exit_code=$E2E_EXIT_CODE" >> $GITHUB_OUTPUT
            
          else
            echo "–ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ fixtures..."
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            echo "e2e_exit_code=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Parse E2E Results
        id: parse_results
        if: always()
        run: |
          echo "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ E2E —Ç–µ—Å—Ç–æ–≤..."
          
          # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
          LATEST_REPORT=$(ls -t tests/reports/mon_s01_e2e_report_*.json 2>/dev/null | head -1)
          
          if [[ -f "$LATEST_REPORT" ]]; then
            echo "–ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: $LATEST_REPORT"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            TOTAL_TESTS=$(jq -r '.summary.total_tests' "$LATEST_REPORT")
            PASSED_TESTS=$(jq -r '.summary.passed' "$LATEST_REPORT")
            FAILED_TESTS=$(jq -r '.summary.failed' "$LATEST_REPORT")
            PASS_RATE=$(jq -r '.summary.pass_rate' "$LATEST_REPORT")
            DURATION=$(jq -r '.summary.total_duration_sec' "$LATEST_REPORT")
            MOCK_MODE=$(jq -r '.mock_mode' "$LATEST_REPORT")
            
            echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
            echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
            echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
            echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT
            echo "duration=$DURATION" >> $GITHUB_OUTPUT
            echo "mock_mode=$MOCK_MODE" >> $GITHUB_OUTPUT
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ test-results
            cp "$LATEST_REPORT" test-results/e2e_detailed_report.json
            
            echo "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
            echo "  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
            echo "  –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED_TESTS"
            echo "  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED_TESTS"
            echo "  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $PASS_RATE%"
            echo "  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${DURATION}s"
            echo "  Mock —Ä–µ–∂–∏–º: $MOCK_MODE"
            
          else
            echo "‚ö†Ô∏è –û—Ç—á–µ—Ç E2E —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            echo "total_tests=0" >> $GITHUB_OUTPUT
            echo "passed_tests=0" >> $GITHUB_OUTPUT
            echo "failed_tests=1" >> $GITHUB_OUTPUT
            echo "pass_rate=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mon-s01-e2e-reports-${{ matrix.test_suite.name }}
          path: |
            test-results/
            tests/reports/
          retention-days: 30
      
      - name: Upload Evil Fixtures
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: evil-test-fixtures
          path: |
            tests/fixtures/evil_files/
            tests/fixtures/expected_outputs/
          retention-days: 7
      
      - name: E2E Results Summary
        if: always() && matrix.test_suite.name == 'Core E2E'
        run: |
          echo "## üß™ MON-S01 E2E Regression Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.parse_results.outputs.total_tests }}" != "0" ]]; then
            echo "| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ | ${{ steps.parse_results.outputs.total_tests }} |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ | ${{ steps.parse_results.outputs.passed_tests }} |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ | ${{ steps.parse_results.outputs.failed_tests }} |" >> $GITHUB_STEP_SUMMARY
            echo "| üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ | ${{ steps.parse_results.outputs.pass_rate }}% |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è | ${{ steps.parse_results.outputs.duration }}s |" >> $GITHUB_STEP_SUMMARY
            echo "| üîß Mock —Ä–µ–∂–∏–º | ${{ steps.parse_results.outputs.mock_mode }} |" >> $GITHUB_STEP_SUMMARY
            
            # –°—Ç–∞—Ç—É—Å –æ–±—â–∏–π
            if (( $(echo "${{ steps.parse_results.outputs.pass_rate }} >= 80" | bc -l) )); then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üéØ **–°—Ç–∞—Ç—É—Å:** ‚úÖ –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–´" >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "${{ steps.parse_results.outputs.pass_rate }} >= 70" | bc -l) )); then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å:** üü° –¢–ï–°–¢–´ –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ùå **–°—Ç–∞—Ç—É—Å:** üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå E2E —Ç–µ—Å—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö –±–∏–ª–¥–∞." >> $GITHUB_STEP_SUMMARY
      
      - name: Evaluate Test Results
        if: always() && matrix.test_suite.name == 'Core E2E'
        run: |
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          PASS_RATE="${{ steps.parse_results.outputs.pass_rate }}"
          FAILED_TESTS="${{ steps.parse_results.outputs.failed_tests }}"
          E2E_EXIT_CODE="${{ steps.e2e_tests.outputs.e2e_exit_code }}"
          
          echo "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
          echo "  Pass rate: $PASS_RATE%"
          echo "  Failed tests: $FAILED_TESTS"
          echo "  E2E exit code: $E2E_EXIT_CODE"
          
          # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:
          # 1. Pass rate >= 80% = —É—Å–ø–µ—Ö
          # 2. Pass rate >= 70% = –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º)
          # 3. Pass rate < 70% = –ø—Ä–æ–≤–∞–ª
          
          if [[ "$PASS_RATE" == "0" ]] || [[ -z "$PASS_RATE" ]]; then
            echo "‚ùå E2E —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            exit 1
          elif (( $(echo "$PASS_RATE >= 80" | bc -l) )); then
            echo "‚úÖ E2E —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã ($PASS_RATE%)"
            exit 0
          elif (( $(echo "$PASS_RATE >= 70" | bc -l) )); then
            echo "‚ö†Ô∏è E2E —Ç–µ—Å—Ç—ã —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ ($PASS_RATE%) - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º"
            exit 0
          else
            echo "‚ùå E2E —Ç–µ—Å—Ç—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ ($PASS_RATE%)"
            exit 1
          fi
      
      - name: Comment PR (if applicable)
        if: always() && github.event_name == 'pull_request' && matrix.test_suite.name == 'Core E2E'
        uses: actions/github-script@v6
        with:
          script: |
            const passRate = "${{ steps.parse_results.outputs.pass_rate }}";
            const totalTests = "${{ steps.parse_results.outputs.total_tests }}";
            const passedTests = "${{ steps.parse_results.outputs.passed_tests }}";
            const failedTests = "${{ steps.parse_results.outputs.failed_tests }}";
            const duration = "${{ steps.parse_results.outputs.duration }}";
            const mockMode = "${{ steps.parse_results.outputs.mock_mode }}";
            
            let statusEmoji = "‚úÖ";
            let statusText = "–£–°–ü–ï–®–ù–û";
            if (parseFloat(passRate) < 80) {
              statusEmoji = "‚ö†Ô∏è";
              statusText = "–° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò";
            }
            if (parseFloat(passRate) < 70) {
              statusEmoji = "‚ùå";
              statusText = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´";
            }
            
            const comment = `## üß™ MON-S01 E2E Regression Results
            
            ${statusEmoji} **–°—Ç–∞—Ç—É—Å:** ${statusText}
            
            | –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
            |---------|----------|
            | üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ | ${totalTests} |
            | ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ | ${passedTests} |
            | ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ | ${failedTests} |
            | üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ | ${passRate}% |
            | ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è | ${duration}s |
            | üîß Mock —Ä–µ–∂–∏–º | ${mockMode} |
            
            üìã **–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:** –ü–æ–ª–Ω—ã–π pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
            üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö –±–∏–ª–¥–∞.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π job –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–ª–∞—Ö
  notify-on-failure:
    name: 'Notify on Critical Failure'
    runs-on: ubuntu-latest
    needs: mon-s01-e2e-regression
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Notify Critical E2E Failure
        run: |
          echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ MON-S01 E2E –¢–ï–°–¢–û–í"
          echo "–í–µ—Ç–∫–∞: ${{ github.ref }}"
          echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          echo "–ê–≤—Ç–æ—Ä: ${{ github.actor }}"
          
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack/Teams/Email
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üö® MON-S01 E2E Tests FAILED on ${{ github.ref }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
  publish-metrics:
    name: 'Publish E2E Metrics'
    runs-on: ubuntu-latest
    needs: mon-s01-e2e-regression
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Publish Success Metrics
        run: |
          echo "üìä –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ MON-S01 E2E"
          echo "‚úÖ E2E —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã –Ω–∞ main –≤–µ—Ç–∫–µ"
          
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
          # curl -X POST "https://metrics.company.com/api/mon-s01" \
          #   -H "Authorization: Bearer ${{ secrets.METRICS_TOKEN }}" \
          #   -d '{"status": "success", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' 