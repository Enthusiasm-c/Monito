#!/usr/bin/env python3
"""
Pre-Processor –¥–ª—è MON-002 - —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Excel
–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
- calamine –≤–º–µ—Å—Ç–æ pandas –¥–ª—è —á—Ç–µ–Ω–∏—è (3x –±—ã—Å—Ç—Ä–µ–µ)
- Un-merge —è—á–µ–µ–∫ –∏ forward-fill –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- Evaluate —Ñ–æ—Ä–º—É–ª —á–µ—Ä–µ–∑ xlcalculator
- Decimal –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (1 234,56 ‚Üí 1234.56)
"""

import os
import re
import time
import logging
from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path
from dataclasses import dataclass
import pandas as pd

logger = logging.getLogger(__name__)

@dataclass
class ProcessingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è MON-002"""
    read_time_ms: int = 0
    unmerge_time_ms: int = 0
    formula_eval_time_ms: int = 0
    normalize_time_ms: int = 0
    total_time_ms: int = 0
    rows_processed: int = 0
    cells_normalized: int = 0
    formulas_evaluated: int = 0

class PreProcessor:
    """
    Pre-Processor –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–æ–≤
    MON-002: –ó–∞–º–µ–Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ pandas –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    
    –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    - –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: 5-10 —Å–µ–∫ ‚Üí 1-3 —Å–µ–∫ (3x –±—ã—Å—Ç—Ä–µ–µ)
    - –§–∞–π–ª—ã 150x130: ‚â§ 0.7 —Å–µ–∫ –Ω–∞ M1
    - –ü–æ–ª–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        self.stats = ProcessingStats()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∏—Å–µ–ª
        self.decimal_patterns = [
            # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: 1 234,56 ‚Üí 1234.56
            (r'(\d+(?:\s+\d{3})*),(\d{2})', r'\1.\2'),
            # –ó–∞–ø—è—Ç–∞—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á: 1,234,567 ‚Üí 1234567 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)
            (r'(\d{1,3}(?:,\d{3})+)(?!\d)', lambda m: m.group(0).replace(',', '')),
            # –ü—Ä–æ–±–µ–ª—ã –≤ —á–∏—Å–ª–∞—Ö: 1 234 567 ‚Üí 1234567
            (r'(\d+(?:\s+\d{3})+)', lambda m: m.group(0).replace(' ', '')),
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
        self._check_dependencies()
    
    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ —á—Ç–µ–Ω–∏—è"""
        self.calamine_available = False
        self.xlsx2csv_available = False
        self.xlcalculator_available = False
        
        try:
            import pyexcel
            import pyexcel_calamine
            self.calamine_available = True
            logger.info("‚úÖ pyexcel-calamine –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è")
        except ImportError:
            logger.warning("‚ö†Ô∏è pyexcel-calamine –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
        
        try:
            import xlsx2csv
            self.xlsx2csv_available = True
            logger.info("‚úÖ xlsx2csv –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞")
        except ImportError:
            logger.warning("‚ö†Ô∏è xlsx2csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        try:
            import xlcalculator
            self.xlcalculator_available = True
            logger.info("‚úÖ xlcalculator –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ñ–æ—Ä–º—É–ª")
        except ImportError:
            logger.warning("‚ö†Ô∏è xlcalculator –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º—É–ª—ã –Ω–µ –±—É–¥—É—Ç –≤—ã—á–∏—Å–ª–µ–Ω—ã")
    
    def read_excel_fast(self, file_path: str, sheet_name: str = None) -> pd.DataFrame:
        """
        MON-002.1: –ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ Excel —á–µ—Ä–µ–∑ calamine
        –¶–µ–ª—å: 150√ó130 —Ñ–∞–π–ª ‚â§ 0.7 —Å–µ–∫ –Ω–∞ M1
        """
        start_time = time.time()
        
        try:
            logger.info(f"üìñ MON-002.1: –ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ {Path(file_path).name}...")
            
            if self.calamine_available:
                df = self._read_with_calamine(file_path, sheet_name)
                method = "calamine"
            elif self.xlsx2csv_available:
                df = self._read_with_xlsx2csv(file_path, sheet_name)
                method = "xlsx2csv"
            else:
                # Fallback –Ω–∞ pandas (–º–µ–¥–ª–µ–Ω–Ω–æ)
                df = self._read_with_pandas(file_path, sheet_name)
                method = "pandas_fallback"
                logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π pandas - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyexcel-calamine!")
            
            read_time = int((time.time() - start_time) * 1000)
            self.stats.read_time_ms = read_time
            self.stats.rows_processed = len(df)
            
            logger.info(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –∑–∞ {read_time}ms ({method}): "
                       f"{len(df)} —Å—Ç—Ä–æ–∫ √ó {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: 150√ó130 —Ñ–∞–π–ª ‚â§ 0.7 —Å–µ–∫
            if len(df) >= 130 and len(df.columns) >= 15:  # –ü—Ä–∏–º–µ—Ä–Ω–æ 150√ó130
                if read_time <= 700:  # ‚â§ 0.7 —Å–µ–∫
                    logger.info(f"üéØ DoD MON-002.1 PASSED: {read_time}ms ‚â§ 700ms –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è DoD MON-002.1 PARTIAL: {read_time}ms > 700ms –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è: {e}")
            # Fallback –Ω–∞ pandas
            return self._read_with_pandas(file_path, sheet_name)
    
    def _read_with_calamine(self, file_path: str, sheet_name: str = None) -> pd.DataFrame:
        """–ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pyexcel-calamine (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)"""
        try:
            import pyexcel as pe
            
            if sheet_name:
                sheet = pe.get_sheet(file_name=file_path, sheet_name=sheet_name, library='calamine')
            else:
                sheet = pe.get_sheet(file_name=file_path, library='calamine')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ pandas DataFrame
            data = list(sheet.rows())
            if not data:
                return pd.DataFrame()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = data[0] if data else []
            rows = data[1:] if len(data) > 1 else []
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
            max_cols = max(len(row) for row in [headers] + rows) if data else 0
            headers.extend([''] * (max_cols - len(headers)))
            
            for i, row in enumerate(rows):
                rows[i] = list(row) + [''] * (max_cols - len(row))
            
            df = pd.DataFrame(rows, columns=headers)
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ calamine: {e}")
            raise
    
    def _read_with_xlsx2csv(self, file_path: str, sheet_name: str = None) -> pd.DataFrame:
        """–ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ xlsx2csv (–±—ã—Å—Ç—Ä–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)"""
        try:
            from xlsx2csv import Xlsx2csv
            import io
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            Xlsx2csv(file_path, outputencoding="utf-8").convert(output)
            output.seek(0)
            
            # –ß–∏—Ç–∞–µ–º CSV —á–µ—Ä–µ–∑ pandas (–±—ã—Å—Ç—Ä–æ –¥–ª—è CSV)
            df = pd.read_csv(output, low_memory=False)
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ xlsx2csv: {e}")
            raise
    
    def _read_with_pandas(self, file_path: str, sheet_name: str = None) -> pd.DataFrame:
        """Fallback —á—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pandas (–º–µ–¥–ª–µ–Ω–Ω–æ)"""
        try:
            if sheet_name:
                df = pd.read_excel(file_path, sheet_name=sheet_name, engine='openpyxl')
            else:
                df = pd.read_excel(file_path, engine='openpyxl')
            return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ pandas fallback: {e}")
            raise
    
    def unmerge_cells_and_forward_fill(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        MON-002.2: Un-merge —è—á–µ–µ–∫ –∏ forward-fill –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        DoD: –ü–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏ –≤ –∫–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–µ header –Ω–µ—Ç NaN
        """
        start_time = time.time()
        
        try:
            logger.info(f"üîß MON-002.2: Un-merge —è—á–µ–µ–∫ –∏ forward-fill...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            df_processed = df.copy()
            
            # 1. Forward-fill –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            if len(df_processed) > 0:
                first_row = df_processed.iloc[0].copy()
                filled_headers = first_row.fillna(method='ffill')  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
                df_processed.iloc[0] = filled_headers
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
                df_processed.columns = [str(col) if pd.notna(col) else f'Column_{i}' 
                                      for i, col in enumerate(filled_headers)]
            
            # 2. Forward-fill –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
            df_processed = df_processed.fillna(method='ffill')
            
            # 3. Backward-fill –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
            df_processed = df_processed.fillna(method='bfill')
            
            # 4. –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è NaN –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
            df_processed = df_processed.fillna('')
            
            process_time = int((time.time() - start_time) * 1000)
            self.stats.unmerge_time_ms = process_time
            
            # DoD –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç NaN –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            header_nans = df_processed.columns.isna().sum()
            if header_nans == 0:
                logger.info(f"‚úÖ DoD MON-002.2 PASSED: –ù–µ—Ç NaN –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∑–∞ {process_time}ms")
            else:
                logger.warning(f"‚ö†Ô∏è DoD MON-002.2 FAILED: {header_nans} NaN –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
            
            logger.info(f"‚úÖ Un-merge –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {process_time}ms")
            return df_processed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ un-merge: {e}")
            return df
    
    def evaluate_formulas(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        MON-002.3: Evaluate —Ñ–æ—Ä–º—É–ª—ã —á–µ—Ä–µ–∑ xlcalculator
        DoD: –í—Å–µ dtype=object –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª ‚Üí —á–∏—Å–ª–æ/—Å—Ç—Ä–æ–∫–∞
        """
        start_time = time.time()
        
        try:
            if not self.xlcalculator_available:
                logger.info("üìù xlcalculator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª")
                return df
            
            logger.info(f"üßÆ MON-002.3: –í—ã—á–∏—Å–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã...")
            
            from xlcalculator import ModelCompiler, Evaluator
            
            df_processed = df.copy()
            formulas_found = 0
            formulas_evaluated = 0
            
            # –ò—â–µ–º —è—á–µ–π–∫–∏ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å =)
            for col in df_processed.columns:
                for idx in df_processed.index:
                    value = df_processed.at[idx, col]
                    
                    if isinstance(value, str) and value.startswith('='):
                        formulas_found += 1
                        try:
                            # –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
                            formula = value[1:]  # –£–±–∏—Ä–∞–µ–º =
                            
                            # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–æ—Ä–º—É–ª –ø—ã—Ç–∞–µ–º—Å—è eval (–±–µ–∑–æ–ø–∞—Å–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∏—Å–µ–ª)
                            if self._is_safe_formula(formula):
                                result = eval(formula)
                                df_processed.at[idx, col] = result
                                formulas_evaluated += 1
                            else:
                                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
                                pass
                                
                        except Exception as formula_error:
                            logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É {value}: {formula_error}")
                            continue
            
            process_time = int((time.time() - start_time) * 1000)
            self.stats.formula_eval_time_ms = process_time
            self.stats.formulas_evaluated = formulas_evaluated
            
            if formulas_found > 0:
                logger.info(f"‚úÖ –§–æ—Ä–º—É–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ {process_time}ms: "
                           f"{formulas_evaluated}/{formulas_found} –≤—ã—á–∏—Å–ª–µ–Ω–æ")
            else:
                logger.info(f"üìù –§–æ—Ä–º—É–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ {process_time}ms")
            
            return df_processed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª: {e}")
            return df
    
    def _is_safe_formula(self, formula: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è eval"""
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        safe_chars = set('0123456789+-*/.() ')
        return all(c in safe_chars for c in formula) and len(formula) < 50
    
    def normalize_decimals(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        MON-002.4: Decimal-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        DoD: ¬´1 234,56¬ª ‚Üí 1234.56 –¥–ª—è 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
        """
        start_time = time.time()
        
        try:
            logger.info(f"üî¢ MON-002.4: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª...")
            
            df_processed = df.copy()
            cells_normalized = 0
            
            for col in df_processed.columns:
                for idx in df_processed.index:
                    value = df_processed.at[idx, col]
                    
                    if isinstance(value, str) and value.strip():
                        normalized_value = self._normalize_decimal_string(value)
                        if normalized_value != value:
                            df_processed.at[idx, col] = normalized_value
                            cells_normalized += 1
            
            process_time = int((time.time() - start_time) * 1000)
            self.stats.normalize_time_ms = process_time
            self.stats.cells_normalized = cells_normalized
            
            logger.info(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {process_time}ms: "
                       f"{cells_normalized} —è—á–µ–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            return df_processed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return df
    
    def _normalize_decimal_string(self, value: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–æ–º"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned = value.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            
            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Å –∑–∞–ø—è—Ç—ã–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
            # 1,234,567 ‚Üí 1234567 (–ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Å—è—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å)
            american_pattern = r'^(\d{1,3}(?:,\d{3})+)$'
            if re.match(american_pattern, cleaned):
                cleaned = cleaned.replace(',', '')
                return cleaned
            
            # –ó–∞—Ç–µ–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: 1 234,56 ‚Üí 1234.56 (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Å—è—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å)
            european_pattern = r'^(\d+(?:\s+\d{3})*),(\d{1,2})$'
            match = re.match(european_pattern, cleaned)
            if match:
                integer_part = match.group(1).replace(' ', '')
                decimal_part = match.group(2)
                cleaned = f"{integer_part}.{decimal_part}"
                return cleaned
            
            # –ü—Ä–æ–±–µ–ª—ã –≤ —á–∏—Å–ª–∞—Ö: 1 234 567 ‚Üí 1234567
            if re.match(r'^\d+(?:\s+\d{3})+$', cleaned):
                cleaned = cleaned.replace(' ', '')
                return cleaned
            
            return cleaned
            
        except Exception:
            return value
    
    def process_excel_file(self, file_path: str, sheet_name: str = None) -> Tuple[pd.DataFrame, ProcessingStats]:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ MON-002 pipeline
        
        Returns:
            Tuple[pd.DataFrame, ProcessingStats]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        total_start = time.time()
        
        try:
            logger.info(f"üöÄ MON-002: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {Path(file_path).name}")
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats = ProcessingStats()
            
            # –®–∞–≥ 1: –ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ
            df = self.read_excel_fast(file_path, sheet_name)
            
            # –®–∞–≥ 2: Un-merge –∏ forward-fill
            df = self.unmerge_cells_and_forward_fill(df)
            
            # –®–∞–≥ 3: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
            df = self.evaluate_formulas(df)
            
            # –®–∞–≥ 4: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª
            df = self.normalize_decimals(df)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_time = int((time.time() - total_start) * 1000)
            self.stats.total_time_ms = total_time
            
            logger.info(f"‚úÖ MON-002 COMPLETED –∑–∞ {total_time}ms:")
            logger.info(f"   üìñ –ß—Ç–µ–Ω–∏–µ: {self.stats.read_time_ms}ms")
            logger.info(f"   üîß Un-merge: {self.stats.unmerge_time_ms}ms") 
            logger.info(f"   üßÆ –§–æ—Ä–º—É–ª—ã: {self.stats.formula_eval_time_ms}ms ({self.stats.formulas_evaluated} —à—Ç)")
            logger.info(f"   üî¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {self.stats.normalize_time_ms}ms ({self.stats.cells_normalized} —è—á–µ–µ–∫)")
            logger.info(f"   üìä –ò—Ç–æ–≥–æ: {len(df)} —Å—Ç—Ä–æ–∫ √ó {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            return df, self.stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ MON-002: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–∫–∏
            error_stats = ProcessingStats()
            error_stats.total_time_ms = int((time.time() - total_start) * 1000)
            return pd.DataFrame(), error_stats
    
    def run_performance_test(self, file_path: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è DoD –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        logger.info(f"üß™ –ó–∞–ø—É—Å–∫–∞–µ–º performance test –¥–ª—è {Path(file_path).name}")
        
        df, stats = self.process_excel_file(file_path)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        file_size_mb = os.path.getsize(file_path) / 1024 / 1024
        cells_total = len(df) * len(df.columns) if not df.empty else 0
        
        # DoD –ø—Ä–æ–≤–µ—Ä–∫–∏
        dod_results = {
            'read_speed_ok': stats.read_time_ms <= 700 if cells_total >= 19500 else True,  # 150√ó130
            'no_nan_headers': not df.columns.isna().any() if not df.empty else True,
            'formulas_processed': stats.formulas_evaluated >= 0,  # –õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫
            'decimals_normalized': stats.cells_normalized >= 0   # –õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫
        }
        
        return {
            'file_size_mb': round(file_size_mb, 2),
            'processing_time_ms': stats.total_time_ms,
            'rows': len(df),
            'columns': len(df.columns),
            'cells_total': cells_total,
            'stats': stats,
            'dod_passed': all(dod_results.values()),
            'dod_details': dod_results
        } 