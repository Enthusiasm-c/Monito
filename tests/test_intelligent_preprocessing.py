#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ pre-processor –¥–ª—è 100% –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤
"""

import sys
from pathlib import Path
import time
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –≤ path
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def test_intelligent_preprocessing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π pre-processor –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    
    print('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û PRE-PROCESSOR')
    print('=' * 80)
    print('üéØ –¶–µ–ª—å: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100% —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏')
    print()
    
    try:
        from modules.intelligent_preprocessor import IntelligentPreProcessor
        
        processor = IntelligentPreProcessor()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
        test_files = [
            'LIST HARGA UD RAHAYU.xlsx',
            'DOC-20250428-WA0004..xlsx'
        ]
        
        all_results = []
        
        for file_path in test_files:
            if Path(file_path).exists():
                print(f'üìä –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú: {file_path}')
                print('-' * 60)
                
                start_time = time.time()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                result = processor.process_excel_intelligent(file_path)
                
                process_time = time.time() - start_time
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                analyze_processing_results(result, process_time)
                
                all_results.append(result)
                
                print()
            else:
                print(f'‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if len(all_results) >= 2:
            compare_processing_results(all_results)
        
        return all_results
        
    except ImportError as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}')
        return []
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
        return []

def analyze_processing_results(result: dict, process_time: float):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    if 'error' in result:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result["error"]}')
        return
    
    recovery_stats = result['recovery_stats']
    total_products = len(result['total_products'])
    total_prices = len(result['total_prices'])
    linked_pairs = len(result.get('product_price_pairs', []))
    
    print(f'‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {process_time:.3f}s')
    print(f'üîß –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.get("processing_strategy", "unknown")}')
    print(f'üìã –õ–∏—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result["sheets_processed"])}')
    
    print(f'\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:')
    print(f'  üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_products}')
    print(f'  üí∞ –¶–µ–Ω –Ω–∞–π–¥–µ–Ω–æ: {total_prices}')
    print(f'  üîó –°–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä: {linked_pairs}')
    
    print(f'\nüõ†Ô∏è  –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:')
    print(f'  ‚≠ê –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {recovery_stats["filled_gaps"]}')
    print(f'  üí∞ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {recovery_stats["recovered_prices"]}')
    print(f'  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {recovery_stats["structure_fixes"]}')
    print(f'  üìà –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {recovery_stats["data_completeness"]:.1f}%')
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –ª–∏—Å—Ç–∞–º
    print(f'\nüìã –ê–ù–ê–õ–ò–ó –ü–û –õ–ò–°–¢–ê–ú:')
    for sheet in result['sheets_processed']:
        print(f'  üìÑ {sheet["sheet_name"]}:')
        print(f'    ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {sheet["strategy_used"]}')
        print(f'    ‚Ä¢ –†–∞–∑–º–µ—Ä: {sheet["original_dimensions"][0]}x{sheet["original_dimensions"][1]}')
        print(f'    ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(sheet["products"])}')
        print(f'    ‚Ä¢ –¶–µ–Ω: {len(sheet["prices"])}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if result['total_products']:
        print(f'\nüì¶ –ü–†–ò–ú–ï–†–´ –ù–ê–ô–î–ï–ù–ù–´–• –¢–û–í–ê–†–û–í:')
        for i, product in enumerate(result['total_products'][:8]):
            confidence_icon = "üü¢" if product['confidence'] > 0.8 else "üü°" if product['confidence'] > 0.6 else "üî¥"
            print(f'  {i+1:2d}. {confidence_icon} {product["name"][:40]:<40} (–ø–æ–∑: {product["position"]}, —É—Ä: {product["confidence"]:.1f})')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–µ–Ω
    if result['total_prices']:
        print(f'\nüí∞ –ü–†–ò–ú–ï–†–´ –ù–ê–ô–î–ï–ù–ù–´–• –¶–ï–ù:')
        for i, price in enumerate(result['total_prices'][:8]):
            confidence_icon = "üü¢" if price['confidence'] > 0.8 else "üü°" if price['confidence'] > 0.6 else "üî¥"
            print(f'  {i+1:2d}. {confidence_icon} {price["value"]:>10,.0f} (–ø–æ–∑: {price["position"]}, —É—Ä: {price["confidence"]:.1f})')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
    if result.get('product_price_pairs'):
        print(f'\nüîó –ü–†–ò–ú–ï–†–´ –°–í–Ø–ó–ê–ù–ù–´–• –ü–ê–† –¢–û–í–ê–†-–¶–ï–ù–ê:')
        for i, pair in enumerate(result['product_price_pairs'][:5]):
            confidence_icon = "üü¢" if pair['confidence'] > 0.8 else "üü°" if pair['confidence'] > 0.6 else "üî¥"
            product_name = pair['product']['name'][:30]
            price_value = pair['price']['value']
            print(f'  {i+1}. {confidence_icon} {product_name:<30} ‚Üí {price_value:>8,.0f} (—É—Ä: {pair["confidence"]:.1f})')
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    completeness = recovery_stats['data_completeness']
    if completeness >= 90:
        quality_status = "üéâ –û–¢–õ–ò–ß–ù–û–ï"
        quality_icon = "‚úÖ"
    elif completeness >= 75:
        quality_status = "üëç –•–û–†–û–®–ï–ï"
        quality_icon = "‚úÖ"
    elif completeness >= 50:
        quality_status = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï"
        quality_icon = "‚ö†Ô∏è"
    else:
        quality_status = "‚ùå –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø"
        quality_icon = "‚ùå"
    
    print(f'\n{quality_icon} –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {quality_status} ({completeness:.1f}%)')

def compare_processing_results(results: list):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    print('üîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ö–ò')
    print('=' * 70)
    
    comparison_table = []
    
    for result in results:
        if 'error' not in result:
            file_name = Path(result['file_path']).name
            recovery_stats = result['recovery_stats']
            
            comparison_table.append({
                'file': file_name,
                'strategy': result.get('processing_strategy', 'unknown'),
                'products': len(result['total_products']),
                'prices': len(result['total_prices']),
                'pairs': len(result.get('product_price_pairs', [])),
                'completeness': recovery_stats['data_completeness'],
                'recovered': recovery_stats['recovered_prices'],
                'fixes': recovery_stats['structure_fixes']
            })
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f'{"–§–∞–π–ª":<25} {"–°—Ç—Ä–∞—Ç–µ–≥–∏—è":<20} {"–¢–æ–≤–∞—Ä—ã":<8} {"–¶–µ–Ω—ã":<8} {"–ü–∞—Ä—ã":<6} {"–ü–æ–ª–Ω–æ—Ç–∞":<8} {"–í–æ—Å—Å—Ç.":<7} {"–ò—Å–ø—Ä.":<6}')
    print('-' * 90)
    
    # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    for row in comparison_table:
        completeness_str = f"{row['completeness']:.1f}%"
        print(f'{row["file"]:<25} {row["strategy"]:<20} {row["products"]:<8} {row["prices"]:<8} {row["pairs"]:<6} {completeness_str:<8} {row["recovered"]:<7} {row["fixes"]:<6}')
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if comparison_table:
        avg_completeness = sum(row['completeness'] for row in comparison_table) / len(comparison_table)
        total_products = sum(row['products'] for row in comparison_table)
        total_prices = sum(row['prices'] for row in comparison_table)
        total_recovered = sum(row['recovered'] for row in comparison_table)
        
        print('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        print(f'  üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_products}')
        print(f'  üí∞ –í—Å–µ–≥–æ —Ü–µ–Ω –Ω–∞–π–¥–µ–Ω–æ: {total_prices}')
        print(f'  üõ†Ô∏è  –í—Å–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {total_recovered}')
        print(f'  üìà –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞: {avg_completeness:.1f}%')
        
        if avg_completeness >= 90:
            print(f'  üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–†–ï–í–û–°–•–û–î–ù–´–ô - —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤—ã—Ö 90%+ –ø–æ–ª–Ω–æ—Ç—ã!')
        elif avg_completeness >= 75:
            print(f'  ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –•–û–†–û–®–ò–ô - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
        else:
            print(f'  ‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã')

def demonstrate_improvement():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    
    print('\nüîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–ô')
    print('=' * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤)
    baseline_results = {
        'LIST HARGA UD RAHAYU.xlsx': {
            'products': 56,
            'prices': 63,
            'completeness': 97.8
        },
        'DOC-20250428-WA0004..xlsx': {
            'products': 10,
            'prices': 5,
            'completeness': 35.9
        }
    }
    
    print('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:')
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    intelligent_results = test_intelligent_preprocessing()
    
    print('\nüìà –ò–¢–û–ì–ò –°–†–ê–í–ù–ï–ù–ò–Ø:')
    
    for result in intelligent_results:
        if 'error' not in result:
            file_name = Path(result['file_path']).name
            
            if file_name in baseline_results:
                baseline = baseline_results[file_name]
                
                new_products = len(result['total_products'])
                new_prices = len(result['total_prices'])
                new_completeness = result['recovery_stats']['data_completeness']
                
                products_improvement = ((new_products - baseline['products']) / baseline['products']) * 100
                prices_improvement = ((new_prices - baseline['prices']) / baseline['prices']) * 100
                completeness_improvement = new_completeness - baseline['completeness']
                
                print(f'\nüìÅ {file_name}:')
                print(f'  üì¶ –¢–æ–≤–∞—Ä—ã: {baseline["products"]} ‚Üí {new_products} ({products_improvement:+.1f}%)')
                print(f'  üí∞ –¶–µ–Ω—ã: {baseline["prices"]} ‚Üí {new_prices} ({prices_improvement:+.1f}%)')
                print(f'  üìà –ü–æ–ª–Ω–æ—Ç–∞: {baseline["completeness"]:.1f}% ‚Üí {new_completeness:.1f}% ({completeness_improvement:+.1f}%)')

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    test_results = test_intelligent_preprocessing()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥)
    # demonstrate_improvement() 