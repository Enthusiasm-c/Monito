#!/usr/bin/env python3
"""
MON-S03: Simple Quota Tests (–±–µ–∑ threading)
–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ daemon threads
"""

import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_quota_limits():
    """–¢–µ—Å—Ç QuotaLimits –±–µ–∑ threading"""
    
    print("üìã –¢–µ—Å—Ç QuotaLimits...")
    
    try:
        from modules.quota_manager import QuotaLimits
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã
        limits = QuotaLimits(
            max_files_per_hour=10,
            max_concurrent_tasks=2,
            max_file_size_mb=5.0
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        limits_dict = limits.to_dict()
        limits_restored = QuotaLimits.from_dict(limits_dict)
        
        assert limits_restored.max_files_per_hour == 10
        assert limits_restored.max_concurrent_tasks == 2
        assert limits_restored.max_file_size_mb == 5.0
        
        print("  ‚úÖ QuotaLimits —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_quota_manager():
    """–¢–µ—Å—Ç QuotaManager –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    print("üìã –¢–µ—Å—Ç QuotaManager...")
    
    try:
        from modules.quota_manager import QuotaManager, QuotaLimits
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
        test_limits = QuotaLimits(
            max_files_per_hour=5,
            max_concurrent_tasks=2,
            max_file_size_mb=1.0,
            requests_per_minute=10
        )
        
        manager = QuotaManager(default_limits=test_limits)
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        result = manager.check_quota("user1", file_size_mb=0.5)
        assert result.allowed == True
        
        # –¢–µ—Å—Ç 2: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        result = manager.check_quota("user1", file_size_mb=2.0)
        assert result.allowed == False
        assert "File size" in result.violation_reason
        
        # –¢–µ—Å—Ç 3: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        assert manager.reserve_quota("user1", file_size_mb=0.5) == True
        assert manager.complete_task("user1", success=True) == True
        
        print("  ‚úÖ QuotaManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_quota_limits_enforcement():
    """–¢–µ—Å—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
    
    print("üìã –¢–µ—Å—Ç quota limits enforcement...")
    
    try:
        from modules.quota_manager import QuotaManager, QuotaLimits
        
        # –ñ–µ—Å—Ç–∫–∏–µ –ª–∏–º–∏—Ç—ã
        strict_limits = QuotaLimits(
            max_files_per_hour=2,
            max_concurrent_tasks=1,
            requests_per_minute=3
        )
        
        manager = QuotaManager(default_limits=strict_limits)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏–º–∏—Ç concurrent tasks
        manager.reserve_quota("user1")
        result = manager.check_quota("user1")
        assert result.allowed == False
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º
        manager.complete_task("user1", success=True)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º hourly limit
        manager.reserve_quota("user1")
        manager.complete_task("user1", success=True) # 2 —Ñ–∞–π–ª–∞ –≤ —á–∞—Å
        
        result = manager.check_quota("user1")
        assert result.allowed == False
        assert "Hourly limit exceeded" in result.violation_reason
        
        print("  ‚úÖ Quota limits enforcement —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_quota_stats():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–æ—Ç"""
    
    print("üìã –¢–µ—Å—Ç quota statistics...")
    
    try:
        from modules.quota_manager import QuotaManager
        
        manager = QuotaManager()
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in ["user1", "user2", "user3"]:
            manager.reserve_quota(user_id)
            manager.complete_task(user_id, success=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = manager.get_quota_stats("user1")
        assert user_stats["user_id"] == "user1"
        assert "usage" in user_stats
        assert "limits" in user_stats
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        system_stats = manager.get_quota_stats()
        assert "system_stats" in system_stats
        assert system_stats["system_stats"]["total_users"] == 3
        
        print("  ‚úÖ Quota statistics —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_system_metrics():
    """–¢–µ—Å—Ç SystemMetrics –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    print("üìã –¢–µ—Å—Ç SystemMetrics...")
    
    try:
        from modules.adaptive_scaler import SystemMetrics
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = SystemMetrics(
            cpu_percent=45.5,
            memory_percent=62.3,
            active_tasks=5,
            queue_size=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        metrics_dict = metrics.to_dict()
        assert metrics_dict["cpu_percent"] == 45.5
        assert metrics_dict["memory_percent"] == 62.3
        
        print("  ‚úÖ SystemMetrics —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_scaling_decision():
    """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ —Å–∫–µ–π–ª–∏–Ω–≥–µ"""
    
    print("üìã –¢–µ—Å—Ç scaling decision...")
    
    try:
        from modules.quota_manager import QuotaManager
        from modules.adaptive_scaler import AdaptiveScaler, SystemMonitor, SystemMetrics
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ë–ï–ó –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        quota_manager = QuotaManager()
        monitor = SystemMonitor()  # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º start()
        scaler = AdaptiveScaler(quota_manager, monitor)
        
        # –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        high_load_metrics = SystemMetrics(
            cpu_percent=85.0,
            memory_percent=85.0,
            queue_size=60,
            active_tasks=20
        )
        
        decision = scaler._make_scaling_decision(high_load_metrics)
        assert decision["action"] == "scale_up"
        
        # –¢–µ—Å—Ç –Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        low_load_metrics = SystemMetrics(
            cpu_percent=15.0,
            memory_percent=25.0,
            queue_size=2,
            active_tasks=1
        )
        
        decision = scaler._make_scaling_decision(low_load_metrics)
        assert decision["action"] == "scale_down"
        
        print("  ‚úÖ Scaling decision —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_convenience_functions():
    """–¢–µ—Å—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    print("üìã –¢–µ—Å—Ç convenience functions...")
    
    try:
        from modules.quota_manager import (
            check_user_quota, reserve_user_quota, complete_user_task
        )
        
        # –¢–µ—Å—Ç check_user_quota
        result = check_user_quota("test_user", file_size_mb=1.0)
        assert result.user_id == "test_user"
        assert result.allowed == True
        
        # –¢–µ—Å—Ç reserve_user_quota  
        success = reserve_user_quota("test_user", file_size_mb=1.0)
        assert success == True
        
        # –¢–µ—Å—Ç complete_user_task
        success = complete_user_task("test_user", success=True)
        assert success == True
        
        print("  ‚úÖ Convenience functions —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    
    print("üìã –¢–µ—Å—Ç integration...")
    
    try:
        from modules.adaptive_scaler import create_adaptive_quota_system
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ë–ï–ó –∑–∞–ø—É—Å–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–µ–π–ª–∏–Ω–≥–∞
        quota_manager, adaptive_scaler = create_adaptive_quota_system()
        
        # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º adaptive_scaler.start() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å threading
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
        for user_id in ["user1", "user2", "user3"]:
            result = quota_manager.check_quota(user_id, file_size_mb=1.0)
            if result.allowed:
                quota_manager.reserve_quota(user_id, file_size_mb=1.0)
                quota_manager.complete_task(user_id, success=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = quota_manager.get_quota_stats()
        assert stats["system_stats"]["total_users"] == 3
        
        print("  ‚úÖ Integration —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def run_mon_s03_simple_tests():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ MON-S03"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ MON-S03 Simple Tests (–±–µ–∑ threading)")
    print("=" * 55)
    
    tests = [
        test_quota_limits,
        test_quota_manager,
        test_quota_limits_enforcement,
        test_quota_stats,
        test_system_metrics,
        test_scaling_decision,
        test_convenience_functions,
        test_integration
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}")
            failed += 1
    
    total = len(tests)
    success_rate = (passed / total) * 100
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ MON-S03 SIMPLE TESTS")
    print("=" * 40)
    print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    # DoD –∫—Ä–∏—Ç–µ—Ä–∏–∏
    dod_criteria = [
        ("Quota management", success_rate >= 85),
        ("Rate limiting", success_rate >= 85),
        ("Scaling decisions", success_rate >= 85),
        ("Integration", success_rate >= 85)
    ]
    
    dod_passed = 0
    for criterion, status in dod_criteria:
        if status:
            print(f"  ‚úÖ {criterion}")
            dod_passed += 1
        else:
            print(f"  ‚ùå {criterion}")
    
    dod_success_rate = (dod_passed / len(dod_criteria)) * 100
    print(f"\nüéØ DoD Success Rate: {dod_success_rate:.1f}%")
    
    if success_rate >= 85:
        print(f"\nüéâ MON-S03 Core Functionality –≥–æ—Ç–æ–≤!")
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å quota-aware concurrency —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üöÄ –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è - –î–û–°–¢–ò–ì–ù–£–¢–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è MON-S03 —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

if __name__ == "__main__":
    success = run_mon_s03_simple_tests()
    exit(0 if success else 1) 