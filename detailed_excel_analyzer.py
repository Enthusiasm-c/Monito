#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import sys
from pathlib import Path
import time
import re

def analyze_excel_content_detailed(file_path):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
    
    print(f'\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: {file_path}')
    print('=' * 70)
    
    if not Path(file_path).exists():
        print(f'‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return None
    
    try:
        from openpyxl import load_workbook
        
        wb = load_workbook(file_path, read_only=True)
        
        analysis_results = {
            'file_name': file_path,
            'sheets': [],
            'total_data_cells': 0,
            'products_found': [],
            'prices_found': [],
            'empty_cells': 0,
            'data_quality': {}
        }
        
        print(f'üìä –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(wb.sheetnames)} –ª–∏—Å—Ç–æ–≤: {wb.sheetnames}')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
        for sheet_name in wb.sheetnames:
            print(f'\nüìã –õ–ò–°–¢: "{sheet_name}"')
            print('-' * 40)
            
            ws = wb[sheet_name]
            sheet_analysis = analyze_sheet_detailed(ws, sheet_name)
            analysis_results['sheets'].append(sheet_analysis)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            analysis_results['total_data_cells'] += sheet_analysis['data_cells']
            analysis_results['empty_cells'] += sheet_analysis['empty_cells']
            analysis_results['products_found'].extend(sheet_analysis['products'])
            analysis_results['prices_found'].extend(sheet_analysis['prices'])
        
        wb.close()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        analysis_results['data_quality'] = calculate_data_quality(analysis_results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_summary_statistics(analysis_results)
        
        return analysis_results
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}')
        return None

def analyze_sheet_detailed(worksheet, sheet_name):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
    
    max_row = worksheet.max_row
    max_col = worksheet.max_column
    
    sheet_analysis = {
        'name': sheet_name,
        'dimensions': (max_row, max_col),
        'data_cells': 0,
        'empty_cells': 0,
        'products': [],
        'prices': [],
        'headers': [],
        'sample_rows': [],
        'column_types': {}
    }
    
    print(f'  üìê –†–∞–∑–º–µ—Ä—ã: {max_row} —Å—Ç—Ä–æ–∫ x {max_col} —Å—Ç–æ–ª–±—Ü–æ–≤')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    headers = []
    for col in range(1, min(max_col + 1, 15)):  # –ú–∞–∫—Å–∏–º—É–º 15 —Å—Ç–æ–ª–±—Ü–æ–≤
        cell_value = worksheet.cell(row=1, column=col).value
        headers.append(cell_value if cell_value else "")
    
    sheet_analysis['headers'] = headers
    print(f'  üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:8]}...' if len(headers) > 8 else f'  üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
    for col in range(1, min(max_col + 1, 10)):
        col_data = []
        for row in range(2, min(max_row + 1, 20)):  # –ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            cell_value = worksheet.cell(row=row, column=col).value
            if cell_value is not None:
                col_data.append(type(cell_value).__name__)
        
        if col_data:
            most_common_type = max(set(col_data), key=col_data.count)
            sheet_analysis['column_types'][f'col_{col}'] = {
                'main_type': most_common_type,
                'samples': len(col_data)
            }
    
    print(f'  üî¢ –¢–∏–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤: {[(k, v["main_type"]) for k, v in list(sheet_analysis["column_types"].items())[:5]]}')
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 15 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    print(f'\n  üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• 15 –°–¢–†–û–ö:')
    
    for row_num in range(1, min(16, max_row + 1)):
        row_data = []
        non_empty_cells = 0
        
        for col in range(1, min(max_col + 1, 10)):  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç–æ–ª–±—Ü–æ–≤
            cell_value = worksheet.cell(row=row_num, column=col).value
            
            if cell_value is not None:
                cell_str = str(cell_value)
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if len(cell_str) > 20:
                    cell_str = cell_str[:17] + "..."
                row_data.append(cell_str)
                non_empty_cells += 1
                sheet_analysis['data_cells'] += 1
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                classify_cell_content(cell_value, sheet_analysis, row_num, col)
            else:
                row_data.append("")
                sheet_analysis['empty_cells'] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        if non_empty_cells > 0:
            row_type = "–ó–ê–ì–û–õ–û–í–û–ö" if row_num == 1 else "–î–ê–ù–ù–´–ï"
            print(f'    –°—Ç—Ä–æ–∫–∞ {row_num:2d} ({row_type}): {row_data}')
            
            if row_num <= 5:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∫–∞–∫ –æ–±—Ä–∞–∑—Ü—ã
                sheet_analysis['sample_rows'].append({
                    'row_num': row_num,
                    'data': row_data,
                    'non_empty_cells': non_empty_cells
                })
    
    return sheet_analysis

def classify_cell_content(cell_value, sheet_analysis, row, col):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏"""
    
    if isinstance(cell_value, str):
        # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        if len(cell_value.strip()) > 3 and not cell_value.isdigit():
            # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
            excluded_words = ['unit', 'qnt', 'price', 'harga', 'nama', 'no', 'qty', 'jumlah']
            if not any(word in cell_value.lower() for word in excluded_words):
                if row > 1:  # –ù–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    sheet_analysis['products'].append({
                        'value': cell_value.strip(),
                        'position': f'R{row}C{col}',
                        'length': len(cell_value.strip())
                    })
        
        # –ò—â–µ–º —Ü–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        price_pattern = r'\d+[.,]?\d*'
        if re.search(price_pattern, cell_value):
            numbers = re.findall(price_pattern, cell_value)
            for num in numbers:
                try:
                    price_value = float(num.replace(',', '.'))
                    if price_value > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
                        sheet_analysis['prices'].append({
                            'value': price_value,
                            'original': cell_value,
                            'position': f'R{row}C{col}'
                        })
                except ValueError:
                    pass
    
    elif isinstance(cell_value, (int, float)):
        # –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if cell_value > 10 and row > 1:  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            sheet_analysis['prices'].append({
                'value': float(cell_value),
                'original': str(cell_value),
                'position': f'R{row}C{col}'
            })

def calculate_data_quality(analysis_results):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    total_cells = analysis_results['total_data_cells'] + analysis_results['empty_cells']
    data_density = analysis_results['total_data_cells'] / total_cells if total_cells > 0 else 0
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    unique_products = list(set([p['value'].lower() for p in analysis_results['products_found']]))
    
    # –¶–µ–Ω—ã –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    reasonable_prices = [p for p in analysis_results['prices_found'] if 10 <= p['value'] <= 1000000]
    
    quality_metrics = {
        'data_density': round(data_density * 100, 1),
        'unique_products_count': len(unique_products),
        'total_prices_found': len(analysis_results['prices_found']),
        'reasonable_prices_count': len(reasonable_prices),
        'price_quality': round(len(reasonable_prices) / len(analysis_results['prices_found']) * 100, 1) if analysis_results['prices_found'] else 0
    }
    
    return quality_metrics

def print_summary_statistics(analysis_results):
    """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    print(f'\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–ê')
    print('=' * 50)
    
    quality = analysis_results['data_quality']
    
    print(f'üìÅ –§–∞–π–ª: {analysis_results["file_name"]}')
    print(f'üìã –õ–∏—Å—Ç–æ–≤: {len(analysis_results["sheets"])}')
    print(f'üìä –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:')
    print(f'  ‚Ä¢ –Ø—á–µ–µ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: {analysis_results["total_data_cells"]}')
    print(f'  ‚Ä¢ –ü—É—Å—Ç—ã—Ö —è—á–µ–µ–∫: {analysis_results["empty_cells"]}')
    print(f'  ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {quality["data_density"]}%')
    
    print(f'\nüì¶ –ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´ ({quality["unique_products_count"]} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö):')
    unique_products = list(set([p['value'] for p in analysis_results['products_found']]))
    for i, product in enumerate(unique_products[:10]):
        print(f'  {i+1:2d}. {product}')
    if len(unique_products) > 10:
        print(f'      ... –∏ –µ—â–µ {len(unique_products) - 10} —Ç–æ–≤–∞—Ä–æ–≤')
    
    print(f'\nüí∞ –ù–ê–ô–î–ï–ù–ù–´–ï –¶–ï–ù–´ ({quality["total_prices_found"]} –æ–±—â–∏—Ö, {quality["reasonable_prices_count"]} —Ä–∞–∑—É–º–Ω—ã—Ö):')
    reasonable_prices = [p for p in analysis_results['prices_found'] if 10 <= p['value'] <= 1000000]
    for i, price in enumerate(reasonable_prices[:10]):
        print(f'  {i+1:2d}. {price["value"]:>10.0f} (–ø–æ–∑–∏—Ü–∏—è: {price["position"]})')
    if len(reasonable_prices) > 10:
        print(f'      ... –∏ –µ—â–µ {len(reasonable_prices) - 10} —Ü–µ–Ω')
    
    print(f'\n‚úÖ –ö–ê–ß–ï–°–¢–í–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:')
    print(f'  ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {quality["data_density"]}% {"‚úÖ" if quality["data_density"] > 50 else "‚ö†Ô∏è"}')
    print(f'  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {quality["unique_products_count"]} {"‚úÖ" if quality["unique_products_count"] > 5 else "‚ö†Ô∏è"}')
    print(f'  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Ü–µ–Ω: {quality["price_quality"]}% {"‚úÖ" if quality["price_quality"] > 70 else "‚ö†Ô∏è"}')
    
    overall_score = (quality["data_density"] + quality["price_quality"]) / 2
    print(f'  ‚Ä¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {overall_score:.1f}% {"‚úÖ" if overall_score > 70 else "‚ö†Ô∏è" if overall_score > 50 else "‚ùå"}')

def analyze_multiple_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª–æ–≤"""
    
    print('üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ß–ù–û–°–¢–ò –ß–¢–ï–ù–ò–Ø EXCEL –§–ê–ô–õ–û–í')
    print('=' * 80)
    
    excel_files = [
        'LIST HARGA UD RAHAYU.xlsx',
        'DOC-20250428-WA0004..xlsx'
    ]
    
    all_results = []
    
    for file_path in excel_files:
        result = analyze_excel_content_detailed(file_path)
        if result:
            all_results.append(result)
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if len(all_results) > 1:
        print(f'\nüîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í')
        print('=' * 60)
        
        for result in all_results:
            quality = result['data_quality']
            print(f'üìÅ {result["file_name"]}:')
            print(f'  ‚Ä¢ –õ–∏—Å—Ç–æ–≤: {len(result["sheets"])}')
            print(f'  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {quality["unique_products_count"]}')
            print(f'  ‚Ä¢ –¶–µ–Ω: {quality["total_prices_found"]}')
            print(f'  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {(quality["data_density"] + quality["price_quality"]) / 2:.1f}%')
            print()
    
    return all_results

if __name__ == "__main__":
    analyze_multiple_files() 