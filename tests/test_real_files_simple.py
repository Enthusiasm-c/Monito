#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –±–µ–∑ pandas
"""

import sys
from pathlib import Path
import time
import json

def test_file_existence():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    print('üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –§–ê–ô–õ–û–í')
    print('=' * 50)
    
    files_to_test = [
        'LIST HARGA UD RAHAYU.xlsx',
        'DOC-20250428-WA0004..xlsx', 
        '1. PT. Global Anugrah Pasifik (groceries item).pdf'
    ]
    
    available_files = []
    
    for file_path in files_to_test:
        path = Path(file_path)
        if path.exists():
            size_mb = path.stat().st_size / (1024 * 1024)
            print(f'  ‚úÖ {file_path} ({size_mb:.1f} MB)')
            available_files.append(file_path)
        else:
            print(f'  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    return available_files

def test_openpyxl_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ Excel —á–µ—Ä–µ–∑ openpyxl (–±–µ–∑ pandas)"""
    
    print('\nüîç –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ Excel —á–µ—Ä–µ–∑ openpyxl')
    print('=' * 50)
    
    try:
        from openpyxl import load_workbook
        
        excel_files = [
            'LIST HARGA UD RAHAYU.xlsx',
            'DOC-20250428-WA0004..xlsx'
        ]
        
        results = []
        
        for file_path in excel_files:
            if Path(file_path).exists():
                print(f'\nüìä –ü–∞—Ä—Å–∏–º: {file_path}')
                
                start_time = time.time()
                
                try:
                    wb = load_workbook(file_path, read_only=True)
                    ws = wb.active
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    max_row = ws.max_row
                    max_col = ws.max_column
                    
                    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã
                    products_found = []
                    prices_found = []
                    
                    for row in range(2, min(20, max_row + 1)):  # –ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
                        row_data = []
                        for col in range(1, min(10, max_col + 1)):  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç–æ–ª–±—Ü–æ–≤
                            cell_value = ws.cell(row=row, column=col).value
                            if cell_value:
                                row_data.append(str(cell_value))
                        
                        # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                        text_values = [v for v in row_data if v and not v.isdigit()]
                        if text_values:
                            products_found.extend(text_values[:2])  # –ü–µ—Ä–≤—ã–µ 2 –∑–Ω–∞—á–µ–Ω–∏—è
                        
                        # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                        numeric_values = [v for v in row_data if v and v.replace('.', '').isdigit()]
                        if numeric_values:
                            prices_found.extend(numeric_values[:2])  # –ü–µ—Ä–≤—ã–µ 2 –∑–Ω–∞—á–µ–Ω–∏—è
                    
                    process_time = time.time() - start_time
                    
                    result = {
                        'file': file_path,
                        'sheets': wb.sheetnames,
                        'rows': max_row,
                        'columns': max_col,
                        'products_sample': products_found[:5],
                        'prices_sample': prices_found[:5],
                        'processing_time': round(process_time, 3)
                    }
                    
                    results.append(result)
                    
                    print(f'  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {process_time:.3f}s')
                    print(f'  üìä –†–∞–∑–º–µ—Ä: {max_row} —Å—Ç—Ä–æ–∫ x {max_col} —Å—Ç–æ–ª–±—Ü–æ–≤')
                    print(f'  üìã –õ–∏—Å—Ç—ã: {wb.sheetnames}')
                    print(f'  üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä—ã): {products_found[:3]}')
                    print(f'  üí∞ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω (–ø—Ä–∏–º–µ—Ä—ã): {prices_found[:3]}')
                    
                    wb.close()
                    
                except Exception as e:
                    print(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}')
                    
        return results
        
    except ImportError:
        print('‚ùå openpyxl –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return []

def test_quota_system_on_real_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–≤–æ—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    
    print('\nüîç –¢–ï–°–¢: –°–∏—Å—Ç–µ–º–∞ –∫–≤–æ—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö')
    print('=' * 50)
    
    try:
        sys.path.insert(0, str(Path(__file__).parent))
        from modules.quota_manager import QuotaManager, QuotaLimits
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        limits = QuotaLimits(
            max_files_per_hour=20,
            max_concurrent_tasks=5,
            max_file_size_mb=100.0,  # 100MB –ª–∏–º–∏—Ç
            requests_per_minute=10
        )
        
        manager = QuotaManager()
        manager.set_user_limits("real_user", limits)
        
        print('  ‚úÖ QuotaManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏')
        print(f'    ‚Ä¢ –§–∞–π–ª–æ–≤ –≤ —á–∞—Å: {limits.max_files_per_hour}')
        print(f'    ‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {limits.max_concurrent_tasks}')
        print(f'    ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {limits.max_file_size_mb} MB')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        test_files = [
            'LIST HARGA UD RAHAYU.xlsx',
            'DOC-20250428-WA0004..xlsx',
            '1. PT. Global Anugrah Pasifik (groceries item).pdf'
        ]
        
        for file_path in test_files:
            if Path(file_path).exists():
                file_size_mb = Path(file_path).stat().st_size / (1024 * 1024)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É
                result = manager.check_quota("real_user", file_size_mb=file_size_mb)
                
                print(f'\n  üìä {file_path}')
                print(f'    –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB')
                print(f'    –°—Ç–∞—Ç—É—Å: {"‚úÖ –†–ê–ó–†–ï–®–ï–ù" if result.allowed else "‚ùå –û–¢–ö–õ–û–ù–ï–ù"}')
                
                if result.allowed:
                    # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∫–≤–æ—Ç—É
                    manager.reserve_quota("real_user", file_size_mb=file_size_mb)
                    print(f'    –ö–≤–æ—Ç–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞')
                else:
                    print(f'    –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {result.violation_reason}')
                    if result.retry_after_seconds:
                        print(f'    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑: {result.retry_after_seconds} —Å–µ–∫')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usage = manager.get_user_usage("real_user")
        print(f'\n  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        print(f'    –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {usage.active_tasks}')
        print(f'    –§–∞–π–ª–æ–≤ –≤ —á–∞—Å: {usage.files_this_hour}')
        print(f'    –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {usage.requests_this_minute}')
        
        return True
        
    except ImportError as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ QuotaManager: {e}')
        return False

def test_metrics_and_monitoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–µ—Ç—Ä–∏–∫"""
    
    print('\nüîç –¢–ï–°–¢: –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    print('=' * 50)
    
    try:
        sys.path.insert(0, str(Path(__file__).parent))
        from modules.metrics_collector_v2 import MetricsCollectorV2
        
        collector = MetricsCollectorV2()
        
        print('  ‚úÖ MetricsCollectorV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        files_to_process = [
            'LIST HARGA UD RAHAYU.xlsx',
            'DOC-20250428-WA0004..xlsx'
        ]
        
        total_metrics = {
            'files_processed': 0,
            'total_size_mb': 0,
            'total_time': 0,
            'products_extracted': 0
        }
        
        for file_path in files_to_process:
            if Path(file_path).exists():
                file_size = Path(file_path).stat().st_size
                file_size_mb = file_size / (1024 * 1024)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                start_time = time.time()
                time.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                process_time = time.time() - start_time
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
                estimated_products = int(file_size / 500)  # ~500 –±–∞–π—Ç –Ω–∞ —Ç–æ–≤–∞—Ä
                
                metrics = {
                    'file_name': file_path,
                    'file_size_bytes': file_size,
                    'file_size_mb': round(file_size_mb, 2),
                    'processing_time': round(process_time, 3),
                    'estimated_products': estimated_products,
                    'status': 'success'
                }
                
                print(f'\n  üìä {file_path}:')
                print(f'    –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB')
                print(f'    –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {process_time:.3f}s')
                print(f'    –û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {estimated_products}')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                total_metrics['files_processed'] += 1
                total_metrics['total_size_mb'] += file_size_mb
                total_metrics['total_time'] += process_time
                total_metrics['products_extracted'] += estimated_products
        
        print(f'\n  üìà –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:')
        print(f'    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_metrics["files_processed"]}')
        print(f'    –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_metrics["total_size_mb"]:.2f} MB')
        print(f'    –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_metrics["total_time"]:.3f}s')
        print(f'    –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_metrics["products_extracted"]}')
        
        return total_metrics
        
    except ImportError as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MetricsCollectorV2: {e}')
        return None

def run_comprehensive_simple_test():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    print('üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)')
    print('=' * 70)
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    available_files = test_file_existence()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    parsing_results = test_openpyxl_parsing()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–≤–æ—Ç—ã  
    quota_success = test_quota_system_on_real_files()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics_results = test_metrics_and_monitoring()
    
    total_time = time.time() - start_time
    
    print('\n\nüéØ –ò–¢–û–ì–ò –£–ü–†–û–©–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    print('=' * 60)
    print(f'‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s')
    print(f'üìÅ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(available_files)}')
    print(f'üìä Excel —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(parsing_results)}')
    print(f'üö¶ –°–∏—Å—Ç–µ–º–∞ –∫–≤–æ—Ç: {"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if quota_success else "‚ùå –û—à–∏–±–∫–∞"}')
    print(f'üìà –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫: {"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if metrics_results else "‚ùå –û—à–∏–±–∫–∞"}')
    
    if parsing_results:
        print(f'\nüìã –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel:')
        for result in parsing_results:
            print(f'  ‚Ä¢ {result["file"]}: {result["rows"]} —Å—Ç—Ä–æ–∫, {len(result["products_sample"])} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ')
    
    print(f'\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏!')
    print(f'üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å pandas/numpy —Ä–µ—à–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ')

if __name__ == "__main__":
    run_comprehensive_simple_test() 