#!/usr/bin/env python3
"""
Test script to demonstrate detailed logging for tracking data losses and failures
"""

import os
import sys
import asyncio
import logging
from dotenv import load_dotenv

# Setup paths
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

# Enhanced logging configuration
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('detailed_processing.log', mode='w', encoding='utf-8')
    ]
)

from upload_and_process import process_file_directly

async def test_with_detailed_logging():
    """Test file processing with comprehensive logging"""
    print("üîç –¢–ï–°–¢ –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú")
    print("=" * 60)
    print("üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: detailed_processing.log")
    print("=" * 60)
    
    # Test file
    test_file = "/Users/denisdomashenko/price_list_analyzer/DOC-20250428-WA0004..xlsx"
    
    if not os.path.exists(test_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        # Try to find any Excel file
        import glob
        excel_files = glob.glob("**/*.xlsx", recursive=True) + glob.glob("**/*.xls", recursive=True)
        if excel_files:
            test_file = excel_files[0]
            print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {os.path.basename(test_file)}")
        else:
            print("‚ùå –ù–µ—Ç Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
    print(f"üìÑ –§–∞–π–ª: {os.path.basename(test_file)}")
    print(f"üîç –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ —Ñ–∞–π–ª–µ 'detailed_processing.log'")
    print("-" * 60)
    
    try:
        result = await process_file_directly(test_file)
        
        print("\n" + "=" * 60)
        print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        if result:
            extraction_stats = result.get('extraction_stats', {})
            processing_stats = result.get('processing_stats', {})
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üîß –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extraction_stats.get('extraction_method', 'N/A')}")
            print(f"ü§ñ AI Enhanced: {extraction_stats.get('ai_enhanced', False)}")
            
            if processing_stats:
                print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ ChatGPT: {processing_stats.get('total_input_products', 0)} ‚Üí {processing_stats.get('total_output_products', 0)}")
                print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å ChatGPT: {processing_stats.get('success_rate', 0):.1%}")
                print(f"üíî –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è –ø–∞–∫–µ—Ç–æ–≤: {processing_stats.get('total_batches', 0) - processing_stats.get('successful_batches', 0)}")
        else:
            print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
        print(f"\nüìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: detailed_processing.log")
        print(f"üîç –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—á–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –ø–æ—Ç–µ—Ä—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Main function"""
    asyncio.run(test_with_detailed_logging())

if __name__ == "__main__":
    main()