#!/usr/bin/env python3
"""
–î–µ–º–æ-—Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
"""

import os
import sys
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_config():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from config import MASTER_TABLE_PATH, PDF_CONFIG, GPT_CONFIG
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   - –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ: {MASTER_TABLE_PATH}")
        print(f"   - PDF DPI: {PDF_CONFIG['DPI']}")
        print(f"   - GPT –º–æ–¥–µ–ª—å: {GPT_CONFIG['MODEL']}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_utils():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüîß –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç...")
    try:
        from modules.utils import validate_file, clean_text, calculate_similarity
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        result = validate_file("test.xlsx", 1024*1024)  # 1MB
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {result['valid']}")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        cleaned = clean_text("  –¢–µ—Å—Ç   —Ç–µ–∫—Å—Ç–∞  \n\r")
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{cleaned}'")
        
        # –¢–µ—Å—Ç similarity
        similarity = calculate_similarity("Apple iPhone 13", "iPhone 13 Apple")
        print(f"‚úÖ Similarity: {similarity:.2f}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏—Ç: {e}")
        return False

def test_data_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíæ –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from modules.data_manager import DataManager
        
        dm = DataManager()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = dm.get_processing_stats()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(stats)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        summary = dm.get_table_summary()
        print(f"‚úÖ –°–≤–æ–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {summary.get('total_products', 0)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_file_processor():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)"""
    print("\nüìä –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    try:
        from modules.file_processor import FileProcessor
        
        fp = FileProcessor()
        
        # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ PDF (–±–µ–∑ —Ñ–∞–π–ª–∞)
        print("‚úÖ FileProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {fp.supported_extensions}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def test_monitoring():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìà –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    try:
        from monitoring.metrics import MetricsCollector
        
        mc = MetricsCollector()
        
        # –¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        system_metrics = mc.collect_system_metrics()
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: CPU {system_metrics.cpu_percent:.1f}%")
        
        # –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –±–∏–∑–Ω–µ—Å –º–µ—Ç—Ä–∏–∫
        business_metrics = mc.collect_business_metrics()
        print(f"‚úÖ –ë–∏–∑–Ω–µ—Å –º–µ—Ç—Ä–∏–∫–∏: {business_metrics.total_products} —Ç–æ–≤–∞—Ä–æ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def create_demo_excel_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ Excel —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–∞...")
    try:
        import pandas as pd
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
        demo_data = {
            'Product Name': [
                'Apple iPhone 13 128GB',
                'Samsung Galaxy S21',
                'MacBook Pro 13"',
                'Dell XPS 15',
                'AirPods Pro'
            ],
            'Price': [699.99, 599.99, 1299.99, 1199.99, 249.99],
            'Unit': ['pcs', 'pcs', 'pcs', 'pcs', 'pcs'],
            'Stock': [50, 30, 15, 8, 100]
        }
        
        df = pd.DataFrame(demo_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        os.makedirs('data/temp', exist_ok=True)
        demo_file = 'data/temp/demo_price_list.xlsx'
        df.to_excel(demo_file, index=False)
        
        print(f"‚úÖ –î–µ–º–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {demo_file}")
        print(f"   - –¢–æ–≤–∞—Ä–æ–≤: {len(demo_data['Product Name'])}")
        
        return demo_file
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Ñ–∞–π–ª–∞: {e}")
        return None

async def test_file_processing_with_demo():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–º–æ —Ñ–∞–π–ª–∞"""
    print("\nüîÑ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–º–æ —Ñ–∞–π–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ñ–∞–π–ª
    demo_file = create_demo_excel_file()
    if not demo_file:
        return False
    
    try:
        from modules.file_processor import FileProcessor
        
        fp = FileProcessor()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ —Ñ–∞–π–ª–∞
        result = await fp.process_file(demo_file)
        
        print(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
        print(f"   - –¢–∏–ø —Ñ–∞–π–ª–∞: {result.get('file_type')}")
        print(f"   - –¢–æ–≤–∞—Ä–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(result.get('products', []))}")
        print(f"   - –ü–æ—Å—Ç–∞–≤—â–∏–∫: {result.get('supplier', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
        if result.get('products'):
            first_product = result['products'][0]
            print(f"   - –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_product.get('original_name')} - ${first_product.get('price')}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def print_setup_instructions():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*60)
    print("üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–û–õ–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ï")
    print("="*60)
    print()
    print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print()
    print("1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ Telegram Bot Token:")
    print("   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram")
    print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newbot")
    print("   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
    print("   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
    print()
    print("2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ OpenAI API Key:")
    print("   ‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com/api-keys")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å credits")
    print()
    print("3Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª:")
    print("   TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    print("   OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á_openai")
    print("   ENVIRONMENT=development")
    print("   LOG_LEVEL=DEBUG")
    print()
    print("4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract –¥–ª—è PDF:")
    print("   # Ubuntu/Debian:")
    print("   sudo apt install tesseract-ocr tesseract-ocr-eng")
    print("   # macOS:")
    print("   brew install tesseract")
    print("   # Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å GitHub")
    print()
    print("5Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:")
    print("   python main.py")
    print()
    print("="*60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ-—Ç–µ—Å—Ç–∞"""
    print("üîç –î–ï–ú–û-–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê –ü–†–ê–ô–°-–õ–ò–°–¢–û–í")
    print("="*60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–£—Ç–∏–ª–∏—Ç—ã", test_utils),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö", test_data_manager),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤", test_file_processor),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", test_monitoring),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ —Ñ–∞–π–ª–∞", test_file_processing_with_demo),
    ]
    
    passed = 0
    failed = 0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            failed += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n{'='*60}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/(passed+failed)*100):.1f}%")
    
    if failed == 0:
        print(f"\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–Ω–µ—à–Ω–∏—Ö API")
    else:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {failed} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö")
        print(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    print_setup_instructions()

if __name__ == "__main__":
    asyncio.run(main())